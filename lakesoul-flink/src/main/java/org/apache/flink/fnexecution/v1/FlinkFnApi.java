// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flink-fn-execution.proto

package org.apache.flink.fnexecution.v1;

public final class FlinkFnApi {
  private FlinkFnApi() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface JobParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.JobParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string key = 1;</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <code>string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * Protobuf type {@code org.apache.flink.fn_execution.v1.JobParameter}
   */
  public static final class JobParameter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.JobParameter)
      JobParameterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use JobParameter.newBuilder() to construct.
    private JobParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private JobParameter() {
      key_ = "";
      value_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new JobParameter();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_JobParameter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_JobParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.class, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private volatile java.lang.Object key_;
    /**
     * <code>string key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }
    /**
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <code>string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter other = (org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.JobParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.JobParameter)
        org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_JobParameter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_JobParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.class, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        key_ = "";

        value_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_JobParameter_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter result = new org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter(this);
        result.key_ = key_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.getDefaultInstance()) return this;
        if (!other.getKey().isEmpty()) {
          key_ = other.key_;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                key_ = input.readStringRequireUtf8();

                break;
              } // case 10
              case 18: {
                value_ = input.readStringRequireUtf8();

                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <code>string key = 1;</code>
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <code>string key = 1;</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        key_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        value_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.JobParameter)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.JobParameter)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<JobParameter>
        PARSER = new com.google.protobuf.AbstractParser<JobParameter>() {
      @java.lang.Override
      public JobParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<JobParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<JobParameter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Input)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     * @return Whether the udf field is set.
     */
    boolean hasUdf();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     * @return The udf.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdf();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfOrBuilder();

    /**
     * <code>int32 inputOffset = 2;</code>
     * @return Whether the inputOffset field is set.
     */
    boolean hasInputOffset();
    /**
     * <code>int32 inputOffset = 2;</code>
     * @return The inputOffset.
     */
    int getInputOffset();

    /**
     * <code>bytes inputConstant = 3;</code>
     * @return Whether the inputConstant field is set.
     */
    boolean hasInputConstant();
    /**
     * <code>bytes inputConstant = 3;</code>
     * @return The inputConstant.
     */
    com.google.protobuf.ByteString getInputConstant();

    public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.InputCase getInputCase();
  }
  /**
   * Protobuf type {@code org.apache.flink.fn_execution.v1.Input}
   */
  public static final class Input extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Input)
      InputOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Input.newBuilder() to construct.
    private Input(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Input() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Input();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Input.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder.class);
    }

    private int inputCase_ = 0;
    private java.lang.Object input_;
    public enum InputCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      UDF(1),
      INPUTOFFSET(2),
      INPUTCONSTANT(3),
      INPUT_NOT_SET(0);
      private final int value;
      private InputCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InputCase valueOf(int value) {
        return forNumber(value);
      }

      public static InputCase forNumber(int value) {
        switch (value) {
          case 1: return UDF;
          case 2: return INPUTOFFSET;
          case 3: return INPUTCONSTANT;
          case 0: return INPUT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public InputCase
    getInputCase() {
      return InputCase.forNumber(
          inputCase_);
    }

    public static final int UDF_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     * @return Whether the udf field is set.
     */
    @java.lang.Override
    public boolean hasUdf() {
      return inputCase_ == 1;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     * @return The udf.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdf() {
      if (inputCase_ == 1) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfOrBuilder() {
      if (inputCase_ == 1) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
    }

    public static final int INPUTOFFSET_FIELD_NUMBER = 2;
    /**
     * <code>int32 inputOffset = 2;</code>
     * @return Whether the inputOffset field is set.
     */
    @java.lang.Override
    public boolean hasInputOffset() {
      return inputCase_ == 2;
    }
    /**
     * <code>int32 inputOffset = 2;</code>
     * @return The inputOffset.
     */
    @java.lang.Override
    public int getInputOffset() {
      if (inputCase_ == 2) {
        return (java.lang.Integer) input_;
      }
      return 0;
    }

    public static final int INPUTCONSTANT_FIELD_NUMBER = 3;
    /**
     * <code>bytes inputConstant = 3;</code>
     * @return Whether the inputConstant field is set.
     */
    @java.lang.Override
    public boolean hasInputConstant() {
      return inputCase_ == 3;
    }
    /**
     * <code>bytes inputConstant = 3;</code>
     * @return The inputConstant.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getInputConstant() {
      if (inputCase_ == 3) {
        return (com.google.protobuf.ByteString) input_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (inputCase_ == 1) {
        output.writeMessage(1, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_);
      }
      if (inputCase_ == 2) {
        output.writeInt32(
            2, (int)((java.lang.Integer) input_));
      }
      if (inputCase_ == 3) {
        output.writeBytes(
            3, (com.google.protobuf.ByteString) input_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (inputCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_);
      }
      if (inputCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              2, (int)((java.lang.Integer) input_));
      }
      if (inputCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              3, (com.google.protobuf.ByteString) input_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Input)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.Input other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Input) obj;

      if (!getInputCase().equals(other.getInputCase())) return false;
      switch (inputCase_) {
        case 1:
          if (!getUdf()
              .equals(other.getUdf())) return false;
          break;
        case 2:
          if (getInputOffset()
              != other.getInputOffset()) return false;
          break;
        case 3:
          if (!getInputConstant()
              .equals(other.getInputConstant())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (inputCase_) {
        case 1:
          hash = (37 * hash) + UDF_FIELD_NUMBER;
          hash = (53 * hash) + getUdf().hashCode();
          break;
        case 2:
          hash = (37 * hash) + INPUTOFFSET_FIELD_NUMBER;
          hash = (53 * hash) + getInputOffset();
          break;
        case 3:
          hash = (37 * hash) + INPUTCONSTANT_FIELD_NUMBER;
          hash = (53 * hash) + getInputConstant().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Input prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Input}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Input)
        org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Input.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Input.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (udfBuilder_ != null) {
          udfBuilder_.clear();
        }
        inputCase_ = 0;
        input_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Input_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Input result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Input result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Input(this);
        if (inputCase_ == 1) {
          if (udfBuilder_ == null) {
            result.input_ = input_;
          } else {
            result.input_ = udfBuilder_.build();
          }
        }
        if (inputCase_ == 2) {
          result.input_ = input_;
        }
        if (inputCase_ == 3) {
          result.input_ = input_;
        }
        result.inputCase_ = inputCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Input) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Input)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Input other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance()) return this;
        switch (other.getInputCase()) {
          case UDF: {
            mergeUdf(other.getUdf());
            break;
          }
          case INPUTOFFSET: {
            setInputOffset(other.getInputOffset());
            break;
          }
          case INPUTCONSTANT: {
            setInputConstant(other.getInputConstant());
            break;
          }
          case INPUT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getUdfFieldBuilder().getBuilder(),
                    extensionRegistry);
                inputCase_ = 1;
                break;
              } // case 10
              case 16: {
                input_ = input.readInt32();
                inputCase_ = 2;
                break;
              } // case 16
              case 26: {
                input_ = input.readBytes();
                inputCase_ = 3;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int inputCase_ = 0;
      private java.lang.Object input_;
      public InputCase
          getInputCase() {
        return InputCase.forNumber(
            inputCase_);
      }

      public Builder clearInput() {
        inputCase_ = 0;
        input_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> udfBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       * @return Whether the udf field is set.
       */
      @java.lang.Override
      public boolean hasUdf() {
        return inputCase_ == 1;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       * @return The udf.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdf() {
        if (udfBuilder_ == null) {
          if (inputCase_ == 1) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
        } else {
          if (inputCase_ == 1) {
            return udfBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public Builder setUdf(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          input_ = value;
          onChanged();
        } else {
          udfBuilder_.setMessage(value);
        }
        inputCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public Builder setUdf(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder builderForValue) {
        if (udfBuilder_ == null) {
          input_ = builderForValue.build();
          onChanged();
        } else {
          udfBuilder_.setMessage(builderForValue.build());
        }
        inputCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public Builder mergeUdf(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfBuilder_ == null) {
          if (inputCase_ == 1 &&
              input_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance()) {
            input_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_)
                .mergeFrom(value).buildPartial();
          } else {
            input_ = value;
          }
          onChanged();
        } else {
          if (inputCase_ == 1) {
            udfBuilder_.mergeFrom(value);
          } else {
            udfBuilder_.setMessage(value);
          }
        }
        inputCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public Builder clearUdf() {
        if (udfBuilder_ == null) {
          if (inputCase_ == 1) {
            inputCase_ = 0;
            input_ = null;
            onChanged();
          }
        } else {
          if (inputCase_ == 1) {
            inputCase_ = 0;
            input_ = null;
          }
          udfBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder getUdfBuilder() {
        return getUdfFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfOrBuilder() {
        if ((inputCase_ == 1) && (udfBuilder_ != null)) {
          return udfBuilder_.getMessageOrBuilder();
        } else {
          if (inputCase_ == 1) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedFunction udf = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
          getUdfFieldBuilder() {
        if (udfBuilder_ == null) {
          if (!(inputCase_ == 1)) {
            input_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
          }
          udfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) input_,
                  getParentForChildren(),
                  isClean());
          input_ = null;
        }
        inputCase_ = 1;
        onChanged();;
        return udfBuilder_;
      }

      /**
       * <code>int32 inputOffset = 2;</code>
       * @return Whether the inputOffset field is set.
       */
      public boolean hasInputOffset() {
        return inputCase_ == 2;
      }
      /**
       * <code>int32 inputOffset = 2;</code>
       * @return The inputOffset.
       */
      public int getInputOffset() {
        if (inputCase_ == 2) {
          return (java.lang.Integer) input_;
        }
        return 0;
      }
      /**
       * <code>int32 inputOffset = 2;</code>
       * @param value The inputOffset to set.
       * @return This builder for chaining.
       */
      public Builder setInputOffset(int value) {
        inputCase_ = 2;
        input_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 inputOffset = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputOffset() {
        if (inputCase_ == 2) {
          inputCase_ = 0;
          input_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>bytes inputConstant = 3;</code>
       * @return Whether the inputConstant field is set.
       */
      public boolean hasInputConstant() {
        return inputCase_ == 3;
      }
      /**
       * <code>bytes inputConstant = 3;</code>
       * @return The inputConstant.
       */
      public com.google.protobuf.ByteString getInputConstant() {
        if (inputCase_ == 3) {
          return (com.google.protobuf.ByteString) input_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <code>bytes inputConstant = 3;</code>
       * @param value The inputConstant to set.
       * @return This builder for chaining.
       */
      public Builder setInputConstant(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  inputCase_ = 3;
        input_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes inputConstant = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputConstant() {
        if (inputCase_ == 3) {
          inputCase_ = 0;
          input_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Input)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Input)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Input DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Input();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Input getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Input>
        PARSER = new com.google.protobuf.AbstractParser<Input>() {
      @java.lang.Override
      public Input parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Input> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Input> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedFunction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The serialized representation of the user-defined function
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> 
        getInputsList();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index);
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    int getInputsCount();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
        getInputsOrBuilderList();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
        int index);

    /**
     * <pre>
     * The index of the over window used in pandas batch over window aggregation
     * </pre>
     *
     * <code>int32 window_index = 3;</code>
     * @return The windowIndex.
     */
    int getWindowIndex();

    /**
     * <pre>
     * Whether the UDF takes row as input instead of each columns of a row
     * </pre>
     *
     * <code>bool takes_row_as_input = 4;</code>
     * @return The takesRowAsInput.
     */
    boolean getTakesRowAsInput();

    /**
     * <pre>
     * Whether it's pandas UDF
     * </pre>
     *
     * <code>bool is_pandas_udf = 5;</code>
     * @return The isPandasUdf.
     */
    boolean getIsPandasUdf();
  }
  /**
   * <pre>
   * User-defined function definition. It supports chaining functions, that's, the execution
   * result of one user-defined function as the input of another user-defined function.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedFunction}
   */
  public static final class UserDefinedFunction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedFunction)
      UserDefinedFunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedFunction.newBuilder() to construct.
    private UserDefinedFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedFunction() {
      payload_ = com.google.protobuf.ByteString.EMPTY;
      inputs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedFunction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder.class);
    }

    public static final int PAYLOAD_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString payload_;
    /**
     * <pre>
     * The serialized representation of the user-defined function
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int INPUTS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> inputs_;
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> getInputsList() {
      return inputs_;
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
        getInputsOrBuilderList() {
      return inputs_;
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public int getInputsCount() {
      return inputs_.size();
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index) {
      return inputs_.get(index);
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
        int index) {
      return inputs_.get(index);
    }

    public static final int WINDOW_INDEX_FIELD_NUMBER = 3;
    private int windowIndex_;
    /**
     * <pre>
     * The index of the over window used in pandas batch over window aggregation
     * </pre>
     *
     * <code>int32 window_index = 3;</code>
     * @return The windowIndex.
     */
    @java.lang.Override
    public int getWindowIndex() {
      return windowIndex_;
    }

    public static final int TAKES_ROW_AS_INPUT_FIELD_NUMBER = 4;
    private boolean takesRowAsInput_;
    /**
     * <pre>
     * Whether the UDF takes row as input instead of each columns of a row
     * </pre>
     *
     * <code>bool takes_row_as_input = 4;</code>
     * @return The takesRowAsInput.
     */
    @java.lang.Override
    public boolean getTakesRowAsInput() {
      return takesRowAsInput_;
    }

    public static final int IS_PANDAS_UDF_FIELD_NUMBER = 5;
    private boolean isPandasUdf_;
    /**
     * <pre>
     * Whether it's pandas UDF
     * </pre>
     *
     * <code>bool is_pandas_udf = 5;</code>
     * @return The isPandasUdf.
     */
    @java.lang.Override
    public boolean getIsPandasUdf() {
      return isPandasUdf_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!payload_.isEmpty()) {
        output.writeBytes(1, payload_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        output.writeMessage(2, inputs_.get(i));
      }
      if (windowIndex_ != 0) {
        output.writeInt32(3, windowIndex_);
      }
      if (takesRowAsInput_ != false) {
        output.writeBool(4, takesRowAsInput_);
      }
      if (isPandasUdf_ != false) {
        output.writeBool(5, isPandasUdf_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, payload_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, inputs_.get(i));
      }
      if (windowIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, windowIndex_);
      }
      if (takesRowAsInput_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, takesRowAsInput_);
      }
      if (isPandasUdf_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isPandasUdf_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) obj;

      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (!getInputsList()
          .equals(other.getInputsList())) return false;
      if (getWindowIndex()
          != other.getWindowIndex()) return false;
      if (getTakesRowAsInput()
          != other.getTakesRowAsInput()) return false;
      if (getIsPandasUdf()
          != other.getIsPandasUdf()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      if (getInputsCount() > 0) {
        hash = (37 * hash) + INPUTS_FIELD_NUMBER;
        hash = (53 * hash) + getInputsList().hashCode();
      }
      hash = (37 * hash) + WINDOW_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getWindowIndex();
      hash = (37 * hash) + TAKES_ROW_AS_INPUT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTakesRowAsInput());
      hash = (37 * hash) + IS_PANDAS_UDF_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsPandasUdf());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * User-defined function definition. It supports chaining functions, that's, the execution
     * result of one user-defined function as the input of another user-defined function.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedFunction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedFunction)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        payload_ = com.google.protobuf.ByteString.EMPTY;

        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
        } else {
          inputs_ = null;
          inputsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        windowIndex_ = 0;

        takesRowAsInput_ = false;

        isPandasUdf_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction(this);
        int from_bitField0_ = bitField0_;
        result.payload_ = payload_;
        if (inputsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            inputs_ = java.util.Collections.unmodifiableList(inputs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.inputs_ = inputs_;
        } else {
          result.inputs_ = inputsBuilder_.build();
        }
        result.windowIndex_ = windowIndex_;
        result.takesRowAsInput_ = takesRowAsInput_;
        result.isPandasUdf_ = isPandasUdf_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance()) return this;
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        if (inputsBuilder_ == null) {
          if (!other.inputs_.isEmpty()) {
            if (inputs_.isEmpty()) {
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInputsIsMutable();
              inputs_.addAll(other.inputs_);
            }
            onChanged();
          }
        } else {
          if (!other.inputs_.isEmpty()) {
            if (inputsBuilder_.isEmpty()) {
              inputsBuilder_.dispose();
              inputsBuilder_ = null;
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              inputsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInputsFieldBuilder() : null;
            } else {
              inputsBuilder_.addAllMessages(other.inputs_);
            }
          }
        }
        if (other.getWindowIndex() != 0) {
          setWindowIndex(other.getWindowIndex());
        }
        if (other.getTakesRowAsInput() != false) {
          setTakesRowAsInput(other.getTakesRowAsInput());
        }
        if (other.getIsPandasUdf() != false) {
          setIsPandasUdf(other.getIsPandasUdf());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                payload_ = input.readBytes();

                break;
              } // case 10
              case 18: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Input m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.Input.parser(),
                        extensionRegistry);
                if (inputsBuilder_ == null) {
                  ensureInputsIsMutable();
                  inputs_.add(m);
                } else {
                  inputsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                windowIndex_ = input.readInt32();

                break;
              } // case 24
              case 32: {
                takesRowAsInput_ = input.readBool();

                break;
              } // case 32
              case 40: {
                isPandasUdf_ = input.readBool();

                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @return The payload.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> inputs_ =
        java.util.Collections.emptyList();
      private void ensureInputsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          inputs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Input>(inputs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> inputsBuilder_;

      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> getInputsList() {
        if (inputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputs_);
        } else {
          return inputsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public int getInputsCount() {
        if (inputsBuilder_ == null) {
          return inputs_.size();
        } else {
          return inputsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);
        } else {
          return inputsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder setInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.set(index, value);
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder setInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(index, value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addAllInputs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Input> values) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inputs_);
          onChanged();
        } else {
          inputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder clearInputs() {
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          inputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder removeInputs(int index) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.remove(index);
          onChanged();
        } else {
          inputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder getInputsBuilder(
          int index) {
        return getInputsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
          int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);  } else {
          return inputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
           getInputsOrBuilderList() {
        if (inputsBuilder_ != null) {
          return inputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputs_);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder addInputsBuilder() {
        return getInputsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance());
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder addInputsBuilder(
          int index) {
        return getInputsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance());
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder> 
           getInputsBuilderList() {
        return getInputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
          getInputsFieldBuilder() {
        if (inputsBuilder_ == null) {
          inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder>(
                  inputs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          inputs_ = null;
        }
        return inputsBuilder_;
      }

      private int windowIndex_ ;
      /**
       * <pre>
       * The index of the over window used in pandas batch over window aggregation
       * </pre>
       *
       * <code>int32 window_index = 3;</code>
       * @return The windowIndex.
       */
      @java.lang.Override
      public int getWindowIndex() {
        return windowIndex_;
      }
      /**
       * <pre>
       * The index of the over window used in pandas batch over window aggregation
       * </pre>
       *
       * <code>int32 window_index = 3;</code>
       * @param value The windowIndex to set.
       * @return This builder for chaining.
       */
      public Builder setWindowIndex(int value) {
        
        windowIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The index of the over window used in pandas batch over window aggregation
       * </pre>
       *
       * <code>int32 window_index = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowIndex() {
        
        windowIndex_ = 0;
        onChanged();
        return this;
      }

      private boolean takesRowAsInput_ ;
      /**
       * <pre>
       * Whether the UDF takes row as input instead of each columns of a row
       * </pre>
       *
       * <code>bool takes_row_as_input = 4;</code>
       * @return The takesRowAsInput.
       */
      @java.lang.Override
      public boolean getTakesRowAsInput() {
        return takesRowAsInput_;
      }
      /**
       * <pre>
       * Whether the UDF takes row as input instead of each columns of a row
       * </pre>
       *
       * <code>bool takes_row_as_input = 4;</code>
       * @param value The takesRowAsInput to set.
       * @return This builder for chaining.
       */
      public Builder setTakesRowAsInput(boolean value) {
        
        takesRowAsInput_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether the UDF takes row as input instead of each columns of a row
       * </pre>
       *
       * <code>bool takes_row_as_input = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTakesRowAsInput() {
        
        takesRowAsInput_ = false;
        onChanged();
        return this;
      }

      private boolean isPandasUdf_ ;
      /**
       * <pre>
       * Whether it's pandas UDF
       * </pre>
       *
       * <code>bool is_pandas_udf = 5;</code>
       * @return The isPandasUdf.
       */
      @java.lang.Override
      public boolean getIsPandasUdf() {
        return isPandasUdf_;
      }
      /**
       * <pre>
       * Whether it's pandas UDF
       * </pre>
       *
       * <code>bool is_pandas_udf = 5;</code>
       * @param value The isPandasUdf to set.
       * @return This builder for chaining.
       */
      public Builder setIsPandasUdf(boolean value) {
        
        isPandasUdf_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether it's pandas UDF
       * </pre>
       *
       * <code>bool is_pandas_udf = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsPandasUdf() {
        
        isPandasUdf_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedFunction)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedFunction)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedFunction>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedFunction>() {
      @java.lang.Override
      public UserDefinedFunction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UserDefinedFunction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedFunction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedFunctionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> 
        getUdfsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdfs(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    int getUdfsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
        getUdfsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfsOrBuilder(
        int index);

    /**
     * <code>bool metric_enabled = 2;</code>
     * @return The metricEnabled.
     */
    boolean getMetricEnabled();

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> 
        getWindowsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getWindows(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    int getWindowsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> 
        getWindowsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder getWindowsOrBuilder(
        int index);

    /**
     * <code>bool profile_enabled = 4;</code>
     * @return The profileEnabled.
     */
    boolean getProfileEnabled();

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> 
        getJobParametersList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    int getJobParametersCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
        getJobParametersOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A list of user-defined functions to be executed in a batch.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedFunctions}
   */
  public static final class UserDefinedFunctions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
      UserDefinedFunctionsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedFunctions.newBuilder() to construct.
    private UserDefinedFunctions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedFunctions() {
      udfs_ = java.util.Collections.emptyList();
      windows_ = java.util.Collections.emptyList();
      jobParameters_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedFunctions();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.Builder.class);
    }

    public static final int UDFS_FIELD_NUMBER = 1;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> udfs_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> getUdfsList() {
      return udfs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
        getUdfsOrBuilderList() {
      return udfs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    @java.lang.Override
    public int getUdfsCount() {
      return udfs_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdfs(int index) {
      return udfs_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfsOrBuilder(
        int index) {
      return udfs_.get(index);
    }

    public static final int METRIC_ENABLED_FIELD_NUMBER = 2;
    private boolean metricEnabled_;
    /**
     * <code>bool metric_enabled = 2;</code>
     * @return The metricEnabled.
     */
    @java.lang.Override
    public boolean getMetricEnabled() {
      return metricEnabled_;
    }

    public static final int WINDOWS_FIELD_NUMBER = 3;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> windows_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> getWindowsList() {
      return windows_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> 
        getWindowsOrBuilderList() {
      return windows_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    @java.lang.Override
    public int getWindowsCount() {
      return windows_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getWindows(int index) {
      return windows_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder getWindowsOrBuilder(
        int index) {
      return windows_.get(index);
    }

    public static final int PROFILE_ENABLED_FIELD_NUMBER = 4;
    private boolean profileEnabled_;
    /**
     * <code>bool profile_enabled = 4;</code>
     * @return The profileEnabled.
     */
    @java.lang.Override
    public boolean getProfileEnabled() {
      return profileEnabled_;
    }

    public static final int JOB_PARAMETERS_FIELD_NUMBER = 5;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> jobParameters_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> getJobParametersList() {
      return jobParameters_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
        getJobParametersOrBuilderList() {
      return jobParameters_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    @java.lang.Override
    public int getJobParametersCount() {
      return jobParameters_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index) {
      return jobParameters_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
        int index) {
      return jobParameters_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < udfs_.size(); i++) {
        output.writeMessage(1, udfs_.get(i));
      }
      if (metricEnabled_ != false) {
        output.writeBool(2, metricEnabled_);
      }
      for (int i = 0; i < windows_.size(); i++) {
        output.writeMessage(3, windows_.get(i));
      }
      if (profileEnabled_ != false) {
        output.writeBool(4, profileEnabled_);
      }
      for (int i = 0; i < jobParameters_.size(); i++) {
        output.writeMessage(5, jobParameters_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < udfs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, udfs_.get(i));
      }
      if (metricEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, metricEnabled_);
      }
      for (int i = 0; i < windows_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, windows_.get(i));
      }
      if (profileEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, profileEnabled_);
      }
      for (int i = 0; i < jobParameters_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, jobParameters_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions) obj;

      if (!getUdfsList()
          .equals(other.getUdfsList())) return false;
      if (getMetricEnabled()
          != other.getMetricEnabled()) return false;
      if (!getWindowsList()
          .equals(other.getWindowsList())) return false;
      if (getProfileEnabled()
          != other.getProfileEnabled()) return false;
      if (!getJobParametersList()
          .equals(other.getJobParametersList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getUdfsCount() > 0) {
        hash = (37 * hash) + UDFS_FIELD_NUMBER;
        hash = (53 * hash) + getUdfsList().hashCode();
      }
      hash = (37 * hash) + METRIC_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getMetricEnabled());
      if (getWindowsCount() > 0) {
        hash = (37 * hash) + WINDOWS_FIELD_NUMBER;
        hash = (53 * hash) + getWindowsList().hashCode();
      }
      hash = (37 * hash) + PROFILE_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getProfileEnabled());
      if (getJobParametersCount() > 0) {
        hash = (37 * hash) + JOB_PARAMETERS_FIELD_NUMBER;
        hash = (53 * hash) + getJobParametersList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A list of user-defined functions to be executed in a batch.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedFunctions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (udfsBuilder_ == null) {
          udfs_ = java.util.Collections.emptyList();
        } else {
          udfs_ = null;
          udfsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        metricEnabled_ = false;

        if (windowsBuilder_ == null) {
          windows_ = java.util.Collections.emptyList();
        } else {
          windows_ = null;
          windowsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        profileEnabled_ = false;

        if (jobParametersBuilder_ == null) {
          jobParameters_ = java.util.Collections.emptyList();
        } else {
          jobParameters_ = null;
          jobParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions(this);
        int from_bitField0_ = bitField0_;
        if (udfsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            udfs_ = java.util.Collections.unmodifiableList(udfs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.udfs_ = udfs_;
        } else {
          result.udfs_ = udfsBuilder_.build();
        }
        result.metricEnabled_ = metricEnabled_;
        if (windowsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            windows_ = java.util.Collections.unmodifiableList(windows_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.windows_ = windows_;
        } else {
          result.windows_ = windowsBuilder_.build();
        }
        result.profileEnabled_ = profileEnabled_;
        if (jobParametersBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            jobParameters_ = java.util.Collections.unmodifiableList(jobParameters_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.jobParameters_ = jobParameters_;
        } else {
          result.jobParameters_ = jobParametersBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions.getDefaultInstance()) return this;
        if (udfsBuilder_ == null) {
          if (!other.udfs_.isEmpty()) {
            if (udfs_.isEmpty()) {
              udfs_ = other.udfs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureUdfsIsMutable();
              udfs_.addAll(other.udfs_);
            }
            onChanged();
          }
        } else {
          if (!other.udfs_.isEmpty()) {
            if (udfsBuilder_.isEmpty()) {
              udfsBuilder_.dispose();
              udfsBuilder_ = null;
              udfs_ = other.udfs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              udfsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getUdfsFieldBuilder() : null;
            } else {
              udfsBuilder_.addAllMessages(other.udfs_);
            }
          }
        }
        if (other.getMetricEnabled() != false) {
          setMetricEnabled(other.getMetricEnabled());
        }
        if (windowsBuilder_ == null) {
          if (!other.windows_.isEmpty()) {
            if (windows_.isEmpty()) {
              windows_ = other.windows_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureWindowsIsMutable();
              windows_.addAll(other.windows_);
            }
            onChanged();
          }
        } else {
          if (!other.windows_.isEmpty()) {
            if (windowsBuilder_.isEmpty()) {
              windowsBuilder_.dispose();
              windowsBuilder_ = null;
              windows_ = other.windows_;
              bitField0_ = (bitField0_ & ~0x00000002);
              windowsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getWindowsFieldBuilder() : null;
            } else {
              windowsBuilder_.addAllMessages(other.windows_);
            }
          }
        }
        if (other.getProfileEnabled() != false) {
          setProfileEnabled(other.getProfileEnabled());
        }
        if (jobParametersBuilder_ == null) {
          if (!other.jobParameters_.isEmpty()) {
            if (jobParameters_.isEmpty()) {
              jobParameters_ = other.jobParameters_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureJobParametersIsMutable();
              jobParameters_.addAll(other.jobParameters_);
            }
            onChanged();
          }
        } else {
          if (!other.jobParameters_.isEmpty()) {
            if (jobParametersBuilder_.isEmpty()) {
              jobParametersBuilder_.dispose();
              jobParametersBuilder_ = null;
              jobParameters_ = other.jobParameters_;
              bitField0_ = (bitField0_ & ~0x00000004);
              jobParametersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getJobParametersFieldBuilder() : null;
            } else {
              jobParametersBuilder_.addAllMessages(other.jobParameters_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.parser(),
                        extensionRegistry);
                if (udfsBuilder_ == null) {
                  ensureUdfsIsMutable();
                  udfs_.add(m);
                } else {
                  udfsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                metricEnabled_ = input.readBool();

                break;
              } // case 16
              case 26: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.parser(),
                        extensionRegistry);
                if (windowsBuilder_ == null) {
                  ensureWindowsIsMutable();
                  windows_.add(m);
                } else {
                  windowsBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 32: {
                profileEnabled_ = input.readBool();

                break;
              } // case 32
              case 42: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.parser(),
                        extensionRegistry);
                if (jobParametersBuilder_ == null) {
                  ensureJobParametersIsMutable();
                  jobParameters_.add(m);
                } else {
                  jobParametersBuilder_.addMessage(m);
                }
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> udfs_ =
        java.util.Collections.emptyList();
      private void ensureUdfsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          udfs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction>(udfs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> udfsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> getUdfsList() {
        if (udfsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(udfs_);
        } else {
          return udfsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public int getUdfsCount() {
        if (udfsBuilder_ == null) {
          return udfs_.size();
        } else {
          return udfsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction getUdfs(int index) {
        if (udfsBuilder_ == null) {
          return udfs_.get(index);
        } else {
          return udfsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder setUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.set(index, value);
          onChanged();
        } else {
          udfsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder setUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.set(index, builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addUdfs(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.add(value);
          onChanged();
        } else {
          udfsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.add(index, value);
          onChanged();
        } else {
          udfsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.add(builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.add(index, builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder addAllUdfs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction> values) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, udfs_);
          onChanged();
        } else {
          udfsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder clearUdfs() {
        if (udfsBuilder_ == null) {
          udfs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          udfsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public Builder removeUdfs(int index) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.remove(index);
          onChanged();
        } else {
          udfsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder getUdfsBuilder(
          int index) {
        return getUdfsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder getUdfsOrBuilder(
          int index) {
        if (udfsBuilder_ == null) {
          return udfs_.get(index);  } else {
          return udfsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
           getUdfsOrBuilderList() {
        if (udfsBuilder_ != null) {
          return udfsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(udfs_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder addUdfsBuilder() {
        return getUdfsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder addUdfsBuilder(
          int index) {
        return getUdfsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedFunction udfs = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder> 
           getUdfsBuilderList() {
        return getUdfsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder> 
          getUdfsFieldBuilder() {
        if (udfsBuilder_ == null) {
          udfsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctionOrBuilder>(
                  udfs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          udfs_ = null;
        }
        return udfsBuilder_;
      }

      private boolean metricEnabled_ ;
      /**
       * <code>bool metric_enabled = 2;</code>
       * @return The metricEnabled.
       */
      @java.lang.Override
      public boolean getMetricEnabled() {
        return metricEnabled_;
      }
      /**
       * <code>bool metric_enabled = 2;</code>
       * @param value The metricEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setMetricEnabled(boolean value) {
        
        metricEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool metric_enabled = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetricEnabled() {
        
        metricEnabled_ = false;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> windows_ =
        java.util.Collections.emptyList();
      private void ensureWindowsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          windows_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow>(windows_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> windowsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> getWindowsList() {
        if (windowsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(windows_);
        } else {
          return windowsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public int getWindowsCount() {
        if (windowsBuilder_ == null) {
          return windows_.size();
        } else {
          return windowsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getWindows(int index) {
        if (windowsBuilder_ == null) {
          return windows_.get(index);
        } else {
          return windowsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder setWindows(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow value) {
        if (windowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWindowsIsMutable();
          windows_.set(index, value);
          onChanged();
        } else {
          windowsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder setWindows(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder builderForValue) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          windows_.set(index, builderForValue.build());
          onChanged();
        } else {
          windowsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addWindows(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow value) {
        if (windowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWindowsIsMutable();
          windows_.add(value);
          onChanged();
        } else {
          windowsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addWindows(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow value) {
        if (windowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWindowsIsMutable();
          windows_.add(index, value);
          onChanged();
        } else {
          windowsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addWindows(
          org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder builderForValue) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          windows_.add(builderForValue.build());
          onChanged();
        } else {
          windowsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addWindows(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder builderForValue) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          windows_.add(index, builderForValue.build());
          onChanged();
        } else {
          windowsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder addAllWindows(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow> values) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, windows_);
          onChanged();
        } else {
          windowsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder clearWindows() {
        if (windowsBuilder_ == null) {
          windows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          windowsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public Builder removeWindows(int index) {
        if (windowsBuilder_ == null) {
          ensureWindowsIsMutable();
          windows_.remove(index);
          onChanged();
        } else {
          windowsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder getWindowsBuilder(
          int index) {
        return getWindowsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder getWindowsOrBuilder(
          int index) {
        if (windowsBuilder_ == null) {
          return windows_.get(index);  } else {
          return windowsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> 
           getWindowsOrBuilderList() {
        if (windowsBuilder_ != null) {
          return windowsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(windows_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder addWindowsBuilder() {
        return getWindowsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder addWindowsBuilder(
          int index) {
        return getWindowsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.OverWindow windows = 3;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder> 
           getWindowsBuilderList() {
        return getWindowsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder> 
          getWindowsFieldBuilder() {
        if (windowsBuilder_ == null) {
          windowsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder>(
                  windows_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          windows_ = null;
        }
        return windowsBuilder_;
      }

      private boolean profileEnabled_ ;
      /**
       * <code>bool profile_enabled = 4;</code>
       * @return The profileEnabled.
       */
      @java.lang.Override
      public boolean getProfileEnabled() {
        return profileEnabled_;
      }
      /**
       * <code>bool profile_enabled = 4;</code>
       * @param value The profileEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setProfileEnabled(boolean value) {
        
        profileEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool profile_enabled = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearProfileEnabled() {
        
        profileEnabled_ = false;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> jobParameters_ =
        java.util.Collections.emptyList();
      private void ensureJobParametersIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          jobParameters_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter>(jobParameters_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> jobParametersBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> getJobParametersList() {
        if (jobParametersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(jobParameters_);
        } else {
          return jobParametersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public int getJobParametersCount() {
        if (jobParametersBuilder_ == null) {
          return jobParameters_.size();
        } else {
          return jobParametersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index) {
        if (jobParametersBuilder_ == null) {
          return jobParameters_.get(index);
        } else {
          return jobParametersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder setJobParameters(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
        if (jobParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJobParametersIsMutable();
          jobParameters_.set(index, value);
          onChanged();
        } else {
          jobParametersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder setJobParameters(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          jobParameters_.set(index, builderForValue.build());
          onChanged();
        } else {
          jobParametersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder addJobParameters(org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
        if (jobParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJobParametersIsMutable();
          jobParameters_.add(value);
          onChanged();
        } else {
          jobParametersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder addJobParameters(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
        if (jobParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJobParametersIsMutable();
          jobParameters_.add(index, value);
          onChanged();
        } else {
          jobParametersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder addJobParameters(
          org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          jobParameters_.add(builderForValue.build());
          onChanged();
        } else {
          jobParametersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder addJobParameters(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          jobParameters_.add(index, builderForValue.build());
          onChanged();
        } else {
          jobParametersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder addAllJobParameters(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> values) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, jobParameters_);
          onChanged();
        } else {
          jobParametersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder clearJobParameters() {
        if (jobParametersBuilder_ == null) {
          jobParameters_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          jobParametersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public Builder removeJobParameters(int index) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          jobParameters_.remove(index);
          onChanged();
        } else {
          jobParametersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder getJobParametersBuilder(
          int index) {
        return getJobParametersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
          int index) {
        if (jobParametersBuilder_ == null) {
          return jobParameters_.get(index);  } else {
          return jobParametersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
           getJobParametersOrBuilderList() {
        if (jobParametersBuilder_ != null) {
          return jobParametersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(jobParameters_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder addJobParametersBuilder() {
        return getJobParametersFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder addJobParametersBuilder(
          int index) {
        return getJobParametersFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 5;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder> 
           getJobParametersBuilderList() {
        return getJobParametersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
          getJobParametersFieldBuilder() {
        if (jobParametersBuilder_ == null) {
          jobParametersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder>(
                  jobParameters_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          jobParameters_ = null;
        }
        return jobParametersBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedFunctions)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedFunctions>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedFunctions>() {
      @java.lang.Override
      public UserDefinedFunctions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UserDefinedFunctions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedFunctions> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedFunctions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OverWindowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.OverWindow)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
     * @return The enum numeric value on the wire for windowType.
     */
    int getWindowTypeValue();
    /**
     * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
     * @return The windowType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType getWindowType();

    /**
     * <code>int64 lower_boundary = 2;</code>
     * @return The lowerBoundary.
     */
    long getLowerBoundary();

    /**
     * <code>int64 upper_boundary = 3;</code>
     * @return The upperBoundary.
     */
    long getUpperBoundary();
  }
  /**
   * <pre>
   * Used to describe the info of over window in pandas batch over window aggregation
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.OverWindow}
   */
  public static final class OverWindow extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.OverWindow)
      OverWindowOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OverWindow.newBuilder() to construct.
    private OverWindow(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OverWindow() {
      windowType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OverWindow();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.class, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.OverWindow.WindowType}
     */
    public enum WindowType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>RANGE_UNBOUNDED = 0;</code>
       */
      RANGE_UNBOUNDED(0),
      /**
       * <code>RANGE_UNBOUNDED_PRECEDING = 1;</code>
       */
      RANGE_UNBOUNDED_PRECEDING(1),
      /**
       * <code>RANGE_UNBOUNDED_FOLLOWING = 2;</code>
       */
      RANGE_UNBOUNDED_FOLLOWING(2),
      /**
       * <code>RANGE_SLIDING = 3;</code>
       */
      RANGE_SLIDING(3),
      /**
       * <code>ROW_UNBOUNDED = 4;</code>
       */
      ROW_UNBOUNDED(4),
      /**
       * <code>ROW_UNBOUNDED_PRECEDING = 5;</code>
       */
      ROW_UNBOUNDED_PRECEDING(5),
      /**
       * <code>ROW_UNBOUNDED_FOLLOWING = 6;</code>
       */
      ROW_UNBOUNDED_FOLLOWING(6),
      /**
       * <code>ROW_SLIDING = 7;</code>
       */
      ROW_SLIDING(7),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>RANGE_UNBOUNDED = 0;</code>
       */
      public static final int RANGE_UNBOUNDED_VALUE = 0;
      /**
       * <code>RANGE_UNBOUNDED_PRECEDING = 1;</code>
       */
      public static final int RANGE_UNBOUNDED_PRECEDING_VALUE = 1;
      /**
       * <code>RANGE_UNBOUNDED_FOLLOWING = 2;</code>
       */
      public static final int RANGE_UNBOUNDED_FOLLOWING_VALUE = 2;
      /**
       * <code>RANGE_SLIDING = 3;</code>
       */
      public static final int RANGE_SLIDING_VALUE = 3;
      /**
       * <code>ROW_UNBOUNDED = 4;</code>
       */
      public static final int ROW_UNBOUNDED_VALUE = 4;
      /**
       * <code>ROW_UNBOUNDED_PRECEDING = 5;</code>
       */
      public static final int ROW_UNBOUNDED_PRECEDING_VALUE = 5;
      /**
       * <code>ROW_UNBOUNDED_FOLLOWING = 6;</code>
       */
      public static final int ROW_UNBOUNDED_FOLLOWING_VALUE = 6;
      /**
       * <code>ROW_SLIDING = 7;</code>
       */
      public static final int ROW_SLIDING_VALUE = 7;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WindowType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static WindowType forNumber(int value) {
        switch (value) {
          case 0: return RANGE_UNBOUNDED;
          case 1: return RANGE_UNBOUNDED_PRECEDING;
          case 2: return RANGE_UNBOUNDED_FOLLOWING;
          case 3: return RANGE_SLIDING;
          case 4: return ROW_UNBOUNDED;
          case 5: return ROW_UNBOUNDED_PRECEDING;
          case 6: return ROW_UNBOUNDED_FOLLOWING;
          case 7: return ROW_SLIDING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WindowType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WindowType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WindowType>() {
              public WindowType findValueByNumber(int number) {
                return WindowType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDescriptor().getEnumTypes().get(0);
      }

      private static final WindowType[] VALUES = values();

      public static WindowType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private WindowType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.OverWindow.WindowType)
    }

    public static final int WINDOW_TYPE_FIELD_NUMBER = 1;
    private int windowType_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
     * @return The enum numeric value on the wire for windowType.
     */
    @java.lang.Override public int getWindowTypeValue() {
      return windowType_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
     * @return The windowType.
     */
    @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType getWindowType() {
      @SuppressWarnings("deprecation")
      org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType result = org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.valueOf(windowType_);
      return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.UNRECOGNIZED : result;
    }

    public static final int LOWER_BOUNDARY_FIELD_NUMBER = 2;
    private long lowerBoundary_;
    /**
     * <code>int64 lower_boundary = 2;</code>
     * @return The lowerBoundary.
     */
    @java.lang.Override
    public long getLowerBoundary() {
      return lowerBoundary_;
    }

    public static final int UPPER_BOUNDARY_FIELD_NUMBER = 3;
    private long upperBoundary_;
    /**
     * <code>int64 upper_boundary = 3;</code>
     * @return The upperBoundary.
     */
    @java.lang.Override
    public long getUpperBoundary() {
      return upperBoundary_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (windowType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.RANGE_UNBOUNDED.getNumber()) {
        output.writeEnum(1, windowType_);
      }
      if (lowerBoundary_ != 0L) {
        output.writeInt64(2, lowerBoundary_);
      }
      if (upperBoundary_ != 0L) {
        output.writeInt64(3, upperBoundary_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (windowType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.RANGE_UNBOUNDED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, windowType_);
      }
      if (lowerBoundary_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, lowerBoundary_);
      }
      if (upperBoundary_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, upperBoundary_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow other = (org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow) obj;

      if (windowType_ != other.windowType_) return false;
      if (getLowerBoundary()
          != other.getLowerBoundary()) return false;
      if (getUpperBoundary()
          != other.getUpperBoundary()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + WINDOW_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + windowType_;
      hash = (37 * hash) + LOWER_BOUNDARY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLowerBoundary());
      hash = (37 * hash) + UPPER_BOUNDARY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUpperBoundary());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Used to describe the info of over window in pandas batch over window aggregation
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.OverWindow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.OverWindow)
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindowOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.class, org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        windowType_ = 0;

        lowerBoundary_ = 0L;

        upperBoundary_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow result = new org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow(this);
        result.windowType_ = windowType_;
        result.lowerBoundary_ = lowerBoundary_;
        result.upperBoundary_ = upperBoundary_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.getDefaultInstance()) return this;
        if (other.windowType_ != 0) {
          setWindowTypeValue(other.getWindowTypeValue());
        }
        if (other.getLowerBoundary() != 0L) {
          setLowerBoundary(other.getLowerBoundary());
        }
        if (other.getUpperBoundary() != 0L) {
          setUpperBoundary(other.getUpperBoundary());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                windowType_ = input.readEnum();

                break;
              } // case 8
              case 16: {
                lowerBoundary_ = input.readInt64();

                break;
              } // case 16
              case 24: {
                upperBoundary_ = input.readInt64();

                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int windowType_ = 0;
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @return The enum numeric value on the wire for windowType.
       */
      @java.lang.Override public int getWindowTypeValue() {
        return windowType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @param value The enum numeric value on the wire for windowType to set.
       * @return This builder for chaining.
       */
      public Builder setWindowTypeValue(int value) {
        
        windowType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @return The windowType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType getWindowType() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType result = org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.valueOf(windowType_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @param value The windowType to set.
       * @return This builder for chaining.
       */
      public Builder setWindowType(org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow.WindowType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        windowType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.OverWindow.WindowType window_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowType() {
        
        windowType_ = 0;
        onChanged();
        return this;
      }

      private long lowerBoundary_ ;
      /**
       * <code>int64 lower_boundary = 2;</code>
       * @return The lowerBoundary.
       */
      @java.lang.Override
      public long getLowerBoundary() {
        return lowerBoundary_;
      }
      /**
       * <code>int64 lower_boundary = 2;</code>
       * @param value The lowerBoundary to set.
       * @return This builder for chaining.
       */
      public Builder setLowerBoundary(long value) {
        
        lowerBoundary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 lower_boundary = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLowerBoundary() {
        
        lowerBoundary_ = 0L;
        onChanged();
        return this;
      }

      private long upperBoundary_ ;
      /**
       * <code>int64 upper_boundary = 3;</code>
       * @return The upperBoundary.
       */
      @java.lang.Override
      public long getUpperBoundary() {
        return upperBoundary_;
      }
      /**
       * <code>int64 upper_boundary = 3;</code>
       * @param value The upperBoundary to set.
       * @return This builder for chaining.
       */
      public Builder setUpperBoundary(long value) {
        
        upperBoundary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 upper_boundary = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearUpperBoundary() {
        
        upperBoundary_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.OverWindow)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.OverWindow)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OverWindow>
        PARSER = new com.google.protobuf.AbstractParser<OverWindow>() {
      @java.lang.Override
      public OverWindow parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<OverWindow> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OverWindow> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.OverWindow getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedAggregateFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The serialized representation of the user-defined function
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> 
        getInputsList();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index);
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    int getInputsCount();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
        getInputsOrBuilderList();
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
        int index);

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> 
        getSpecsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getSpecs(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    int getSpecsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> 
        getSpecsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder getSpecsOrBuilder(
        int index);

    /**
     * <code>int32 filter_arg = 4;</code>
     * @return The filterArg.
     */
    int getFilterArg();

    /**
     * <code>bool distinct = 5;</code>
     * @return The distinct.
     */
    boolean getDistinct();

    /**
     * <pre>
     * Whether the UDF takes row as input instead of each columns of a row
     * </pre>
     *
     * <code>bool takes_row_as_input = 6;</code>
     * @return The takesRowAsInput.
     */
    boolean getTakesRowAsInput();
  }
  /**
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction}
   */
  public static final class UserDefinedAggregateFunction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
      UserDefinedAggregateFunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedAggregateFunction.newBuilder() to construct.
    private UserDefinedAggregateFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedAggregateFunction() {
      payload_ = com.google.protobuf.ByteString.EMPTY;
      inputs_ = java.util.Collections.emptyList();
      specs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedAggregateFunction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder.class);
    }

    public interface DataViewSpecOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <code>int32 field_index = 2;</code>
       * @return The fieldIndex.
       */
      int getFieldIndex();

      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       * @return Whether the listView field is set.
       */
      boolean hasListView();
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       * @return The listView.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getListView();
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder getListViewOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       * @return Whether the mapView field is set.
       */
      boolean hasMapView();
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       * @return The mapView.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getMapView();
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder getMapViewOrBuilder();

      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.DataViewCase getDataViewCase();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec}
     */
    public static final class DataViewSpec extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
        DataViewSpecOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use DataViewSpec.newBuilder() to construct.
      private DataViewSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private DataViewSpec() {
        name_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new DataViewSpec();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder.class);
      }

      public interface ListViewOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         * @return Whether the elementType field is set.
         */
        boolean hasElementType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         * @return The elementType.
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getElementType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getElementTypeOrBuilder();
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView}
       */
      public static final class ListView extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
          ListViewOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use ListView.newBuilder() to construct.
        private ListView(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private ListView() {
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new ListView();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder.class);
        }

        public static final int ELEMENT_TYPE_FIELD_NUMBER = 1;
        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType elementType_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         * @return Whether the elementType field is set.
         */
        @java.lang.Override
        public boolean hasElementType() {
          return elementType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         * @return The elementType.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getElementType() {
          return elementType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : elementType_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getElementTypeOrBuilder() {
          return getElementType();
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (elementType_ != null) {
            output.writeMessage(1, getElementType());
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (elementType_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(1, getElementType());
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView)) {
            return super.equals(obj);
          }
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) obj;

          if (hasElementType() != other.hasElementType()) return false;
          if (hasElementType()) {
            if (!getElementType()
                .equals(other.getElementType())) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasElementType()) {
            hash = (37 * hash) + ELEMENT_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getElementType().hashCode();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder.class);
          }

          // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            if (elementTypeBuilder_ == null) {
              elementType_ = null;
            } else {
              elementType_ = null;
              elementTypeBuilder_ = null;
            }
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getDefaultInstanceForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView build() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView buildPartial() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView(this);
            if (elementTypeBuilder_ == null) {
              result.elementType_ = elementType_;
            } else {
              result.elementType_ = elementTypeBuilder_.build();
            }
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) {
              return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView other) {
            if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance()) return this;
            if (other.hasElementType()) {
              mergeElementType(other.getElementType());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    input.readMessage(
                        getElementTypeFieldBuilder().getBuilder(),
                        extensionRegistry);

                    break;
                  } // case 10
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }

          private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType elementType_;
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> elementTypeBuilder_;
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           * @return Whether the elementType field is set.
           */
          public boolean hasElementType() {
            return elementTypeBuilder_ != null || elementType_ != null;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           * @return The elementType.
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getElementType() {
            if (elementTypeBuilder_ == null) {
              return elementType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : elementType_;
            } else {
              return elementTypeBuilder_.getMessage();
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public Builder setElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (elementTypeBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              elementType_ = value;
              onChanged();
            } else {
              elementTypeBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public Builder setElementType(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
            if (elementTypeBuilder_ == null) {
              elementType_ = builderForValue.build();
              onChanged();
            } else {
              elementTypeBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public Builder mergeElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (elementTypeBuilder_ == null) {
              if (elementType_ != null) {
                elementType_ =
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(elementType_).mergeFrom(value).buildPartial();
              } else {
                elementType_ = value;
              }
              onChanged();
            } else {
              elementTypeBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public Builder clearElementType() {
            if (elementTypeBuilder_ == null) {
              elementType_ = null;
              onChanged();
            } else {
              elementType_ = null;
              elementTypeBuilder_ = null;
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getElementTypeBuilder() {
            
            onChanged();
            return getElementTypeFieldBuilder().getBuilder();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getElementTypeOrBuilder() {
            if (elementTypeBuilder_ != null) {
              return elementTypeBuilder_.getMessageOrBuilder();
            } else {
              return elementType_ == null ?
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : elementType_;
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType element_type = 1;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
              getElementTypeFieldBuilder() {
            if (elementTypeBuilder_ == null) {
              elementTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                      getElementType(),
                      getParentForChildren(),
                      isClean());
              elementType_ = null;
            }
            return elementTypeBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
        }

        // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView)
        private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView();
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ListView>
            PARSER = new com.google.protobuf.AbstractParser<ListView>() {
          @java.lang.Override
          public ListView parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<ListView> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ListView> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface MapViewOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return Whether the keyType field is set.
         */
        boolean hasKeyType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return The keyType.
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder();

        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return Whether the valueType field is set.
         */
        boolean hasValueType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return The valueType.
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder();
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView}
       */
      public static final class MapView extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
          MapViewOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use MapView.newBuilder() to construct.
        private MapView(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private MapView() {
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new MapView();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder.class);
        }

        public static final int KEY_TYPE_FIELD_NUMBER = 1;
        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return Whether the keyType field is set.
         */
        @java.lang.Override
        public boolean hasKeyType() {
          return keyType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return The keyType.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
          return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
          return getKeyType();
        }

        public static final int VALUE_TYPE_FIELD_NUMBER = 2;
        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType valueType_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return Whether the valueType field is set.
         */
        @java.lang.Override
        public boolean hasValueType() {
          return valueType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return The valueType.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType() {
          return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder() {
          return getValueType();
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (keyType_ != null) {
            output.writeMessage(1, getKeyType());
          }
          if (valueType_ != null) {
            output.writeMessage(2, getValueType());
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (keyType_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(1, getKeyType());
          }
          if (valueType_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(2, getValueType());
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView)) {
            return super.equals(obj);
          }
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) obj;

          if (hasKeyType() != other.hasKeyType()) return false;
          if (hasKeyType()) {
            if (!getKeyType()
                .equals(other.getKeyType())) return false;
          }
          if (hasValueType() != other.hasValueType()) return false;
          if (hasValueType()) {
            if (!getValueType()
                .equals(other.getValueType())) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasKeyType()) {
            hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getKeyType().hashCode();
          }
          if (hasValueType()) {
            hash = (37 * hash) + VALUE_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getValueType().hashCode();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder.class);
          }

          // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            if (keyTypeBuilder_ == null) {
              keyType_ = null;
            } else {
              keyType_ = null;
              keyTypeBuilder_ = null;
            }
            if (valueTypeBuilder_ == null) {
              valueType_ = null;
            } else {
              valueType_ = null;
              valueTypeBuilder_ = null;
            }
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getDefaultInstanceForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView build() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView buildPartial() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView(this);
            if (keyTypeBuilder_ == null) {
              result.keyType_ = keyType_;
            } else {
              result.keyType_ = keyTypeBuilder_.build();
            }
            if (valueTypeBuilder_ == null) {
              result.valueType_ = valueType_;
            } else {
              result.valueType_ = valueTypeBuilder_.build();
            }
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) {
              return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView other) {
            if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance()) return this;
            if (other.hasKeyType()) {
              mergeKeyType(other.getKeyType());
            }
            if (other.hasValueType()) {
              mergeValueType(other.getValueType());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    input.readMessage(
                        getKeyTypeFieldBuilder().getBuilder(),
                        extensionRegistry);

                    break;
                  } // case 10
                  case 18: {
                    input.readMessage(
                        getValueTypeFieldBuilder().getBuilder(),
                        extensionRegistry);

                    break;
                  } // case 18
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }

          private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> keyTypeBuilder_;
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           * @return Whether the keyType field is set.
           */
          public boolean hasKeyType() {
            return keyTypeBuilder_ != null || keyType_ != null;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           * @return The keyType.
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
            if (keyTypeBuilder_ == null) {
              return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
            } else {
              return keyTypeBuilder_.getMessage();
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public Builder setKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (keyTypeBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              keyType_ = value;
              onChanged();
            } else {
              keyTypeBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public Builder setKeyType(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
            if (keyTypeBuilder_ == null) {
              keyType_ = builderForValue.build();
              onChanged();
            } else {
              keyTypeBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public Builder mergeKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (keyTypeBuilder_ == null) {
              if (keyType_ != null) {
                keyType_ =
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(keyType_).mergeFrom(value).buildPartial();
              } else {
                keyType_ = value;
              }
              onChanged();
            } else {
              keyTypeBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public Builder clearKeyType() {
            if (keyTypeBuilder_ == null) {
              keyType_ = null;
              onChanged();
            } else {
              keyType_ = null;
              keyTypeBuilder_ = null;
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getKeyTypeBuilder() {
            
            onChanged();
            return getKeyTypeFieldBuilder().getBuilder();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
            if (keyTypeBuilder_ != null) {
              return keyTypeBuilder_.getMessageOrBuilder();
            } else {
              return keyType_ == null ?
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
              getKeyTypeFieldBuilder() {
            if (keyTypeBuilder_ == null) {
              keyTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                      getKeyType(),
                      getParentForChildren(),
                      isClean());
              keyType_ = null;
            }
            return keyTypeBuilder_;
          }

          private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType valueType_;
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> valueTypeBuilder_;
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           * @return Whether the valueType field is set.
           */
          public boolean hasValueType() {
            return valueTypeBuilder_ != null || valueType_ != null;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           * @return The valueType.
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType() {
            if (valueTypeBuilder_ == null) {
              return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
            } else {
              return valueTypeBuilder_.getMessage();
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public Builder setValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (valueTypeBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              valueType_ = value;
              onChanged();
            } else {
              valueTypeBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public Builder setValueType(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
            if (valueTypeBuilder_ == null) {
              valueType_ = builderForValue.build();
              onChanged();
            } else {
              valueTypeBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public Builder mergeValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
            if (valueTypeBuilder_ == null) {
              if (valueType_ != null) {
                valueType_ =
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(valueType_).mergeFrom(value).buildPartial();
              } else {
                valueType_ = value;
              }
              onChanged();
            } else {
              valueTypeBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public Builder clearValueType() {
            if (valueTypeBuilder_ == null) {
              valueType_ = null;
              onChanged();
            } else {
              valueType_ = null;
              valueTypeBuilder_ = null;
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getValueTypeBuilder() {
            
            onChanged();
            return getValueTypeFieldBuilder().getBuilder();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder() {
            if (valueTypeBuilder_ != null) {
              return valueTypeBuilder_.getMessageOrBuilder();
            } else {
              return valueType_ == null ?
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
              getValueTypeFieldBuilder() {
            if (valueTypeBuilder_ == null) {
              valueTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                      getValueType(),
                      getParentForChildren(),
                      isClean());
              valueType_ = null;
            }
            return valueTypeBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
        }

        // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView)
        private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView();
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<MapView>
            PARSER = new com.google.protobuf.AbstractParser<MapView>() {
          @java.lang.Override
          public MapView parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<MapView> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MapView> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int dataViewCase_ = 0;
      private java.lang.Object dataView_;
      public enum DataViewCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        LIST_VIEW(3),
        MAP_VIEW(4),
        DATAVIEW_NOT_SET(0);
        private final int value;
        private DataViewCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static DataViewCase valueOf(int value) {
          return forNumber(value);
        }

        public static DataViewCase forNumber(int value) {
          switch (value) {
            case 3: return LIST_VIEW;
            case 4: return MAP_VIEW;
            case 0: return DATAVIEW_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public DataViewCase
      getDataViewCase() {
        return DataViewCase.forNumber(
            dataViewCase_);
      }

      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int FIELD_INDEX_FIELD_NUMBER = 2;
      private int fieldIndex_;
      /**
       * <code>int32 field_index = 2;</code>
       * @return The fieldIndex.
       */
      @java.lang.Override
      public int getFieldIndex() {
        return fieldIndex_;
      }

      public static final int LIST_VIEW_FIELD_NUMBER = 3;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       * @return Whether the listView field is set.
       */
      @java.lang.Override
      public boolean hasListView() {
        return dataViewCase_ == 3;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       * @return The listView.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getListView() {
        if (dataViewCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder getListViewOrBuilder() {
        if (dataViewCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
      }

      public static final int MAP_VIEW_FIELD_NUMBER = 4;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       * @return Whether the mapView field is set.
       */
      @java.lang.Override
      public boolean hasMapView() {
        return dataViewCase_ == 4;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       * @return The mapView.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getMapView() {
        if (dataViewCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder getMapViewOrBuilder() {
        if (dataViewCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (fieldIndex_ != 0) {
          output.writeInt32(2, fieldIndex_);
        }
        if (dataViewCase_ == 3) {
          output.writeMessage(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_);
        }
        if (dataViewCase_ == 4) {
          output.writeMessage(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (fieldIndex_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, fieldIndex_);
        }
        if (dataViewCase_ == 3) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_);
        }
        if (dataViewCase_ == 4) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec) obj;

        if (!getName()
            .equals(other.getName())) return false;
        if (getFieldIndex()
            != other.getFieldIndex()) return false;
        if (!getDataViewCase().equals(other.getDataViewCase())) return false;
        switch (dataViewCase_) {
          case 3:
            if (!getListView()
                .equals(other.getListView())) return false;
            break;
          case 4:
            if (!getMapView()
                .equals(other.getMapView())) return false;
            break;
          case 0:
          default:
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + FIELD_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getFieldIndex();
        switch (dataViewCase_) {
          case 3:
            hash = (37 * hash) + LIST_VIEW_FIELD_NUMBER;
            hash = (53 * hash) + getListView().hashCode();
            break;
          case 4:
            hash = (37 * hash) + MAP_VIEW_FIELD_NUMBER;
            hash = (53 * hash) + getMapView().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          name_ = "";

          fieldIndex_ = 0;

          if (listViewBuilder_ != null) {
            listViewBuilder_.clear();
          }
          if (mapViewBuilder_ != null) {
            mapViewBuilder_.clear();
          }
          dataViewCase_ = 0;
          dataView_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec(this);
          result.name_ = name_;
          result.fieldIndex_ = fieldIndex_;
          if (dataViewCase_ == 3) {
            if (listViewBuilder_ == null) {
              result.dataView_ = dataView_;
            } else {
              result.dataView_ = listViewBuilder_.build();
            }
          }
          if (dataViewCase_ == 4) {
            if (mapViewBuilder_ == null) {
              result.dataView_ = dataView_;
            } else {
              result.dataView_ = mapViewBuilder_.build();
            }
          }
          result.dataViewCase_ = dataViewCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            onChanged();
          }
          if (other.getFieldIndex() != 0) {
            setFieldIndex(other.getFieldIndex());
          }
          switch (other.getDataViewCase()) {
            case LIST_VIEW: {
              mergeListView(other.getListView());
              break;
            }
            case MAP_VIEW: {
              mergeMapView(other.getMapView());
              break;
            }
            case DATAVIEW_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  name_ = input.readStringRequireUtf8();

                  break;
                } // case 10
                case 16: {
                  fieldIndex_ = input.readInt32();

                  break;
                } // case 16
                case 26: {
                  input.readMessage(
                      getListViewFieldBuilder().getBuilder(),
                      extensionRegistry);
                  dataViewCase_ = 3;
                  break;
                } // case 26
                case 34: {
                  input.readMessage(
                      getMapViewFieldBuilder().getBuilder(),
                      extensionRegistry);
                  dataViewCase_ = 4;
                  break;
                } // case 34
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int dataViewCase_ = 0;
        private java.lang.Object dataView_;
        public DataViewCase
            getDataViewCase() {
          return DataViewCase.forNumber(
              dataViewCase_);
        }

        public Builder clearDataView() {
          dataViewCase_ = 0;
          dataView_ = null;
          onChanged();
          return this;
        }


        private java.lang.Object name_ = "";
        /**
         * <code>string name = 1;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          name_ = value;
          onChanged();
          return this;
        }

        private int fieldIndex_ ;
        /**
         * <code>int32 field_index = 2;</code>
         * @return The fieldIndex.
         */
        @java.lang.Override
        public int getFieldIndex() {
          return fieldIndex_;
        }
        /**
         * <code>int32 field_index = 2;</code>
         * @param value The fieldIndex to set.
         * @return This builder for chaining.
         */
        public Builder setFieldIndex(int value) {
          
          fieldIndex_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 field_index = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearFieldIndex() {
          
          fieldIndex_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder> listViewBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         * @return Whether the listView field is set.
         */
        @java.lang.Override
        public boolean hasListView() {
          return dataViewCase_ == 3;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         * @return The listView.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView getListView() {
          if (listViewBuilder_ == null) {
            if (dataViewCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
          } else {
            if (dataViewCase_ == 3) {
              return listViewBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public Builder setListView(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView value) {
          if (listViewBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dataView_ = value;
            onChanged();
          } else {
            listViewBuilder_.setMessage(value);
          }
          dataViewCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public Builder setListView(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder builderForValue) {
          if (listViewBuilder_ == null) {
            dataView_ = builderForValue.build();
            onChanged();
          } else {
            listViewBuilder_.setMessage(builderForValue.build());
          }
          dataViewCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public Builder mergeListView(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView value) {
          if (listViewBuilder_ == null) {
            if (dataViewCase_ == 3 &&
                dataView_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance()) {
              dataView_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_)
                  .mergeFrom(value).buildPartial();
            } else {
              dataView_ = value;
            }
            onChanged();
          } else {
            if (dataViewCase_ == 3) {
              listViewBuilder_.mergeFrom(value);
            } else {
              listViewBuilder_.setMessage(value);
            }
          }
          dataViewCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public Builder clearListView() {
          if (listViewBuilder_ == null) {
            if (dataViewCase_ == 3) {
              dataViewCase_ = 0;
              dataView_ = null;
              onChanged();
            }
          } else {
            if (dataViewCase_ == 3) {
              dataViewCase_ = 0;
              dataView_ = null;
            }
            listViewBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder getListViewBuilder() {
          return getListViewFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder getListViewOrBuilder() {
          if ((dataViewCase_ == 3) && (listViewBuilder_ != null)) {
            return listViewBuilder_.getMessageOrBuilder();
          } else {
            if (dataViewCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.ListView list_view = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder> 
            getListViewFieldBuilder() {
          if (listViewBuilder_ == null) {
            if (!(dataViewCase_ == 3)) {
              dataView_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.getDefaultInstance();
            }
            listViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListViewOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.ListView) dataView_,
                    getParentForChildren(),
                    isClean());
            dataView_ = null;
          }
          dataViewCase_ = 3;
          onChanged();;
          return listViewBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder> mapViewBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         * @return Whether the mapView field is set.
         */
        @java.lang.Override
        public boolean hasMapView() {
          return dataViewCase_ == 4;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         * @return The mapView.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView getMapView() {
          if (mapViewBuilder_ == null) {
            if (dataViewCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
          } else {
            if (dataViewCase_ == 4) {
              return mapViewBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public Builder setMapView(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView value) {
          if (mapViewBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dataView_ = value;
            onChanged();
          } else {
            mapViewBuilder_.setMessage(value);
          }
          dataViewCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public Builder setMapView(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder builderForValue) {
          if (mapViewBuilder_ == null) {
            dataView_ = builderForValue.build();
            onChanged();
          } else {
            mapViewBuilder_.setMessage(builderForValue.build());
          }
          dataViewCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public Builder mergeMapView(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView value) {
          if (mapViewBuilder_ == null) {
            if (dataViewCase_ == 4 &&
                dataView_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance()) {
              dataView_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_)
                  .mergeFrom(value).buildPartial();
            } else {
              dataView_ = value;
            }
            onChanged();
          } else {
            if (dataViewCase_ == 4) {
              mapViewBuilder_.mergeFrom(value);
            } else {
              mapViewBuilder_.setMessage(value);
            }
          }
          dataViewCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public Builder clearMapView() {
          if (mapViewBuilder_ == null) {
            if (dataViewCase_ == 4) {
              dataViewCase_ = 0;
              dataView_ = null;
              onChanged();
            }
          } else {
            if (dataViewCase_ == 4) {
              dataViewCase_ = 0;
              dataView_ = null;
            }
            mapViewBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder getMapViewBuilder() {
          return getMapViewFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder getMapViewOrBuilder() {
          if ((dataViewCase_ == 4) && (mapViewBuilder_ != null)) {
            return mapViewBuilder_.getMessageOrBuilder();
          } else {
            if (dataViewCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec.MapView map_view = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder> 
            getMapViewFieldBuilder() {
          if (mapViewBuilder_ == null) {
            if (!(dataViewCase_ == 4)) {
              dataView_ = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.getDefaultInstance();
            }
            mapViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapViewOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.MapView) dataView_,
                    getParentForChildren(),
                    isClean());
            dataView_ = null;
          }
          dataViewCase_ = 4;
          onChanged();;
          return mapViewBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<DataViewSpec>
          PARSER = new com.google.protobuf.AbstractParser<DataViewSpec>() {
        @java.lang.Override
        public DataViewSpec parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<DataViewSpec> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DataViewSpec> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int PAYLOAD_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString payload_;
    /**
     * <pre>
     * The serialized representation of the user-defined function
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int INPUTS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> inputs_;
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> getInputsList() {
      return inputs_;
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
        getInputsOrBuilderList() {
      return inputs_;
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public int getInputsCount() {
      return inputs_.size();
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index) {
      return inputs_.get(index);
    }
    /**
     * <pre>
     * The input arguments of the user-defined function, it could be one of the following:
     * 1. A column from the input row
     * 2. The result of another user-defined function
     * 3. The constant value of the column
     * </pre>
     *
     * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
        int index) {
      return inputs_.get(index);
    }

    public static final int SPECS_FIELD_NUMBER = 3;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> specs_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> getSpecsList() {
      return specs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> 
        getSpecsOrBuilderList() {
      return specs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    @java.lang.Override
    public int getSpecsCount() {
      return specs_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getSpecs(int index) {
      return specs_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder getSpecsOrBuilder(
        int index) {
      return specs_.get(index);
    }

    public static final int FILTER_ARG_FIELD_NUMBER = 4;
    private int filterArg_;
    /**
     * <code>int32 filter_arg = 4;</code>
     * @return The filterArg.
     */
    @java.lang.Override
    public int getFilterArg() {
      return filterArg_;
    }

    public static final int DISTINCT_FIELD_NUMBER = 5;
    private boolean distinct_;
    /**
     * <code>bool distinct = 5;</code>
     * @return The distinct.
     */
    @java.lang.Override
    public boolean getDistinct() {
      return distinct_;
    }

    public static final int TAKES_ROW_AS_INPUT_FIELD_NUMBER = 6;
    private boolean takesRowAsInput_;
    /**
     * <pre>
     * Whether the UDF takes row as input instead of each columns of a row
     * </pre>
     *
     * <code>bool takes_row_as_input = 6;</code>
     * @return The takesRowAsInput.
     */
    @java.lang.Override
    public boolean getTakesRowAsInput() {
      return takesRowAsInput_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!payload_.isEmpty()) {
        output.writeBytes(1, payload_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        output.writeMessage(2, inputs_.get(i));
      }
      for (int i = 0; i < specs_.size(); i++) {
        output.writeMessage(3, specs_.get(i));
      }
      if (filterArg_ != 0) {
        output.writeInt32(4, filterArg_);
      }
      if (distinct_ != false) {
        output.writeBool(5, distinct_);
      }
      if (takesRowAsInput_ != false) {
        output.writeBool(6, takesRowAsInput_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, payload_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, inputs_.get(i));
      }
      for (int i = 0; i < specs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, specs_.get(i));
      }
      if (filterArg_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, filterArg_);
      }
      if (distinct_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, distinct_);
      }
      if (takesRowAsInput_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, takesRowAsInput_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction) obj;

      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (!getInputsList()
          .equals(other.getInputsList())) return false;
      if (!getSpecsList()
          .equals(other.getSpecsList())) return false;
      if (getFilterArg()
          != other.getFilterArg()) return false;
      if (getDistinct()
          != other.getDistinct()) return false;
      if (getTakesRowAsInput()
          != other.getTakesRowAsInput()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      if (getInputsCount() > 0) {
        hash = (37 * hash) + INPUTS_FIELD_NUMBER;
        hash = (53 * hash) + getInputsList().hashCode();
      }
      if (getSpecsCount() > 0) {
        hash = (37 * hash) + SPECS_FIELD_NUMBER;
        hash = (53 * hash) + getSpecsList().hashCode();
      }
      hash = (37 * hash) + FILTER_ARG_FIELD_NUMBER;
      hash = (53 * hash) + getFilterArg();
      hash = (37 * hash) + DISTINCT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDistinct());
      hash = (37 * hash) + TAKES_ROW_AS_INPUT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTakesRowAsInput());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        payload_ = com.google.protobuf.ByteString.EMPTY;

        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
        } else {
          inputs_ = null;
          inputsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (specsBuilder_ == null) {
          specs_ = java.util.Collections.emptyList();
        } else {
          specs_ = null;
          specsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        filterArg_ = 0;

        distinct_ = false;

        takesRowAsInput_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction(this);
        int from_bitField0_ = bitField0_;
        result.payload_ = payload_;
        if (inputsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            inputs_ = java.util.Collections.unmodifiableList(inputs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.inputs_ = inputs_;
        } else {
          result.inputs_ = inputsBuilder_.build();
        }
        if (specsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            specs_ = java.util.Collections.unmodifiableList(specs_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.specs_ = specs_;
        } else {
          result.specs_ = specsBuilder_.build();
        }
        result.filterArg_ = filterArg_;
        result.distinct_ = distinct_;
        result.takesRowAsInput_ = takesRowAsInput_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.getDefaultInstance()) return this;
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        if (inputsBuilder_ == null) {
          if (!other.inputs_.isEmpty()) {
            if (inputs_.isEmpty()) {
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInputsIsMutable();
              inputs_.addAll(other.inputs_);
            }
            onChanged();
          }
        } else {
          if (!other.inputs_.isEmpty()) {
            if (inputsBuilder_.isEmpty()) {
              inputsBuilder_.dispose();
              inputsBuilder_ = null;
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              inputsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInputsFieldBuilder() : null;
            } else {
              inputsBuilder_.addAllMessages(other.inputs_);
            }
          }
        }
        if (specsBuilder_ == null) {
          if (!other.specs_.isEmpty()) {
            if (specs_.isEmpty()) {
              specs_ = other.specs_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSpecsIsMutable();
              specs_.addAll(other.specs_);
            }
            onChanged();
          }
        } else {
          if (!other.specs_.isEmpty()) {
            if (specsBuilder_.isEmpty()) {
              specsBuilder_.dispose();
              specsBuilder_ = null;
              specs_ = other.specs_;
              bitField0_ = (bitField0_ & ~0x00000002);
              specsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSpecsFieldBuilder() : null;
            } else {
              specsBuilder_.addAllMessages(other.specs_);
            }
          }
        }
        if (other.getFilterArg() != 0) {
          setFilterArg(other.getFilterArg());
        }
        if (other.getDistinct() != false) {
          setDistinct(other.getDistinct());
        }
        if (other.getTakesRowAsInput() != false) {
          setTakesRowAsInput(other.getTakesRowAsInput());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                payload_ = input.readBytes();

                break;
              } // case 10
              case 18: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Input m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.Input.parser(),
                        extensionRegistry);
                if (inputsBuilder_ == null) {
                  ensureInputsIsMutable();
                  inputs_.add(m);
                } else {
                  inputsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.parser(),
                        extensionRegistry);
                if (specsBuilder_ == null) {
                  ensureSpecsIsMutable();
                  specs_.add(m);
                } else {
                  specsBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 32: {
                filterArg_ = input.readInt32();

                break;
              } // case 32
              case 40: {
                distinct_ = input.readBool();

                break;
              } // case 40
              case 48: {
                takesRowAsInput_ = input.readBool();

                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @return The payload.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The serialized representation of the user-defined function
       * </pre>
       *
       * <code>bytes payload = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> inputs_ =
        java.util.Collections.emptyList();
      private void ensureInputsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          inputs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Input>(inputs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> inputsBuilder_;

      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input> getInputsList() {
        if (inputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputs_);
        } else {
          return inputsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public int getInputsCount() {
        if (inputsBuilder_ == null) {
          return inputs_.size();
        } else {
          return inputsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input getInputs(int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);
        } else {
          return inputsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder setInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.set(index, value);
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder setInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(index, value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addInputs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder addAllInputs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Input> values) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inputs_);
          onChanged();
        } else {
          inputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder clearInputs() {
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          inputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public Builder removeInputs(int index) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.remove(index);
          onChanged();
        } else {
          inputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder getInputsBuilder(
          int index) {
        return getInputsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder getInputsOrBuilder(
          int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);  } else {
          return inputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
           getInputsOrBuilderList() {
        if (inputsBuilder_ != null) {
          return inputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputs_);
        }
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder addInputsBuilder() {
        return getInputsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance());
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder addInputsBuilder(
          int index) {
        return getInputsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.getDefaultInstance());
      }
      /**
       * <pre>
       * The input arguments of the user-defined function, it could be one of the following:
       * 1. A column from the input row
       * 2. The result of another user-defined function
       * 3. The constant value of the column
       * </pre>
       *
       * <code>repeated .org.apache.flink.fn_execution.v1.Input inputs = 2;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder> 
           getInputsBuilderList() {
        return getInputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder> 
          getInputsFieldBuilder() {
        if (inputsBuilder_ == null) {
          inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Input, org.apache.flink.fnexecution.v1.FlinkFnApi.Input.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.InputOrBuilder>(
                  inputs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          inputs_ = null;
        }
        return inputsBuilder_;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> specs_ =
        java.util.Collections.emptyList();
      private void ensureSpecsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          specs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec>(specs_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> specsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> getSpecsList() {
        if (specsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(specs_);
        } else {
          return specsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public int getSpecsCount() {
        if (specsBuilder_ == null) {
          return specs_.size();
        } else {
          return specsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec getSpecs(int index) {
        if (specsBuilder_ == null) {
          return specs_.get(index);
        } else {
          return specsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder setSpecs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec value) {
        if (specsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpecsIsMutable();
          specs_.set(index, value);
          onChanged();
        } else {
          specsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder setSpecs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder builderForValue) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          specs_.set(index, builderForValue.build());
          onChanged();
        } else {
          specsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addSpecs(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec value) {
        if (specsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpecsIsMutable();
          specs_.add(value);
          onChanged();
        } else {
          specsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addSpecs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec value) {
        if (specsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpecsIsMutable();
          specs_.add(index, value);
          onChanged();
        } else {
          specsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addSpecs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder builderForValue) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          specs_.add(builderForValue.build());
          onChanged();
        } else {
          specsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addSpecs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder builderForValue) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          specs_.add(index, builderForValue.build());
          onChanged();
        } else {
          specsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder addAllSpecs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec> values) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, specs_);
          onChanged();
        } else {
          specsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder clearSpecs() {
        if (specsBuilder_ == null) {
          specs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          specsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public Builder removeSpecs(int index) {
        if (specsBuilder_ == null) {
          ensureSpecsIsMutable();
          specs_.remove(index);
          onChanged();
        } else {
          specsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder getSpecsBuilder(
          int index) {
        return getSpecsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder getSpecsOrBuilder(
          int index) {
        if (specsBuilder_ == null) {
          return specs_.get(index);  } else {
          return specsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> 
           getSpecsOrBuilderList() {
        if (specsBuilder_ != null) {
          return specsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(specs_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder addSpecsBuilder() {
        return getSpecsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder addSpecsBuilder(
          int index) {
        return getSpecsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction.DataViewSpec specs = 3;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder> 
           getSpecsBuilderList() {
        return getSpecsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder> 
          getSpecsFieldBuilder() {
        if (specsBuilder_ == null) {
          specsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpec.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.DataViewSpecOrBuilder>(
                  specs_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          specs_ = null;
        }
        return specsBuilder_;
      }

      private int filterArg_ ;
      /**
       * <code>int32 filter_arg = 4;</code>
       * @return The filterArg.
       */
      @java.lang.Override
      public int getFilterArg() {
        return filterArg_;
      }
      /**
       * <code>int32 filter_arg = 4;</code>
       * @param value The filterArg to set.
       * @return This builder for chaining.
       */
      public Builder setFilterArg(int value) {
        
        filterArg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 filter_arg = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFilterArg() {
        
        filterArg_ = 0;
        onChanged();
        return this;
      }

      private boolean distinct_ ;
      /**
       * <code>bool distinct = 5;</code>
       * @return The distinct.
       */
      @java.lang.Override
      public boolean getDistinct() {
        return distinct_;
      }
      /**
       * <code>bool distinct = 5;</code>
       * @param value The distinct to set.
       * @return This builder for chaining.
       */
      public Builder setDistinct(boolean value) {
        
        distinct_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool distinct = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDistinct() {
        
        distinct_ = false;
        onChanged();
        return this;
      }

      private boolean takesRowAsInput_ ;
      /**
       * <pre>
       * Whether the UDF takes row as input instead of each columns of a row
       * </pre>
       *
       * <code>bool takes_row_as_input = 6;</code>
       * @return The takesRowAsInput.
       */
      @java.lang.Override
      public boolean getTakesRowAsInput() {
        return takesRowAsInput_;
      }
      /**
       * <pre>
       * Whether the UDF takes row as input instead of each columns of a row
       * </pre>
       *
       * <code>bool takes_row_as_input = 6;</code>
       * @param value The takesRowAsInput to set.
       * @return This builder for chaining.
       */
      public Builder setTakesRowAsInput(boolean value) {
        
        takesRowAsInput_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether the UDF takes row as input instead of each columns of a row
       * </pre>
       *
       * <code>bool takes_row_as_input = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTakesRowAsInput() {
        
        takesRowAsInput_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedAggregateFunction>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedAggregateFunction>() {
      @java.lang.Override
      public UserDefinedAggregateFunction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UserDefinedAggregateFunction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedAggregateFunction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GroupWindowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.GroupWindow)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
     * @return The enum numeric value on the wire for windowType.
     */
    int getWindowTypeValue();
    /**
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
     * @return The windowType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType getWindowType();

    /**
     * <code>bool is_time_window = 2;</code>
     * @return The isTimeWindow.
     */
    boolean getIsTimeWindow();

    /**
     * <code>int64 window_slide = 3;</code>
     * @return The windowSlide.
     */
    long getWindowSlide();

    /**
     * <code>int64 window_size = 4;</code>
     * @return The windowSize.
     */
    long getWindowSize();

    /**
     * <code>int64 window_gap = 5;</code>
     * @return The windowGap.
     */
    long getWindowGap();

    /**
     * <code>bool is_row_time = 6;</code>
     * @return The isRowTime.
     */
    boolean getIsRowTime();

    /**
     * <code>int32 time_field_index = 7;</code>
     * @return The timeFieldIndex.
     */
    int getTimeFieldIndex();

    /**
     * <code>int64 allowedLateness = 8;</code>
     * @return The allowedLateness.
     */
    long getAllowedLateness();

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @return A list containing the namedProperties.
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty> getNamedPropertiesList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @return The count of namedProperties.
     */
    int getNamedPropertiesCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @param index The index of the element to return.
     * @return The namedProperties at the given index.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty getNamedProperties(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @return A list containing the enum numeric values on the wire for namedProperties.
     */
    java.util.List<java.lang.Integer>
    getNamedPropertiesValueList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of namedProperties at the given index.
     */
    int getNamedPropertiesValue(int index);

    /**
     * <code>string shift_timezone = 10;</code>
     * @return The shiftTimezone.
     */
    java.lang.String getShiftTimezone();
    /**
     * <code>string shift_timezone = 10;</code>
     * @return The bytes for shiftTimezone.
     */
    com.google.protobuf.ByteString
        getShiftTimezoneBytes();
  }
  /**
   * Protobuf type {@code org.apache.flink.fn_execution.v1.GroupWindow}
   */
  public static final class GroupWindow extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.GroupWindow)
      GroupWindowOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GroupWindow.newBuilder() to construct.
    private GroupWindow(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GroupWindow() {
      windowType_ = 0;
      namedProperties_ = java.util.Collections.emptyList();
      shiftTimezone_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GroupWindow();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_GroupWindow_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_GroupWindow_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.class, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.GroupWindow.WindowType}
     */
    public enum WindowType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TUMBLING_GROUP_WINDOW = 0;</code>
       */
      TUMBLING_GROUP_WINDOW(0),
      /**
       * <code>SLIDING_GROUP_WINDOW = 1;</code>
       */
      SLIDING_GROUP_WINDOW(1),
      /**
       * <code>SESSION_GROUP_WINDOW = 2;</code>
       */
      SESSION_GROUP_WINDOW(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>TUMBLING_GROUP_WINDOW = 0;</code>
       */
      public static final int TUMBLING_GROUP_WINDOW_VALUE = 0;
      /**
       * <code>SLIDING_GROUP_WINDOW = 1;</code>
       */
      public static final int SLIDING_GROUP_WINDOW_VALUE = 1;
      /**
       * <code>SESSION_GROUP_WINDOW = 2;</code>
       */
      public static final int SESSION_GROUP_WINDOW_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WindowType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static WindowType forNumber(int value) {
        switch (value) {
          case 0: return TUMBLING_GROUP_WINDOW;
          case 1: return SLIDING_GROUP_WINDOW;
          case 2: return SESSION_GROUP_WINDOW;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WindowType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WindowType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WindowType>() {
              public WindowType findValueByNumber(int number) {
                return WindowType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.getDescriptor().getEnumTypes().get(0);
      }

      private static final WindowType[] VALUES = values();

      public static WindowType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private WindowType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.GroupWindow.WindowType)
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty}
     */
    public enum WindowProperty
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>WINDOW_START = 0;</code>
       */
      WINDOW_START(0),
      /**
       * <code>WINDOW_END = 1;</code>
       */
      WINDOW_END(1),
      /**
       * <code>ROW_TIME_ATTRIBUTE = 2;</code>
       */
      ROW_TIME_ATTRIBUTE(2),
      /**
       * <code>PROC_TIME_ATTRIBUTE = 3;</code>
       */
      PROC_TIME_ATTRIBUTE(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>WINDOW_START = 0;</code>
       */
      public static final int WINDOW_START_VALUE = 0;
      /**
       * <code>WINDOW_END = 1;</code>
       */
      public static final int WINDOW_END_VALUE = 1;
      /**
       * <code>ROW_TIME_ATTRIBUTE = 2;</code>
       */
      public static final int ROW_TIME_ATTRIBUTE_VALUE = 2;
      /**
       * <code>PROC_TIME_ATTRIBUTE = 3;</code>
       */
      public static final int PROC_TIME_ATTRIBUTE_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WindowProperty valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static WindowProperty forNumber(int value) {
        switch (value) {
          case 0: return WINDOW_START;
          case 1: return WINDOW_END;
          case 2: return ROW_TIME_ATTRIBUTE;
          case 3: return PROC_TIME_ATTRIBUTE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WindowProperty>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WindowProperty> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WindowProperty>() {
              public WindowProperty findValueByNumber(int number) {
                return WindowProperty.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.getDescriptor().getEnumTypes().get(1);
      }

      private static final WindowProperty[] VALUES = values();

      public static WindowProperty valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private WindowProperty(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty)
    }

    public static final int WINDOW_TYPE_FIELD_NUMBER = 1;
    private int windowType_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
     * @return The enum numeric value on the wire for windowType.
     */
    @java.lang.Override public int getWindowTypeValue() {
      return windowType_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
     * @return The windowType.
     */
    @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType getWindowType() {
      @SuppressWarnings("deprecation")
      org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType result = org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType.valueOf(windowType_);
      return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType.UNRECOGNIZED : result;
    }

    public static final int IS_TIME_WINDOW_FIELD_NUMBER = 2;
    private boolean isTimeWindow_;
    /**
     * <code>bool is_time_window = 2;</code>
     * @return The isTimeWindow.
     */
    @java.lang.Override
    public boolean getIsTimeWindow() {
      return isTimeWindow_;
    }

    public static final int WINDOW_SLIDE_FIELD_NUMBER = 3;
    private long windowSlide_;
    /**
     * <code>int64 window_slide = 3;</code>
     * @return The windowSlide.
     */
    @java.lang.Override
    public long getWindowSlide() {
      return windowSlide_;
    }

    public static final int WINDOW_SIZE_FIELD_NUMBER = 4;
    private long windowSize_;
    /**
     * <code>int64 window_size = 4;</code>
     * @return The windowSize.
     */
    @java.lang.Override
    public long getWindowSize() {
      return windowSize_;
    }

    public static final int WINDOW_GAP_FIELD_NUMBER = 5;
    private long windowGap_;
    /**
     * <code>int64 window_gap = 5;</code>
     * @return The windowGap.
     */
    @java.lang.Override
    public long getWindowGap() {
      return windowGap_;
    }

    public static final int IS_ROW_TIME_FIELD_NUMBER = 6;
    private boolean isRowTime_;
    /**
     * <code>bool is_row_time = 6;</code>
     * @return The isRowTime.
     */
    @java.lang.Override
    public boolean getIsRowTime() {
      return isRowTime_;
    }

    public static final int TIME_FIELD_INDEX_FIELD_NUMBER = 7;
    private int timeFieldIndex_;
    /**
     * <code>int32 time_field_index = 7;</code>
     * @return The timeFieldIndex.
     */
    @java.lang.Override
    public int getTimeFieldIndex() {
      return timeFieldIndex_;
    }

    public static final int ALLOWEDLATENESS_FIELD_NUMBER = 8;
    private long allowedLateness_;
    /**
     * <code>int64 allowedLateness = 8;</code>
     * @return The allowedLateness.
     */
    @java.lang.Override
    public long getAllowedLateness() {
      return allowedLateness_;
    }

    public static final int NAMEDPROPERTIES_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> namedProperties_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty> namedProperties_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty>() {
              public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty result = org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty.valueOf(from);
                return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @return A list containing the namedProperties.
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty> getNamedPropertiesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty>(namedProperties_, namedProperties_converter_);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @return The count of namedProperties.
     */
    @java.lang.Override
    public int getNamedPropertiesCount() {
      return namedProperties_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @param index The index of the element to return.
     * @return The namedProperties at the given index.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty getNamedProperties(int index) {
      return namedProperties_converter_.convert(namedProperties_.get(index));
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @return A list containing the enum numeric values on the wire for namedProperties.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getNamedPropertiesValueList() {
      return namedProperties_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of namedProperties at the given index.
     */
    @java.lang.Override
    public int getNamedPropertiesValue(int index) {
      return namedProperties_.get(index);
    }
    private int namedPropertiesMemoizedSerializedSize;

    public static final int SHIFT_TIMEZONE_FIELD_NUMBER = 10;
    private volatile java.lang.Object shiftTimezone_;
    /**
     * <code>string shift_timezone = 10;</code>
     * @return The shiftTimezone.
     */
    @java.lang.Override
    public java.lang.String getShiftTimezone() {
      java.lang.Object ref = shiftTimezone_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shiftTimezone_ = s;
        return s;
      }
    }
    /**
     * <code>string shift_timezone = 10;</code>
     * @return The bytes for shiftTimezone.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getShiftTimezoneBytes() {
      java.lang.Object ref = shiftTimezone_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shiftTimezone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (windowType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType.TUMBLING_GROUP_WINDOW.getNumber()) {
        output.writeEnum(1, windowType_);
      }
      if (isTimeWindow_ != false) {
        output.writeBool(2, isTimeWindow_);
      }
      if (windowSlide_ != 0L) {
        output.writeInt64(3, windowSlide_);
      }
      if (windowSize_ != 0L) {
        output.writeInt64(4, windowSize_);
      }
      if (windowGap_ != 0L) {
        output.writeInt64(5, windowGap_);
      }
      if (isRowTime_ != false) {
        output.writeBool(6, isRowTime_);
      }
      if (timeFieldIndex_ != 0) {
        output.writeInt32(7, timeFieldIndex_);
      }
      if (allowedLateness_ != 0L) {
        output.writeInt64(8, allowedLateness_);
      }
      if (getNamedPropertiesList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(namedPropertiesMemoizedSerializedSize);
      }
      for (int i = 0; i < namedProperties_.size(); i++) {
        output.writeEnumNoTag(namedProperties_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shiftTimezone_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, shiftTimezone_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (windowType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType.TUMBLING_GROUP_WINDOW.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, windowType_);
      }
      if (isTimeWindow_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isTimeWindow_);
      }
      if (windowSlide_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, windowSlide_);
      }
      if (windowSize_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, windowSize_);
      }
      if (windowGap_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, windowGap_);
      }
      if (isRowTime_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, isRowTime_);
      }
      if (timeFieldIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, timeFieldIndex_);
      }
      if (allowedLateness_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, allowedLateness_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < namedProperties_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(namedProperties_.get(i));
        }
        size += dataSize;
        if (!getNamedPropertiesList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }namedPropertiesMemoizedSerializedSize = dataSize;
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shiftTimezone_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, shiftTimezone_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow other = (org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow) obj;

      if (windowType_ != other.windowType_) return false;
      if (getIsTimeWindow()
          != other.getIsTimeWindow()) return false;
      if (getWindowSlide()
          != other.getWindowSlide()) return false;
      if (getWindowSize()
          != other.getWindowSize()) return false;
      if (getWindowGap()
          != other.getWindowGap()) return false;
      if (getIsRowTime()
          != other.getIsRowTime()) return false;
      if (getTimeFieldIndex()
          != other.getTimeFieldIndex()) return false;
      if (getAllowedLateness()
          != other.getAllowedLateness()) return false;
      if (!namedProperties_.equals(other.namedProperties_)) return false;
      if (!getShiftTimezone()
          .equals(other.getShiftTimezone())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + WINDOW_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + windowType_;
      hash = (37 * hash) + IS_TIME_WINDOW_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsTimeWindow());
      hash = (37 * hash) + WINDOW_SLIDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getWindowSlide());
      hash = (37 * hash) + WINDOW_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getWindowSize());
      hash = (37 * hash) + WINDOW_GAP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getWindowGap());
      hash = (37 * hash) + IS_ROW_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsRowTime());
      hash = (37 * hash) + TIME_FIELD_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getTimeFieldIndex();
      hash = (37 * hash) + ALLOWEDLATENESS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAllowedLateness());
      if (getNamedPropertiesCount() > 0) {
        hash = (37 * hash) + NAMEDPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + namedProperties_.hashCode();
      }
      hash = (37 * hash) + SHIFT_TIMEZONE_FIELD_NUMBER;
      hash = (53 * hash) + getShiftTimezone().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.GroupWindow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.GroupWindow)
        org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindowOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_GroupWindow_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_GroupWindow_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.class, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        windowType_ = 0;

        isTimeWindow_ = false;

        windowSlide_ = 0L;

        windowSize_ = 0L;

        windowGap_ = 0L;

        isRowTime_ = false;

        timeFieldIndex_ = 0;

        allowedLateness_ = 0L;

        namedProperties_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        shiftTimezone_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_GroupWindow_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow result = new org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow(this);
        int from_bitField0_ = bitField0_;
        result.windowType_ = windowType_;
        result.isTimeWindow_ = isTimeWindow_;
        result.windowSlide_ = windowSlide_;
        result.windowSize_ = windowSize_;
        result.windowGap_ = windowGap_;
        result.isRowTime_ = isRowTime_;
        result.timeFieldIndex_ = timeFieldIndex_;
        result.allowedLateness_ = allowedLateness_;
        if (((bitField0_ & 0x00000001) != 0)) {
          namedProperties_ = java.util.Collections.unmodifiableList(namedProperties_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.namedProperties_ = namedProperties_;
        result.shiftTimezone_ = shiftTimezone_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.getDefaultInstance()) return this;
        if (other.windowType_ != 0) {
          setWindowTypeValue(other.getWindowTypeValue());
        }
        if (other.getIsTimeWindow() != false) {
          setIsTimeWindow(other.getIsTimeWindow());
        }
        if (other.getWindowSlide() != 0L) {
          setWindowSlide(other.getWindowSlide());
        }
        if (other.getWindowSize() != 0L) {
          setWindowSize(other.getWindowSize());
        }
        if (other.getWindowGap() != 0L) {
          setWindowGap(other.getWindowGap());
        }
        if (other.getIsRowTime() != false) {
          setIsRowTime(other.getIsRowTime());
        }
        if (other.getTimeFieldIndex() != 0) {
          setTimeFieldIndex(other.getTimeFieldIndex());
        }
        if (other.getAllowedLateness() != 0L) {
          setAllowedLateness(other.getAllowedLateness());
        }
        if (!other.namedProperties_.isEmpty()) {
          if (namedProperties_.isEmpty()) {
            namedProperties_ = other.namedProperties_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureNamedPropertiesIsMutable();
            namedProperties_.addAll(other.namedProperties_);
          }
          onChanged();
        }
        if (!other.getShiftTimezone().isEmpty()) {
          shiftTimezone_ = other.shiftTimezone_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                windowType_ = input.readEnum();

                break;
              } // case 8
              case 16: {
                isTimeWindow_ = input.readBool();

                break;
              } // case 16
              case 24: {
                windowSlide_ = input.readInt64();

                break;
              } // case 24
              case 32: {
                windowSize_ = input.readInt64();

                break;
              } // case 32
              case 40: {
                windowGap_ = input.readInt64();

                break;
              } // case 40
              case 48: {
                isRowTime_ = input.readBool();

                break;
              } // case 48
              case 56: {
                timeFieldIndex_ = input.readInt32();

                break;
              } // case 56
              case 64: {
                allowedLateness_ = input.readInt64();

                break;
              } // case 64
              case 72: {
                int tmpRaw = input.readEnum();
                ensureNamedPropertiesIsMutable();
                namedProperties_.add(tmpRaw);
                break;
              } // case 72
              case 74: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ensureNamedPropertiesIsMutable();
                  namedProperties_.add(tmpRaw);
                }
                input.popLimit(oldLimit);
                break;
              } // case 74
              case 82: {
                shiftTimezone_ = input.readStringRequireUtf8();

                break;
              } // case 82
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int windowType_ = 0;
      /**
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
       * @return The enum numeric value on the wire for windowType.
       */
      @java.lang.Override public int getWindowTypeValue() {
        return windowType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
       * @param value The enum numeric value on the wire for windowType to set.
       * @return This builder for chaining.
       */
      public Builder setWindowTypeValue(int value) {
        
        windowType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
       * @return The windowType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType getWindowType() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType result = org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType.valueOf(windowType_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
       * @param value The windowType to set.
       * @return This builder for chaining.
       */
      public Builder setWindowType(org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        windowType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow.WindowType window_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowType() {
        
        windowType_ = 0;
        onChanged();
        return this;
      }

      private boolean isTimeWindow_ ;
      /**
       * <code>bool is_time_window = 2;</code>
       * @return The isTimeWindow.
       */
      @java.lang.Override
      public boolean getIsTimeWindow() {
        return isTimeWindow_;
      }
      /**
       * <code>bool is_time_window = 2;</code>
       * @param value The isTimeWindow to set.
       * @return This builder for chaining.
       */
      public Builder setIsTimeWindow(boolean value) {
        
        isTimeWindow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool is_time_window = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsTimeWindow() {
        
        isTimeWindow_ = false;
        onChanged();
        return this;
      }

      private long windowSlide_ ;
      /**
       * <code>int64 window_slide = 3;</code>
       * @return The windowSlide.
       */
      @java.lang.Override
      public long getWindowSlide() {
        return windowSlide_;
      }
      /**
       * <code>int64 window_slide = 3;</code>
       * @param value The windowSlide to set.
       * @return This builder for chaining.
       */
      public Builder setWindowSlide(long value) {
        
        windowSlide_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 window_slide = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowSlide() {
        
        windowSlide_ = 0L;
        onChanged();
        return this;
      }

      private long windowSize_ ;
      /**
       * <code>int64 window_size = 4;</code>
       * @return The windowSize.
       */
      @java.lang.Override
      public long getWindowSize() {
        return windowSize_;
      }
      /**
       * <code>int64 window_size = 4;</code>
       * @param value The windowSize to set.
       * @return This builder for chaining.
       */
      public Builder setWindowSize(long value) {
        
        windowSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 window_size = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowSize() {
        
        windowSize_ = 0L;
        onChanged();
        return this;
      }

      private long windowGap_ ;
      /**
       * <code>int64 window_gap = 5;</code>
       * @return The windowGap.
       */
      @java.lang.Override
      public long getWindowGap() {
        return windowGap_;
      }
      /**
       * <code>int64 window_gap = 5;</code>
       * @param value The windowGap to set.
       * @return This builder for chaining.
       */
      public Builder setWindowGap(long value) {
        
        windowGap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 window_gap = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowGap() {
        
        windowGap_ = 0L;
        onChanged();
        return this;
      }

      private boolean isRowTime_ ;
      /**
       * <code>bool is_row_time = 6;</code>
       * @return The isRowTime.
       */
      @java.lang.Override
      public boolean getIsRowTime() {
        return isRowTime_;
      }
      /**
       * <code>bool is_row_time = 6;</code>
       * @param value The isRowTime to set.
       * @return This builder for chaining.
       */
      public Builder setIsRowTime(boolean value) {
        
        isRowTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool is_row_time = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsRowTime() {
        
        isRowTime_ = false;
        onChanged();
        return this;
      }

      private int timeFieldIndex_ ;
      /**
       * <code>int32 time_field_index = 7;</code>
       * @return The timeFieldIndex.
       */
      @java.lang.Override
      public int getTimeFieldIndex() {
        return timeFieldIndex_;
      }
      /**
       * <code>int32 time_field_index = 7;</code>
       * @param value The timeFieldIndex to set.
       * @return This builder for chaining.
       */
      public Builder setTimeFieldIndex(int value) {
        
        timeFieldIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 time_field_index = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeFieldIndex() {
        
        timeFieldIndex_ = 0;
        onChanged();
        return this;
      }

      private long allowedLateness_ ;
      /**
       * <code>int64 allowedLateness = 8;</code>
       * @return The allowedLateness.
       */
      @java.lang.Override
      public long getAllowedLateness() {
        return allowedLateness_;
      }
      /**
       * <code>int64 allowedLateness = 8;</code>
       * @param value The allowedLateness to set.
       * @return This builder for chaining.
       */
      public Builder setAllowedLateness(long value) {
        
        allowedLateness_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 allowedLateness = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAllowedLateness() {
        
        allowedLateness_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> namedProperties_ =
        java.util.Collections.emptyList();
      private void ensureNamedPropertiesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          namedProperties_ = new java.util.ArrayList<java.lang.Integer>(namedProperties_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @return A list containing the namedProperties.
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty> getNamedPropertiesList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty>(namedProperties_, namedProperties_converter_);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @return The count of namedProperties.
       */
      public int getNamedPropertiesCount() {
        return namedProperties_.size();
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @param index The index of the element to return.
       * @return The namedProperties at the given index.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty getNamedProperties(int index) {
        return namedProperties_converter_.convert(namedProperties_.get(index));
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @param index The index to set the value at.
       * @param value The namedProperties to set.
       * @return This builder for chaining.
       */
      public Builder setNamedProperties(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNamedPropertiesIsMutable();
        namedProperties_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @param value The namedProperties to add.
       * @return This builder for chaining.
       */
      public Builder addNamedProperties(org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNamedPropertiesIsMutable();
        namedProperties_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @param values The namedProperties to add.
       * @return This builder for chaining.
       */
      public Builder addAllNamedProperties(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty> values) {
        ensureNamedPropertiesIsMutable();
        for (org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.WindowProperty value : values) {
          namedProperties_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearNamedProperties() {
        namedProperties_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @return A list containing the enum numeric values on the wire for namedProperties.
       */
      public java.util.List<java.lang.Integer>
      getNamedPropertiesValueList() {
        return java.util.Collections.unmodifiableList(namedProperties_);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of namedProperties at the given index.
       */
      public int getNamedPropertiesValue(int index) {
        return namedProperties_.get(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @param index The index to set the value at.
       * @param value The enum numeric value on the wire for namedProperties to set.
       * @return This builder for chaining.
       */
      public Builder setNamedPropertiesValue(
          int index, int value) {
        ensureNamedPropertiesIsMutable();
        namedProperties_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @param value The enum numeric value on the wire for namedProperties to add.
       * @return This builder for chaining.
       */
      public Builder addNamedPropertiesValue(int value) {
        ensureNamedPropertiesIsMutable();
        namedProperties_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.GroupWindow.WindowProperty namedProperties = 9;</code>
       * @param values The enum numeric values on the wire for namedProperties to add.
       * @return This builder for chaining.
       */
      public Builder addAllNamedPropertiesValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureNamedPropertiesIsMutable();
        for (int value : values) {
          namedProperties_.add(value);
        }
        onChanged();
        return this;
      }

      private java.lang.Object shiftTimezone_ = "";
      /**
       * <code>string shift_timezone = 10;</code>
       * @return The shiftTimezone.
       */
      public java.lang.String getShiftTimezone() {
        java.lang.Object ref = shiftTimezone_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          shiftTimezone_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string shift_timezone = 10;</code>
       * @return The bytes for shiftTimezone.
       */
      public com.google.protobuf.ByteString
          getShiftTimezoneBytes() {
        java.lang.Object ref = shiftTimezone_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shiftTimezone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string shift_timezone = 10;</code>
       * @param value The shiftTimezone to set.
       * @return This builder for chaining.
       */
      public Builder setShiftTimezone(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        shiftTimezone_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string shift_timezone = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearShiftTimezone() {
        
        shiftTimezone_ = getDefaultInstance().getShiftTimezone();
        onChanged();
        return this;
      }
      /**
       * <code>string shift_timezone = 10;</code>
       * @param value The bytes for shiftTimezone to set.
       * @return This builder for chaining.
       */
      public Builder setShiftTimezoneBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        shiftTimezone_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.GroupWindow)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.GroupWindow)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GroupWindow>
        PARSER = new com.google.protobuf.AbstractParser<GroupWindow>() {
      @java.lang.Override
      public GroupWindow parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GroupWindow> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GroupWindow> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedAggregateFunctionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> 
        getUdfsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getUdfs(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    int getUdfsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> 
        getUdfsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder getUdfsOrBuilder(
        int index);

    /**
     * <code>bool metric_enabled = 2;</code>
     * @return The metricEnabled.
     */
    boolean getMetricEnabled();

    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @return A list containing the grouping.
     */
    java.util.List<java.lang.Integer> getGroupingList();
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @return The count of grouping.
     */
    int getGroupingCount();
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @param index The index of the element to return.
     * @return The grouping at the given index.
     */
    int getGrouping(int index);

    /**
     * <pre>
     * Generate retract messages if true.
     * </pre>
     *
     * <code>bool generate_update_before = 4;</code>
     * @return The generateUpdateBefore.
     */
    boolean getGenerateUpdateBefore();

    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     * @return Whether the keyType field is set.
     */
    boolean hasKeyType();
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     * @return The keyType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType();
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder();

    /**
     * <pre>
     * The index of a count aggregate used to calculate the number of accumulated rows.
     * </pre>
     *
     * <code>int32 index_of_count_star = 6;</code>
     * @return The indexOfCountStar.
     */
    int getIndexOfCountStar();

    /**
     * <pre>
     * Cleanup the expired state if true.
     * </pre>
     *
     * <code>bool state_cleaning_enabled = 7;</code>
     * @return The stateCleaningEnabled.
     */
    boolean getStateCleaningEnabled();

    /**
     * <pre>
     * The state cache size.
     * </pre>
     *
     * <code>int32 state_cache_size = 8;</code>
     * @return The stateCacheSize.
     */
    int getStateCacheSize();

    /**
     * <pre>
     * The map state read cache size.
     * </pre>
     *
     * <code>int32 map_state_read_cache_size = 9;</code>
     * @return The mapStateReadCacheSize.
     */
    int getMapStateReadCacheSize();

    /**
     * <pre>
     * The map_state_write_cache_size.
     * </pre>
     *
     * <code>int32 map_state_write_cache_size = 10;</code>
     * @return The mapStateWriteCacheSize.
     */
    int getMapStateWriteCacheSize();

    /**
     * <pre>
     * True if the count(*) agg is inserted by the planner.
     * </pre>
     *
     * <code>bool count_star_inserted = 11;</code>
     * @return The countStarInserted.
     */
    boolean getCountStarInserted();

    /**
     * <pre>
     * Group Window.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
     * @return Whether the groupWindow field is set.
     */
    boolean hasGroupWindow();
    /**
     * <pre>
     * Group Window.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
     * @return The groupWindow.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow getGroupWindow();
    /**
     * <pre>
     * Group Window.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindowOrBuilder getGroupWindowOrBuilder();

    /**
     * <code>bool profile_enabled = 13;</code>
     * @return The profileEnabled.
     */
    boolean getProfileEnabled();

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> 
        getJobParametersList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    int getJobParametersCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
        getJobParametersOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A list of the user-defined aggregate functions to be executed in a group aggregate operation.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions}
   */
  public static final class UserDefinedAggregateFunctions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
      UserDefinedAggregateFunctionsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedAggregateFunctions.newBuilder() to construct.
    private UserDefinedAggregateFunctions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedAggregateFunctions() {
      udfs_ = java.util.Collections.emptyList();
      grouping_ = emptyIntList();
      jobParameters_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedAggregateFunctions();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.Builder.class);
    }

    public static final int UDFS_FIELD_NUMBER = 1;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> udfs_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> getUdfsList() {
      return udfs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> 
        getUdfsOrBuilderList() {
      return udfs_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    @java.lang.Override
    public int getUdfsCount() {
      return udfs_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getUdfs(int index) {
      return udfs_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder getUdfsOrBuilder(
        int index) {
      return udfs_.get(index);
    }

    public static final int METRIC_ENABLED_FIELD_NUMBER = 2;
    private boolean metricEnabled_;
    /**
     * <code>bool metric_enabled = 2;</code>
     * @return The metricEnabled.
     */
    @java.lang.Override
    public boolean getMetricEnabled() {
      return metricEnabled_;
    }

    public static final int GROUPING_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.IntList grouping_;
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @return A list containing the grouping.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getGroupingList() {
      return grouping_;
    }
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @return The count of grouping.
     */
    public int getGroupingCount() {
      return grouping_.size();
    }
    /**
     * <pre>
     * The array of the key indexes.
     * </pre>
     *
     * <code>repeated int32 grouping = 3;</code>
     * @param index The index of the element to return.
     * @return The grouping at the given index.
     */
    public int getGrouping(int index) {
      return grouping_.getInt(index);
    }
    private int groupingMemoizedSerializedSize = -1;

    public static final int GENERATE_UPDATE_BEFORE_FIELD_NUMBER = 4;
    private boolean generateUpdateBefore_;
    /**
     * <pre>
     * Generate retract messages if true.
     * </pre>
     *
     * <code>bool generate_update_before = 4;</code>
     * @return The generateUpdateBefore.
     */
    @java.lang.Override
    public boolean getGenerateUpdateBefore() {
      return generateUpdateBefore_;
    }

    public static final int KEY_TYPE_FIELD_NUMBER = 5;
    private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     * @return Whether the keyType field is set.
     */
    @java.lang.Override
    public boolean hasKeyType() {
      return keyType_ != null;
    }
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     * @return The keyType.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
      return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
    }
    /**
     * <pre>
     * The schema of the grouping keys.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
      return getKeyType();
    }

    public static final int INDEX_OF_COUNT_STAR_FIELD_NUMBER = 6;
    private int indexOfCountStar_;
    /**
     * <pre>
     * The index of a count aggregate used to calculate the number of accumulated rows.
     * </pre>
     *
     * <code>int32 index_of_count_star = 6;</code>
     * @return The indexOfCountStar.
     */
    @java.lang.Override
    public int getIndexOfCountStar() {
      return indexOfCountStar_;
    }

    public static final int STATE_CLEANING_ENABLED_FIELD_NUMBER = 7;
    private boolean stateCleaningEnabled_;
    /**
     * <pre>
     * Cleanup the expired state if true.
     * </pre>
     *
     * <code>bool state_cleaning_enabled = 7;</code>
     * @return The stateCleaningEnabled.
     */
    @java.lang.Override
    public boolean getStateCleaningEnabled() {
      return stateCleaningEnabled_;
    }

    public static final int STATE_CACHE_SIZE_FIELD_NUMBER = 8;
    private int stateCacheSize_;
    /**
     * <pre>
     * The state cache size.
     * </pre>
     *
     * <code>int32 state_cache_size = 8;</code>
     * @return The stateCacheSize.
     */
    @java.lang.Override
    public int getStateCacheSize() {
      return stateCacheSize_;
    }

    public static final int MAP_STATE_READ_CACHE_SIZE_FIELD_NUMBER = 9;
    private int mapStateReadCacheSize_;
    /**
     * <pre>
     * The map state read cache size.
     * </pre>
     *
     * <code>int32 map_state_read_cache_size = 9;</code>
     * @return The mapStateReadCacheSize.
     */
    @java.lang.Override
    public int getMapStateReadCacheSize() {
      return mapStateReadCacheSize_;
    }

    public static final int MAP_STATE_WRITE_CACHE_SIZE_FIELD_NUMBER = 10;
    private int mapStateWriteCacheSize_;
    /**
     * <pre>
     * The map_state_write_cache_size.
     * </pre>
     *
     * <code>int32 map_state_write_cache_size = 10;</code>
     * @return The mapStateWriteCacheSize.
     */
    @java.lang.Override
    public int getMapStateWriteCacheSize() {
      return mapStateWriteCacheSize_;
    }

    public static final int COUNT_STAR_INSERTED_FIELD_NUMBER = 11;
    private boolean countStarInserted_;
    /**
     * <pre>
     * True if the count(*) agg is inserted by the planner.
     * </pre>
     *
     * <code>bool count_star_inserted = 11;</code>
     * @return The countStarInserted.
     */
    @java.lang.Override
    public boolean getCountStarInserted() {
      return countStarInserted_;
    }

    public static final int GROUP_WINDOW_FIELD_NUMBER = 12;
    private org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow groupWindow_;
    /**
     * <pre>
     * Group Window.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
     * @return Whether the groupWindow field is set.
     */
    @java.lang.Override
    public boolean hasGroupWindow() {
      return groupWindow_ != null;
    }
    /**
     * <pre>
     * Group Window.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
     * @return The groupWindow.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow getGroupWindow() {
      return groupWindow_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.getDefaultInstance() : groupWindow_;
    }
    /**
     * <pre>
     * Group Window.
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindowOrBuilder getGroupWindowOrBuilder() {
      return getGroupWindow();
    }

    public static final int PROFILE_ENABLED_FIELD_NUMBER = 13;
    private boolean profileEnabled_;
    /**
     * <code>bool profile_enabled = 13;</code>
     * @return The profileEnabled.
     */
    @java.lang.Override
    public boolean getProfileEnabled() {
      return profileEnabled_;
    }

    public static final int JOB_PARAMETERS_FIELD_NUMBER = 14;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> jobParameters_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> getJobParametersList() {
      return jobParameters_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
        getJobParametersOrBuilderList() {
      return jobParameters_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    @java.lang.Override
    public int getJobParametersCount() {
      return jobParameters_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index) {
      return jobParameters_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
        int index) {
      return jobParameters_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < udfs_.size(); i++) {
        output.writeMessage(1, udfs_.get(i));
      }
      if (metricEnabled_ != false) {
        output.writeBool(2, metricEnabled_);
      }
      if (getGroupingList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(groupingMemoizedSerializedSize);
      }
      for (int i = 0; i < grouping_.size(); i++) {
        output.writeInt32NoTag(grouping_.getInt(i));
      }
      if (generateUpdateBefore_ != false) {
        output.writeBool(4, generateUpdateBefore_);
      }
      if (keyType_ != null) {
        output.writeMessage(5, getKeyType());
      }
      if (indexOfCountStar_ != 0) {
        output.writeInt32(6, indexOfCountStar_);
      }
      if (stateCleaningEnabled_ != false) {
        output.writeBool(7, stateCleaningEnabled_);
      }
      if (stateCacheSize_ != 0) {
        output.writeInt32(8, stateCacheSize_);
      }
      if (mapStateReadCacheSize_ != 0) {
        output.writeInt32(9, mapStateReadCacheSize_);
      }
      if (mapStateWriteCacheSize_ != 0) {
        output.writeInt32(10, mapStateWriteCacheSize_);
      }
      if (countStarInserted_ != false) {
        output.writeBool(11, countStarInserted_);
      }
      if (groupWindow_ != null) {
        output.writeMessage(12, getGroupWindow());
      }
      if (profileEnabled_ != false) {
        output.writeBool(13, profileEnabled_);
      }
      for (int i = 0; i < jobParameters_.size(); i++) {
        output.writeMessage(14, jobParameters_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < udfs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, udfs_.get(i));
      }
      if (metricEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, metricEnabled_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < grouping_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(grouping_.getInt(i));
        }
        size += dataSize;
        if (!getGroupingList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        groupingMemoizedSerializedSize = dataSize;
      }
      if (generateUpdateBefore_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, generateUpdateBefore_);
      }
      if (keyType_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getKeyType());
      }
      if (indexOfCountStar_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, indexOfCountStar_);
      }
      if (stateCleaningEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, stateCleaningEnabled_);
      }
      if (stateCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, stateCacheSize_);
      }
      if (mapStateReadCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, mapStateReadCacheSize_);
      }
      if (mapStateWriteCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, mapStateWriteCacheSize_);
      }
      if (countStarInserted_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, countStarInserted_);
      }
      if (groupWindow_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getGroupWindow());
      }
      if (profileEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, profileEnabled_);
      }
      for (int i = 0; i < jobParameters_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, jobParameters_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions) obj;

      if (!getUdfsList()
          .equals(other.getUdfsList())) return false;
      if (getMetricEnabled()
          != other.getMetricEnabled()) return false;
      if (!getGroupingList()
          .equals(other.getGroupingList())) return false;
      if (getGenerateUpdateBefore()
          != other.getGenerateUpdateBefore()) return false;
      if (hasKeyType() != other.hasKeyType()) return false;
      if (hasKeyType()) {
        if (!getKeyType()
            .equals(other.getKeyType())) return false;
      }
      if (getIndexOfCountStar()
          != other.getIndexOfCountStar()) return false;
      if (getStateCleaningEnabled()
          != other.getStateCleaningEnabled()) return false;
      if (getStateCacheSize()
          != other.getStateCacheSize()) return false;
      if (getMapStateReadCacheSize()
          != other.getMapStateReadCacheSize()) return false;
      if (getMapStateWriteCacheSize()
          != other.getMapStateWriteCacheSize()) return false;
      if (getCountStarInserted()
          != other.getCountStarInserted()) return false;
      if (hasGroupWindow() != other.hasGroupWindow()) return false;
      if (hasGroupWindow()) {
        if (!getGroupWindow()
            .equals(other.getGroupWindow())) return false;
      }
      if (getProfileEnabled()
          != other.getProfileEnabled()) return false;
      if (!getJobParametersList()
          .equals(other.getJobParametersList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getUdfsCount() > 0) {
        hash = (37 * hash) + UDFS_FIELD_NUMBER;
        hash = (53 * hash) + getUdfsList().hashCode();
      }
      hash = (37 * hash) + METRIC_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getMetricEnabled());
      if (getGroupingCount() > 0) {
        hash = (37 * hash) + GROUPING_FIELD_NUMBER;
        hash = (53 * hash) + getGroupingList().hashCode();
      }
      hash = (37 * hash) + GENERATE_UPDATE_BEFORE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGenerateUpdateBefore());
      if (hasKeyType()) {
        hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyType().hashCode();
      }
      hash = (37 * hash) + INDEX_OF_COUNT_STAR_FIELD_NUMBER;
      hash = (53 * hash) + getIndexOfCountStar();
      hash = (37 * hash) + STATE_CLEANING_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getStateCleaningEnabled());
      hash = (37 * hash) + STATE_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getStateCacheSize();
      hash = (37 * hash) + MAP_STATE_READ_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getMapStateReadCacheSize();
      hash = (37 * hash) + MAP_STATE_WRITE_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getMapStateWriteCacheSize();
      hash = (37 * hash) + COUNT_STAR_INSERTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCountStarInserted());
      if (hasGroupWindow()) {
        hash = (37 * hash) + GROUP_WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getGroupWindow().hashCode();
      }
      hash = (37 * hash) + PROFILE_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getProfileEnabled());
      if (getJobParametersCount() > 0) {
        hash = (37 * hash) + JOB_PARAMETERS_FIELD_NUMBER;
        hash = (53 * hash) + getJobParametersList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A list of the user-defined aggregate functions to be executed in a group aggregate operation.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (udfsBuilder_ == null) {
          udfs_ = java.util.Collections.emptyList();
        } else {
          udfs_ = null;
          udfsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        metricEnabled_ = false;

        grouping_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        generateUpdateBefore_ = false;

        if (keyTypeBuilder_ == null) {
          keyType_ = null;
        } else {
          keyType_ = null;
          keyTypeBuilder_ = null;
        }
        indexOfCountStar_ = 0;

        stateCleaningEnabled_ = false;

        stateCacheSize_ = 0;

        mapStateReadCacheSize_ = 0;

        mapStateWriteCacheSize_ = 0;

        countStarInserted_ = false;

        if (groupWindowBuilder_ == null) {
          groupWindow_ = null;
        } else {
          groupWindow_ = null;
          groupWindowBuilder_ = null;
        }
        profileEnabled_ = false;

        if (jobParametersBuilder_ == null) {
          jobParameters_ = java.util.Collections.emptyList();
        } else {
          jobParameters_ = null;
          jobParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions(this);
        int from_bitField0_ = bitField0_;
        if (udfsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            udfs_ = java.util.Collections.unmodifiableList(udfs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.udfs_ = udfs_;
        } else {
          result.udfs_ = udfsBuilder_.build();
        }
        result.metricEnabled_ = metricEnabled_;
        if (((bitField0_ & 0x00000002) != 0)) {
          grouping_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.grouping_ = grouping_;
        result.generateUpdateBefore_ = generateUpdateBefore_;
        if (keyTypeBuilder_ == null) {
          result.keyType_ = keyType_;
        } else {
          result.keyType_ = keyTypeBuilder_.build();
        }
        result.indexOfCountStar_ = indexOfCountStar_;
        result.stateCleaningEnabled_ = stateCleaningEnabled_;
        result.stateCacheSize_ = stateCacheSize_;
        result.mapStateReadCacheSize_ = mapStateReadCacheSize_;
        result.mapStateWriteCacheSize_ = mapStateWriteCacheSize_;
        result.countStarInserted_ = countStarInserted_;
        if (groupWindowBuilder_ == null) {
          result.groupWindow_ = groupWindow_;
        } else {
          result.groupWindow_ = groupWindowBuilder_.build();
        }
        result.profileEnabled_ = profileEnabled_;
        if (jobParametersBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            jobParameters_ = java.util.Collections.unmodifiableList(jobParameters_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.jobParameters_ = jobParameters_;
        } else {
          result.jobParameters_ = jobParametersBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions.getDefaultInstance()) return this;
        if (udfsBuilder_ == null) {
          if (!other.udfs_.isEmpty()) {
            if (udfs_.isEmpty()) {
              udfs_ = other.udfs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureUdfsIsMutable();
              udfs_.addAll(other.udfs_);
            }
            onChanged();
          }
        } else {
          if (!other.udfs_.isEmpty()) {
            if (udfsBuilder_.isEmpty()) {
              udfsBuilder_.dispose();
              udfsBuilder_ = null;
              udfs_ = other.udfs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              udfsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getUdfsFieldBuilder() : null;
            } else {
              udfsBuilder_.addAllMessages(other.udfs_);
            }
          }
        }
        if (other.getMetricEnabled() != false) {
          setMetricEnabled(other.getMetricEnabled());
        }
        if (!other.grouping_.isEmpty()) {
          if (grouping_.isEmpty()) {
            grouping_ = other.grouping_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureGroupingIsMutable();
            grouping_.addAll(other.grouping_);
          }
          onChanged();
        }
        if (other.getGenerateUpdateBefore() != false) {
          setGenerateUpdateBefore(other.getGenerateUpdateBefore());
        }
        if (other.hasKeyType()) {
          mergeKeyType(other.getKeyType());
        }
        if (other.getIndexOfCountStar() != 0) {
          setIndexOfCountStar(other.getIndexOfCountStar());
        }
        if (other.getStateCleaningEnabled() != false) {
          setStateCleaningEnabled(other.getStateCleaningEnabled());
        }
        if (other.getStateCacheSize() != 0) {
          setStateCacheSize(other.getStateCacheSize());
        }
        if (other.getMapStateReadCacheSize() != 0) {
          setMapStateReadCacheSize(other.getMapStateReadCacheSize());
        }
        if (other.getMapStateWriteCacheSize() != 0) {
          setMapStateWriteCacheSize(other.getMapStateWriteCacheSize());
        }
        if (other.getCountStarInserted() != false) {
          setCountStarInserted(other.getCountStarInserted());
        }
        if (other.hasGroupWindow()) {
          mergeGroupWindow(other.getGroupWindow());
        }
        if (other.getProfileEnabled() != false) {
          setProfileEnabled(other.getProfileEnabled());
        }
        if (jobParametersBuilder_ == null) {
          if (!other.jobParameters_.isEmpty()) {
            if (jobParameters_.isEmpty()) {
              jobParameters_ = other.jobParameters_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureJobParametersIsMutable();
              jobParameters_.addAll(other.jobParameters_);
            }
            onChanged();
          }
        } else {
          if (!other.jobParameters_.isEmpty()) {
            if (jobParametersBuilder_.isEmpty()) {
              jobParametersBuilder_.dispose();
              jobParametersBuilder_ = null;
              jobParameters_ = other.jobParameters_;
              bitField0_ = (bitField0_ & ~0x00000004);
              jobParametersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getJobParametersFieldBuilder() : null;
            } else {
              jobParametersBuilder_.addAllMessages(other.jobParameters_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.parser(),
                        extensionRegistry);
                if (udfsBuilder_ == null) {
                  ensureUdfsIsMutable();
                  udfs_.add(m);
                } else {
                  udfsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                metricEnabled_ = input.readBool();

                break;
              } // case 16
              case 24: {
                int v = input.readInt32();
                ensureGroupingIsMutable();
                grouping_.addInt(v);
                break;
              } // case 24
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureGroupingIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  grouping_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 26
              case 32: {
                generateUpdateBefore_ = input.readBool();

                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getKeyTypeFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 42
              case 48: {
                indexOfCountStar_ = input.readInt32();

                break;
              } // case 48
              case 56: {
                stateCleaningEnabled_ = input.readBool();

                break;
              } // case 56
              case 64: {
                stateCacheSize_ = input.readInt32();

                break;
              } // case 64
              case 72: {
                mapStateReadCacheSize_ = input.readInt32();

                break;
              } // case 72
              case 80: {
                mapStateWriteCacheSize_ = input.readInt32();

                break;
              } // case 80
              case 88: {
                countStarInserted_ = input.readBool();

                break;
              } // case 88
              case 98: {
                input.readMessage(
                    getGroupWindowFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 98
              case 104: {
                profileEnabled_ = input.readBool();

                break;
              } // case 104
              case 114: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.parser(),
                        extensionRegistry);
                if (jobParametersBuilder_ == null) {
                  ensureJobParametersIsMutable();
                  jobParameters_.add(m);
                } else {
                  jobParametersBuilder_.addMessage(m);
                }
                break;
              } // case 114
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> udfs_ =
        java.util.Collections.emptyList();
      private void ensureUdfsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          udfs_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction>(udfs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> udfsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> getUdfsList() {
        if (udfsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(udfs_);
        } else {
          return udfsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public int getUdfsCount() {
        if (udfsBuilder_ == null) {
          return udfs_.size();
        } else {
          return udfsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction getUdfs(int index) {
        if (udfsBuilder_ == null) {
          return udfs_.get(index);
        } else {
          return udfsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder setUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.set(index, value);
          onChanged();
        } else {
          udfsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder setUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.set(index, builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addUdfs(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.add(value);
          onChanged();
        } else {
          udfsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction value) {
        if (udfsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUdfsIsMutable();
          udfs_.add(index, value);
          onChanged();
        } else {
          udfsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.add(builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addUdfs(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder builderForValue) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.add(index, builderForValue.build());
          onChanged();
        } else {
          udfsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder addAllUdfs(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction> values) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, udfs_);
          onChanged();
        } else {
          udfsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder clearUdfs() {
        if (udfsBuilder_ == null) {
          udfs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          udfsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public Builder removeUdfs(int index) {
        if (udfsBuilder_ == null) {
          ensureUdfsIsMutable();
          udfs_.remove(index);
          onChanged();
        } else {
          udfsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder getUdfsBuilder(
          int index) {
        return getUdfsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder getUdfsOrBuilder(
          int index) {
        if (udfsBuilder_ == null) {
          return udfs_.get(index);  } else {
          return udfsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> 
           getUdfsOrBuilderList() {
        if (udfsBuilder_ != null) {
          return udfsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(udfs_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder addUdfsBuilder() {
        return getUdfsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder addUdfsBuilder(
          int index) {
        return getUdfsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.UserDefinedAggregateFunction udfs = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder> 
           getUdfsBuilderList() {
        return getUdfsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder> 
          getUdfsFieldBuilder() {
        if (udfsBuilder_ == null) {
          udfsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunction.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctionOrBuilder>(
                  udfs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          udfs_ = null;
        }
        return udfsBuilder_;
      }

      private boolean metricEnabled_ ;
      /**
       * <code>bool metric_enabled = 2;</code>
       * @return The metricEnabled.
       */
      @java.lang.Override
      public boolean getMetricEnabled() {
        return metricEnabled_;
      }
      /**
       * <code>bool metric_enabled = 2;</code>
       * @param value The metricEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setMetricEnabled(boolean value) {
        
        metricEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool metric_enabled = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetricEnabled() {
        
        metricEnabled_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList grouping_ = emptyIntList();
      private void ensureGroupingIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          grouping_ = mutableCopy(grouping_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @return A list containing the grouping.
       */
      public java.util.List<java.lang.Integer>
          getGroupingList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(grouping_) : grouping_;
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @return The count of grouping.
       */
      public int getGroupingCount() {
        return grouping_.size();
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @param index The index of the element to return.
       * @return The grouping at the given index.
       */
      public int getGrouping(int index) {
        return grouping_.getInt(index);
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @param index The index to set the value at.
       * @param value The grouping to set.
       * @return This builder for chaining.
       */
      public Builder setGrouping(
          int index, int value) {
        ensureGroupingIsMutable();
        grouping_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @param value The grouping to add.
       * @return This builder for chaining.
       */
      public Builder addGrouping(int value) {
        ensureGroupingIsMutable();
        grouping_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @param values The grouping to add.
       * @return This builder for chaining.
       */
      public Builder addAllGrouping(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGroupingIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, grouping_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The array of the key indexes.
       * </pre>
       *
       * <code>repeated int32 grouping = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearGrouping() {
        grouping_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private boolean generateUpdateBefore_ ;
      /**
       * <pre>
       * Generate retract messages if true.
       * </pre>
       *
       * <code>bool generate_update_before = 4;</code>
       * @return The generateUpdateBefore.
       */
      @java.lang.Override
      public boolean getGenerateUpdateBefore() {
        return generateUpdateBefore_;
      }
      /**
       * <pre>
       * Generate retract messages if true.
       * </pre>
       *
       * <code>bool generate_update_before = 4;</code>
       * @param value The generateUpdateBefore to set.
       * @return This builder for chaining.
       */
      public Builder setGenerateUpdateBefore(boolean value) {
        
        generateUpdateBefore_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Generate retract messages if true.
       * </pre>
       *
       * <code>bool generate_update_before = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearGenerateUpdateBefore() {
        
        generateUpdateBefore_ = false;
        onChanged();
        return this;
      }

      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> keyTypeBuilder_;
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       * @return Whether the keyType field is set.
       */
      public boolean hasKeyType() {
        return keyTypeBuilder_ != null || keyType_ != null;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       * @return The keyType.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
        if (keyTypeBuilder_ == null) {
          return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
        } else {
          return keyTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public Builder setKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
        if (keyTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyType_ = value;
          onChanged();
        } else {
          keyTypeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public Builder setKeyType(
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
        if (keyTypeBuilder_ == null) {
          keyType_ = builderForValue.build();
          onChanged();
        } else {
          keyTypeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public Builder mergeKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
        if (keyTypeBuilder_ == null) {
          if (keyType_ != null) {
            keyType_ =
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(keyType_).mergeFrom(value).buildPartial();
          } else {
            keyType_ = value;
          }
          onChanged();
        } else {
          keyTypeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public Builder clearKeyType() {
        if (keyTypeBuilder_ == null) {
          keyType_ = null;
          onChanged();
        } else {
          keyType_ = null;
          keyTypeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getKeyTypeBuilder() {
        
        onChanged();
        return getKeyTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
        if (keyTypeBuilder_ != null) {
          return keyTypeBuilder_.getMessageOrBuilder();
        } else {
          return keyType_ == null ?
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
        }
      }
      /**
       * <pre>
       * The schema of the grouping keys.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
          getKeyTypeFieldBuilder() {
        if (keyTypeBuilder_ == null) {
          keyTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                  getKeyType(),
                  getParentForChildren(),
                  isClean());
          keyType_ = null;
        }
        return keyTypeBuilder_;
      }

      private int indexOfCountStar_ ;
      /**
       * <pre>
       * The index of a count aggregate used to calculate the number of accumulated rows.
       * </pre>
       *
       * <code>int32 index_of_count_star = 6;</code>
       * @return The indexOfCountStar.
       */
      @java.lang.Override
      public int getIndexOfCountStar() {
        return indexOfCountStar_;
      }
      /**
       * <pre>
       * The index of a count aggregate used to calculate the number of accumulated rows.
       * </pre>
       *
       * <code>int32 index_of_count_star = 6;</code>
       * @param value The indexOfCountStar to set.
       * @return This builder for chaining.
       */
      public Builder setIndexOfCountStar(int value) {
        
        indexOfCountStar_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The index of a count aggregate used to calculate the number of accumulated rows.
       * </pre>
       *
       * <code>int32 index_of_count_star = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearIndexOfCountStar() {
        
        indexOfCountStar_ = 0;
        onChanged();
        return this;
      }

      private boolean stateCleaningEnabled_ ;
      /**
       * <pre>
       * Cleanup the expired state if true.
       * </pre>
       *
       * <code>bool state_cleaning_enabled = 7;</code>
       * @return The stateCleaningEnabled.
       */
      @java.lang.Override
      public boolean getStateCleaningEnabled() {
        return stateCleaningEnabled_;
      }
      /**
       * <pre>
       * Cleanup the expired state if true.
       * </pre>
       *
       * <code>bool state_cleaning_enabled = 7;</code>
       * @param value The stateCleaningEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setStateCleaningEnabled(boolean value) {
        
        stateCleaningEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cleanup the expired state if true.
       * </pre>
       *
       * <code>bool state_cleaning_enabled = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateCleaningEnabled() {
        
        stateCleaningEnabled_ = false;
        onChanged();
        return this;
      }

      private int stateCacheSize_ ;
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @return The stateCacheSize.
       */
      @java.lang.Override
      public int getStateCacheSize() {
        return stateCacheSize_;
      }
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @param value The stateCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setStateCacheSize(int value) {
        
        stateCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateCacheSize() {
        
        stateCacheSize_ = 0;
        onChanged();
        return this;
      }

      private int mapStateReadCacheSize_ ;
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @return The mapStateReadCacheSize.
       */
      @java.lang.Override
      public int getMapStateReadCacheSize() {
        return mapStateReadCacheSize_;
      }
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @param value The mapStateReadCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setMapStateReadCacheSize(int value) {
        
        mapStateReadCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearMapStateReadCacheSize() {
        
        mapStateReadCacheSize_ = 0;
        onChanged();
        return this;
      }

      private int mapStateWriteCacheSize_ ;
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @return The mapStateWriteCacheSize.
       */
      @java.lang.Override
      public int getMapStateWriteCacheSize() {
        return mapStateWriteCacheSize_;
      }
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @param value The mapStateWriteCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setMapStateWriteCacheSize(int value) {
        
        mapStateWriteCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearMapStateWriteCacheSize() {
        
        mapStateWriteCacheSize_ = 0;
        onChanged();
        return this;
      }

      private boolean countStarInserted_ ;
      /**
       * <pre>
       * True if the count(*) agg is inserted by the planner.
       * </pre>
       *
       * <code>bool count_star_inserted = 11;</code>
       * @return The countStarInserted.
       */
      @java.lang.Override
      public boolean getCountStarInserted() {
        return countStarInserted_;
      }
      /**
       * <pre>
       * True if the count(*) agg is inserted by the planner.
       * </pre>
       *
       * <code>bool count_star_inserted = 11;</code>
       * @param value The countStarInserted to set.
       * @return This builder for chaining.
       */
      public Builder setCountStarInserted(boolean value) {
        
        countStarInserted_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * True if the count(*) agg is inserted by the planner.
       * </pre>
       *
       * <code>bool count_star_inserted = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearCountStarInserted() {
        
        countStarInserted_ = false;
        onChanged();
        return this;
      }

      private org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow groupWindow_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindowOrBuilder> groupWindowBuilder_;
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       * @return Whether the groupWindow field is set.
       */
      public boolean hasGroupWindow() {
        return groupWindowBuilder_ != null || groupWindow_ != null;
      }
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       * @return The groupWindow.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow getGroupWindow() {
        if (groupWindowBuilder_ == null) {
          return groupWindow_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.getDefaultInstance() : groupWindow_;
        } else {
          return groupWindowBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       */
      public Builder setGroupWindow(org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow value) {
        if (groupWindowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupWindow_ = value;
          onChanged();
        } else {
          groupWindowBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       */
      public Builder setGroupWindow(
          org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.Builder builderForValue) {
        if (groupWindowBuilder_ == null) {
          groupWindow_ = builderForValue.build();
          onChanged();
        } else {
          groupWindowBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       */
      public Builder mergeGroupWindow(org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow value) {
        if (groupWindowBuilder_ == null) {
          if (groupWindow_ != null) {
            groupWindow_ =
              org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.newBuilder(groupWindow_).mergeFrom(value).buildPartial();
          } else {
            groupWindow_ = value;
          }
          onChanged();
        } else {
          groupWindowBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       */
      public Builder clearGroupWindow() {
        if (groupWindowBuilder_ == null) {
          groupWindow_ = null;
          onChanged();
        } else {
          groupWindow_ = null;
          groupWindowBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.Builder getGroupWindowBuilder() {
        
        onChanged();
        return getGroupWindowFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindowOrBuilder getGroupWindowOrBuilder() {
        if (groupWindowBuilder_ != null) {
          return groupWindowBuilder_.getMessageOrBuilder();
        } else {
          return groupWindow_ == null ?
              org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.getDefaultInstance() : groupWindow_;
        }
      }
      /**
       * <pre>
       * Group Window.
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.GroupWindow group_window = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindowOrBuilder> 
          getGroupWindowFieldBuilder() {
        if (groupWindowBuilder_ == null) {
          groupWindowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindow.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.GroupWindowOrBuilder>(
                  getGroupWindow(),
                  getParentForChildren(),
                  isClean());
          groupWindow_ = null;
        }
        return groupWindowBuilder_;
      }

      private boolean profileEnabled_ ;
      /**
       * <code>bool profile_enabled = 13;</code>
       * @return The profileEnabled.
       */
      @java.lang.Override
      public boolean getProfileEnabled() {
        return profileEnabled_;
      }
      /**
       * <code>bool profile_enabled = 13;</code>
       * @param value The profileEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setProfileEnabled(boolean value) {
        
        profileEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool profile_enabled = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearProfileEnabled() {
        
        profileEnabled_ = false;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> jobParameters_ =
        java.util.Collections.emptyList();
      private void ensureJobParametersIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          jobParameters_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter>(jobParameters_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> jobParametersBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> getJobParametersList() {
        if (jobParametersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(jobParameters_);
        } else {
          return jobParametersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public int getJobParametersCount() {
        if (jobParametersBuilder_ == null) {
          return jobParameters_.size();
        } else {
          return jobParametersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index) {
        if (jobParametersBuilder_ == null) {
          return jobParameters_.get(index);
        } else {
          return jobParametersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder setJobParameters(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
        if (jobParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJobParametersIsMutable();
          jobParameters_.set(index, value);
          onChanged();
        } else {
          jobParametersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder setJobParameters(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          jobParameters_.set(index, builderForValue.build());
          onChanged();
        } else {
          jobParametersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder addJobParameters(org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
        if (jobParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJobParametersIsMutable();
          jobParameters_.add(value);
          onChanged();
        } else {
          jobParametersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder addJobParameters(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
        if (jobParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJobParametersIsMutable();
          jobParameters_.add(index, value);
          onChanged();
        } else {
          jobParametersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder addJobParameters(
          org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          jobParameters_.add(builderForValue.build());
          onChanged();
        } else {
          jobParametersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder addJobParameters(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          jobParameters_.add(index, builderForValue.build());
          onChanged();
        } else {
          jobParametersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder addAllJobParameters(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> values) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, jobParameters_);
          onChanged();
        } else {
          jobParametersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder clearJobParameters() {
        if (jobParametersBuilder_ == null) {
          jobParameters_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          jobParametersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public Builder removeJobParameters(int index) {
        if (jobParametersBuilder_ == null) {
          ensureJobParametersIsMutable();
          jobParameters_.remove(index);
          onChanged();
        } else {
          jobParametersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder getJobParametersBuilder(
          int index) {
        return getJobParametersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
          int index) {
        if (jobParametersBuilder_ == null) {
          return jobParameters_.get(index);  } else {
          return jobParametersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
           getJobParametersOrBuilderList() {
        if (jobParametersBuilder_ != null) {
          return jobParametersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(jobParameters_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder addJobParametersBuilder() {
        return getJobParametersFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder addJobParametersBuilder(
          int index) {
        return getJobParametersFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 14;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder> 
           getJobParametersBuilderList() {
        return getJobParametersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
          getJobParametersFieldBuilder() {
        if (jobParametersBuilder_ == null) {
          jobParametersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder>(
                  jobParameters_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          jobParameters_ = null;
        }
        return jobParametersBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedAggregateFunctions)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedAggregateFunctions>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedAggregateFunctions>() {
      @java.lang.Override
      public UserDefinedAggregateFunctions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UserDefinedAggregateFunctions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedAggregateFunctions> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedAggregateFunctions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SchemaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> 
        getFieldsList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getFields(int index);
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    int getFieldsCount();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> 
        getFieldsOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder getFieldsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A representation of the data schema.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema}
   */
  public static final class Schema extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema)
      SchemaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Schema.newBuilder() to construct.
    private Schema(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Schema() {
      fields_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Schema();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.Schema.TypeName}
     */
    public enum TypeName
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ROW = 0;</code>
       */
      ROW(0),
      /**
       * <code>TINYINT = 1;</code>
       */
      TINYINT(1),
      /**
       * <code>SMALLINT = 2;</code>
       */
      SMALLINT(2),
      /**
       * <code>INT = 3;</code>
       */
      INT(3),
      /**
       * <code>BIGINT = 4;</code>
       */
      BIGINT(4),
      /**
       * <code>DECIMAL = 5;</code>
       */
      DECIMAL(5),
      /**
       * <code>FLOAT = 6;</code>
       */
      FLOAT(6),
      /**
       * <code>DOUBLE = 7;</code>
       */
      DOUBLE(7),
      /**
       * <code>DATE = 8;</code>
       */
      DATE(8),
      /**
       * <code>TIME = 9;</code>
       */
      TIME(9),
      /**
       * <code>TIMESTAMP = 10;</code>
       */
      TIMESTAMP(10),
      /**
       * <code>BOOLEAN = 11;</code>
       */
      BOOLEAN(11),
      /**
       * <code>BINARY = 12;</code>
       */
      BINARY(12),
      /**
       * <code>VARBINARY = 13;</code>
       */
      VARBINARY(13),
      /**
       * <code>CHAR = 14;</code>
       */
      CHAR(14),
      /**
       * <code>VARCHAR = 15;</code>
       */
      VARCHAR(15),
      /**
       * <code>BASIC_ARRAY = 16;</code>
       */
      BASIC_ARRAY(16),
      /**
       * <code>MAP = 17;</code>
       */
      MAP(17),
      /**
       * <code>MULTISET = 18;</code>
       */
      MULTISET(18),
      /**
       * <code>LOCAL_ZONED_TIMESTAMP = 19;</code>
       */
      LOCAL_ZONED_TIMESTAMP(19),
      /**
       * <code>ZONED_TIMESTAMP = 20;</code>
       */
      ZONED_TIMESTAMP(20),
      /**
       * <code>NULL = 21;</code>
       */
      NULL(21),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>ROW = 0;</code>
       */
      public static final int ROW_VALUE = 0;
      /**
       * <code>TINYINT = 1;</code>
       */
      public static final int TINYINT_VALUE = 1;
      /**
       * <code>SMALLINT = 2;</code>
       */
      public static final int SMALLINT_VALUE = 2;
      /**
       * <code>INT = 3;</code>
       */
      public static final int INT_VALUE = 3;
      /**
       * <code>BIGINT = 4;</code>
       */
      public static final int BIGINT_VALUE = 4;
      /**
       * <code>DECIMAL = 5;</code>
       */
      public static final int DECIMAL_VALUE = 5;
      /**
       * <code>FLOAT = 6;</code>
       */
      public static final int FLOAT_VALUE = 6;
      /**
       * <code>DOUBLE = 7;</code>
       */
      public static final int DOUBLE_VALUE = 7;
      /**
       * <code>DATE = 8;</code>
       */
      public static final int DATE_VALUE = 8;
      /**
       * <code>TIME = 9;</code>
       */
      public static final int TIME_VALUE = 9;
      /**
       * <code>TIMESTAMP = 10;</code>
       */
      public static final int TIMESTAMP_VALUE = 10;
      /**
       * <code>BOOLEAN = 11;</code>
       */
      public static final int BOOLEAN_VALUE = 11;
      /**
       * <code>BINARY = 12;</code>
       */
      public static final int BINARY_VALUE = 12;
      /**
       * <code>VARBINARY = 13;</code>
       */
      public static final int VARBINARY_VALUE = 13;
      /**
       * <code>CHAR = 14;</code>
       */
      public static final int CHAR_VALUE = 14;
      /**
       * <code>VARCHAR = 15;</code>
       */
      public static final int VARCHAR_VALUE = 15;
      /**
       * <code>BASIC_ARRAY = 16;</code>
       */
      public static final int BASIC_ARRAY_VALUE = 16;
      /**
       * <code>MAP = 17;</code>
       */
      public static final int MAP_VALUE = 17;
      /**
       * <code>MULTISET = 18;</code>
       */
      public static final int MULTISET_VALUE = 18;
      /**
       * <code>LOCAL_ZONED_TIMESTAMP = 19;</code>
       */
      public static final int LOCAL_ZONED_TIMESTAMP_VALUE = 19;
      /**
       * <code>ZONED_TIMESTAMP = 20;</code>
       */
      public static final int ZONED_TIMESTAMP_VALUE = 20;
      /**
       * <code>NULL = 21;</code>
       */
      public static final int NULL_VALUE = 21;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypeName valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TypeName forNumber(int value) {
        switch (value) {
          case 0: return ROW;
          case 1: return TINYINT;
          case 2: return SMALLINT;
          case 3: return INT;
          case 4: return BIGINT;
          case 5: return DECIMAL;
          case 6: return FLOAT;
          case 7: return DOUBLE;
          case 8: return DATE;
          case 9: return TIME;
          case 10: return TIMESTAMP;
          case 11: return BOOLEAN;
          case 12: return BINARY;
          case 13: return VARBINARY;
          case 14: return CHAR;
          case 15: return VARCHAR;
          case 16: return BASIC_ARRAY;
          case 17: return MAP;
          case 18: return MULTISET;
          case 19: return LOCAL_ZONED_TIMESTAMP;
          case 20: return ZONED_TIMESTAMP;
          case 21: return NULL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TypeName>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TypeName> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TypeName>() {
              public TypeName findValueByNumber(int number) {
                return TypeName.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDescriptor().getEnumTypes().get(0);
      }

      private static final TypeName[] VALUES = values();

      public static TypeName valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TypeName(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.Schema.TypeName)
    }

    public interface MapInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.MapInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       * @return Whether the keyType field is set.
       */
      boolean hasKeyType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       * @return The keyType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       * @return Whether the valueType field is set.
       */
      boolean hasValueType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       * @return The valueType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.MapInfo}
     */
    public static final class MapInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.MapInfo)
        MapInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MapInfo.newBuilder() to construct.
      private MapInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MapInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new MapInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder.class);
      }

      public static final int KEY_TYPE_FIELD_NUMBER = 1;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       * @return Whether the keyType field is set.
       */
      @java.lang.Override
      public boolean hasKeyType() {
        return keyType_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       * @return The keyType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
        return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
        return getKeyType();
      }

      public static final int VALUE_TYPE_FIELD_NUMBER = 2;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType valueType_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       * @return Whether the valueType field is set.
       */
      @java.lang.Override
      public boolean hasValueType() {
        return valueType_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       * @return The valueType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType() {
        return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder() {
        return getValueType();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (keyType_ != null) {
          output.writeMessage(1, getKeyType());
        }
        if (valueType_ != null) {
          output.writeMessage(2, getValueType());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (keyType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getKeyType());
        }
        if (valueType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getValueType());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) obj;

        if (hasKeyType() != other.hasKeyType()) return false;
        if (hasKeyType()) {
          if (!getKeyType()
              .equals(other.getKeyType())) return false;
        }
        if (hasValueType() != other.hasValueType()) return false;
        if (hasValueType()) {
          if (!getValueType()
              .equals(other.getValueType())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasKeyType()) {
          hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getKeyType().hashCode();
        }
        if (hasValueType()) {
          hash = (37 * hash) + VALUE_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getValueType().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.MapInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.MapInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (keyTypeBuilder_ == null) {
            keyType_ = null;
          } else {
            keyType_ = null;
            keyTypeBuilder_ = null;
          }
          if (valueTypeBuilder_ == null) {
            valueType_ = null;
          } else {
            valueType_ = null;
            valueTypeBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo(this);
          if (keyTypeBuilder_ == null) {
            result.keyType_ = keyType_;
          } else {
            result.keyType_ = keyTypeBuilder_.build();
          }
          if (valueTypeBuilder_ == null) {
            result.valueType_ = valueType_;
          } else {
            result.valueType_ = valueTypeBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance()) return this;
          if (other.hasKeyType()) {
            mergeKeyType(other.getKeyType());
          }
          if (other.hasValueType()) {
            mergeValueType(other.getValueType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getKeyTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                case 18: {
                  input.readMessage(
                      getValueTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType keyType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> keyTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return Whether the keyType field is set.
         */
        public boolean hasKeyType() {
          return keyTypeBuilder_ != null || keyType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         * @return The keyType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getKeyType() {
          if (keyTypeBuilder_ == null) {
            return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
          } else {
            return keyTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public Builder setKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (keyTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            keyType_ = value;
            onChanged();
          } else {
            keyTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public Builder setKeyType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
          if (keyTypeBuilder_ == null) {
            keyType_ = builderForValue.build();
            onChanged();
          } else {
            keyTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public Builder mergeKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (keyTypeBuilder_ == null) {
            if (keyType_ != null) {
              keyType_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(keyType_).mergeFrom(value).buildPartial();
            } else {
              keyType_ = value;
            }
            onChanged();
          } else {
            keyTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public Builder clearKeyType() {
          if (keyTypeBuilder_ == null) {
            keyType_ = null;
            onChanged();
          } else {
            keyType_ = null;
            keyTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getKeyTypeBuilder() {
          
          onChanged();
          return getKeyTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getKeyTypeOrBuilder() {
          if (keyTypeBuilder_ != null) {
            return keyTypeBuilder_.getMessageOrBuilder();
          } else {
            return keyType_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : keyType_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType key_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
            getKeyTypeFieldBuilder() {
          if (keyTypeBuilder_ == null) {
            keyTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                    getKeyType(),
                    getParentForChildren(),
                    isClean());
            keyType_ = null;
          }
          return keyTypeBuilder_;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType valueType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> valueTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return Whether the valueType field is set.
         */
        public boolean hasValueType() {
          return valueTypeBuilder_ != null || valueType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         * @return The valueType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getValueType() {
          if (valueTypeBuilder_ == null) {
            return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
          } else {
            return valueTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public Builder setValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (valueTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valueType_ = value;
            onChanged();
          } else {
            valueTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public Builder setValueType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
          if (valueTypeBuilder_ == null) {
            valueType_ = builderForValue.build();
            onChanged();
          } else {
            valueTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public Builder mergeValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (valueTypeBuilder_ == null) {
            if (valueType_ != null) {
              valueType_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(valueType_).mergeFrom(value).buildPartial();
            } else {
              valueType_ = value;
            }
            onChanged();
          } else {
            valueTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public Builder clearValueType() {
          if (valueTypeBuilder_ == null) {
            valueType_ = null;
            onChanged();
          } else {
            valueType_ = null;
            valueTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getValueTypeBuilder() {
          
          onChanged();
          return getValueTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getValueTypeOrBuilder() {
          if (valueTypeBuilder_ != null) {
            return valueTypeBuilder_.getMessageOrBuilder();
          } else {
            return valueType_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : valueType_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType value_type = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
            getValueTypeFieldBuilder() {
          if (valueTypeBuilder_ == null) {
            valueTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                    getValueType(),
                    getParentForChildren(),
                    isClean());
            valueType_ = null;
          }
          return valueTypeBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.MapInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.MapInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<MapInfo>
          PARSER = new com.google.protobuf.AbstractParser<MapInfo>() {
        @java.lang.Override
        public MapInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<MapInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MapInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TimeInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.TimeInfo}
     */
    public static final class TimeInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
        TimeInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TimeInfo.newBuilder() to construct.
      private TimeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TimeInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TimeInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      @java.lang.Override
      public int getPrecision() {
        return precision_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.TimeInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo(this);
          result.precision_ = precision_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  precision_ = input.readInt32();

                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        @java.lang.Override
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.TimeInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TimeInfo>
          PARSER = new com.google.protobuf.AbstractParser<TimeInfo>() {
        @java.lang.Override
        public TimeInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TimeInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TimeInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TimestampInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.TimestampInfo}
     */
    public static final class TimestampInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
        TimestampInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TimestampInfo.newBuilder() to construct.
      private TimestampInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TimestampInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TimestampInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      @java.lang.Override
      public int getPrecision() {
        return precision_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.TimestampInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo(this);
          result.precision_ = precision_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  precision_ = input.readInt32();

                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        @java.lang.Override
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.TimestampInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TimestampInfo>
          PARSER = new com.google.protobuf.AbstractParser<TimestampInfo>() {
        @java.lang.Override
        public TimestampInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TimestampInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TimestampInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface LocalZonedTimestampInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo}
     */
    public static final class LocalZonedTimestampInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
        LocalZonedTimestampInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use LocalZonedTimestampInfo.newBuilder() to construct.
      private LocalZonedTimestampInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private LocalZonedTimestampInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new LocalZonedTimestampInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      @java.lang.Override
      public int getPrecision() {
        return precision_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo(this);
          result.precision_ = precision_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  precision_ = input.readInt32();

                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        @java.lang.Override
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<LocalZonedTimestampInfo>
          PARSER = new com.google.protobuf.AbstractParser<LocalZonedTimestampInfo>() {
        @java.lang.Override
        public LocalZonedTimestampInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<LocalZonedTimestampInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<LocalZonedTimestampInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ZonedTimestampInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo}
     */
    public static final class ZonedTimestampInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
        ZonedTimestampInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ZonedTimestampInfo.newBuilder() to construct.
      private ZonedTimestampInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ZonedTimestampInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ZonedTimestampInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      @java.lang.Override
      public int getPrecision() {
        return precision_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo(this);
          result.precision_ = precision_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  precision_ = input.readInt32();

                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        @java.lang.Override
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ZonedTimestampInfo>
          PARSER = new com.google.protobuf.AbstractParser<ZonedTimestampInfo>() {
        @java.lang.Override
        public ZonedTimestampInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ZonedTimestampInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ZonedTimestampInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface DecimalInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      int getPrecision();

      /**
       * <code>int32 scale = 2;</code>
       * @return The scale.
       */
      int getScale();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.DecimalInfo}
     */
    public static final class DecimalInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
        DecimalInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use DecimalInfo.newBuilder() to construct.
      private DecimalInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private DecimalInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new DecimalInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder.class);
      }

      public static final int PRECISION_FIELD_NUMBER = 1;
      private int precision_;
      /**
       * <code>int32 precision = 1;</code>
       * @return The precision.
       */
      @java.lang.Override
      public int getPrecision() {
        return precision_;
      }

      public static final int SCALE_FIELD_NUMBER = 2;
      private int scale_;
      /**
       * <code>int32 scale = 2;</code>
       * @return The scale.
       */
      @java.lang.Override
      public int getScale() {
        return scale_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (precision_ != 0) {
          output.writeInt32(1, precision_);
        }
        if (scale_ != 0) {
          output.writeInt32(2, scale_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (precision_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, precision_);
        }
        if (scale_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, scale_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) obj;

        if (getPrecision()
            != other.getPrecision()) return false;
        if (getScale()
            != other.getScale()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
        hash = (37 * hash) + SCALE_FIELD_NUMBER;
        hash = (53 * hash) + getScale();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.DecimalInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          precision_ = 0;

          scale_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo(this);
          result.precision_ = precision_;
          result.scale_ = scale_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance()) return this;
          if (other.getPrecision() != 0) {
            setPrecision(other.getPrecision());
          }
          if (other.getScale() != 0) {
            setScale(other.getScale());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  precision_ = input.readInt32();

                  break;
                } // case 8
                case 16: {
                  scale_ = input.readInt32();

                  break;
                } // case 16
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int precision_ ;
        /**
         * <code>int32 precision = 1;</code>
         * @return The precision.
         */
        @java.lang.Override
        public int getPrecision() {
          return precision_;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @param value The precision to set.
         * @return This builder for chaining.
         */
        public Builder setPrecision(int value) {
          
          precision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 precision = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrecision() {
          
          precision_ = 0;
          onChanged();
          return this;
        }

        private int scale_ ;
        /**
         * <code>int32 scale = 2;</code>
         * @return The scale.
         */
        @java.lang.Override
        public int getScale() {
          return scale_;
        }
        /**
         * <code>int32 scale = 2;</code>
         * @param value The scale to set.
         * @return This builder for chaining.
         */
        public Builder setScale(int value) {
          
          scale_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 scale = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearScale() {
          
          scale_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.DecimalInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<DecimalInfo>
          PARSER = new com.google.protobuf.AbstractParser<DecimalInfo>() {
        @java.lang.Override
        public DecimalInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<DecimalInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DecimalInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface BinaryInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      int getLength();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.BinaryInfo}
     */
    public static final class BinaryInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
        BinaryInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use BinaryInfo.newBuilder() to construct.
      private BinaryInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private BinaryInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new BinaryInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder.class);
      }

      public static final int LENGTH_FIELD_NUMBER = 1;
      private int length_;
      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      @java.lang.Override
      public int getLength() {
        return length_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (length_ != 0) {
          output.writeInt32(1, length_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (length_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, length_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) obj;

        if (getLength()
            != other.getLength()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.BinaryInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          length_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo(this);
          result.length_ = length_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance()) return this;
          if (other.getLength() != 0) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  length_ = input.readInt32();

                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int length_ ;
        /**
         * <code>int32 length = 1;</code>
         * @return The length.
         */
        @java.lang.Override
        public int getLength() {
          return length_;
        }
        /**
         * <code>int32 length = 1;</code>
         * @param value The length to set.
         * @return This builder for chaining.
         */
        public Builder setLength(int value) {
          
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 length = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLength() {
          
          length_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.BinaryInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<BinaryInfo>
          PARSER = new com.google.protobuf.AbstractParser<BinaryInfo>() {
        @java.lang.Override
        public BinaryInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<BinaryInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<BinaryInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface VarBinaryInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      int getLength();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo}
     */
    public static final class VarBinaryInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
        VarBinaryInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use VarBinaryInfo.newBuilder() to construct.
      private VarBinaryInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private VarBinaryInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new VarBinaryInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder.class);
      }

      public static final int LENGTH_FIELD_NUMBER = 1;
      private int length_;
      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      @java.lang.Override
      public int getLength() {
        return length_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (length_ != 0) {
          output.writeInt32(1, length_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (length_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, length_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) obj;

        if (getLength()
            != other.getLength()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          length_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo(this);
          result.length_ = length_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance()) return this;
          if (other.getLength() != 0) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  length_ = input.readInt32();

                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int length_ ;
        /**
         * <code>int32 length = 1;</code>
         * @return The length.
         */
        @java.lang.Override
        public int getLength() {
          return length_;
        }
        /**
         * <code>int32 length = 1;</code>
         * @param value The length to set.
         * @return This builder for chaining.
         */
        public Builder setLength(int value) {
          
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 length = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLength() {
          
          length_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<VarBinaryInfo>
          PARSER = new com.google.protobuf.AbstractParser<VarBinaryInfo>() {
        @java.lang.Override
        public VarBinaryInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<VarBinaryInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<VarBinaryInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface CharInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.CharInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      int getLength();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.CharInfo}
     */
    public static final class CharInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.CharInfo)
        CharInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use CharInfo.newBuilder() to construct.
      private CharInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private CharInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new CharInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder.class);
      }

      public static final int LENGTH_FIELD_NUMBER = 1;
      private int length_;
      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      @java.lang.Override
      public int getLength() {
        return length_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (length_ != 0) {
          output.writeInt32(1, length_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (length_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, length_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) obj;

        if (getLength()
            != other.getLength()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.CharInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.CharInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          length_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo(this);
          result.length_ = length_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance()) return this;
          if (other.getLength() != 0) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  length_ = input.readInt32();

                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int length_ ;
        /**
         * <code>int32 length = 1;</code>
         * @return The length.
         */
        @java.lang.Override
        public int getLength() {
          return length_;
        }
        /**
         * <code>int32 length = 1;</code>
         * @param value The length to set.
         * @return This builder for chaining.
         */
        public Builder setLength(int value) {
          
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 length = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLength() {
          
          length_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.CharInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.CharInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<CharInfo>
          PARSER = new com.google.protobuf.AbstractParser<CharInfo>() {
        @java.lang.Override
        public CharInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<CharInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CharInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface VarCharInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      int getLength();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.VarCharInfo}
     */
    public static final class VarCharInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
        VarCharInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use VarCharInfo.newBuilder() to construct.
      private VarCharInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private VarCharInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new VarCharInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder.class);
      }

      public static final int LENGTH_FIELD_NUMBER = 1;
      private int length_;
      /**
       * <code>int32 length = 1;</code>
       * @return The length.
       */
      @java.lang.Override
      public int getLength() {
        return length_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (length_ != 0) {
          output.writeInt32(1, length_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (length_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, length_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) obj;

        if (getLength()
            != other.getLength()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.VarCharInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          length_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo(this);
          result.length_ = length_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance()) return this;
          if (other.getLength() != 0) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  length_ = input.readInt32();

                  break;
                } // case 8
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int length_ ;
        /**
         * <code>int32 length = 1;</code>
         * @return The length.
         */
        @java.lang.Override
        public int getLength() {
          return length_;
        }
        /**
         * <code>int32 length = 1;</code>
         * @param value The length to set.
         * @return This builder for chaining.
         */
        public Builder setLength(int value) {
          
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 length = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLength() {
          
          length_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.VarCharInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<VarCharInfo>
          PARSER = new com.google.protobuf.AbstractParser<VarCharInfo>() {
        @java.lang.Override
        public VarCharInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<VarCharInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<VarCharInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface FieldTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.FieldType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
       * @return The enum numeric value on the wire for typeName.
       */
      int getTypeNameValue();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
       * @return The typeName.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName getTypeName();

      /**
       * <code>bool nullable = 2;</code>
       * @return The nullable.
       */
      boolean getNullable();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       * @return Whether the collectionElementType field is set.
       */
      boolean hasCollectionElementType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       * @return The collectionElementType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getCollectionElementType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getCollectionElementTypeOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       * @return Whether the mapInfo field is set.
       */
      boolean hasMapInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       * @return The mapInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getMapInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder getMapInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       * @return Whether the rowSchema field is set.
       */
      boolean hasRowSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       * @return The rowSchema.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getRowSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getRowSchemaOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       * @return Whether the decimalInfo field is set.
       */
      boolean hasDecimalInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       * @return The decimalInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDecimalInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder getDecimalInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       * @return Whether the timeInfo field is set.
       */
      boolean hasTimeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       * @return The timeInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getTimeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder getTimeInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       * @return Whether the timestampInfo field is set.
       */
      boolean hasTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       * @return The timestampInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder getTimestampInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       * @return Whether the localZonedTimestampInfo field is set.
       */
      boolean hasLocalZonedTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       * @return The localZonedTimestampInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getLocalZonedTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder getLocalZonedTimestampInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       * @return Whether the zonedTimestampInfo field is set.
       */
      boolean hasZonedTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       * @return The zonedTimestampInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getZonedTimestampInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder getZonedTimestampInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       * @return Whether the binaryInfo field is set.
       */
      boolean hasBinaryInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       * @return The binaryInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getBinaryInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder getBinaryInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       * @return Whether the varBinaryInfo field is set.
       */
      boolean hasVarBinaryInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       * @return The varBinaryInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getVarBinaryInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder getVarBinaryInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       * @return Whether the charInfo field is set.
       */
      boolean hasCharInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       * @return The charInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getCharInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder getCharInfoOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       * @return Whether the varCharInfo field is set.
       */
      boolean hasVarCharInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       * @return The varCharInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getVarCharInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder getVarCharInfoOrBuilder();

      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.TypeInfoCase getTypeInfoCase();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.FieldType}
     */
    public static final class FieldType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.FieldType)
        FieldTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use FieldType.newBuilder() to construct.
      private FieldType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private FieldType() {
        typeName_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new FieldType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder.class);
      }

      private int typeInfoCase_ = 0;
      private java.lang.Object typeInfo_;
      public enum TypeInfoCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        COLLECTION_ELEMENT_TYPE(3),
        MAP_INFO(4),
        ROW_SCHEMA(5),
        DECIMAL_INFO(6),
        TIME_INFO(7),
        TIMESTAMP_INFO(8),
        LOCAL_ZONED_TIMESTAMP_INFO(9),
        ZONED_TIMESTAMP_INFO(10),
        BINARY_INFO(11),
        VAR_BINARY_INFO(12),
        CHAR_INFO(13),
        VAR_CHAR_INFO(14),
        TYPEINFO_NOT_SET(0);
        private final int value;
        private TypeInfoCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TypeInfoCase valueOf(int value) {
          return forNumber(value);
        }

        public static TypeInfoCase forNumber(int value) {
          switch (value) {
            case 3: return COLLECTION_ELEMENT_TYPE;
            case 4: return MAP_INFO;
            case 5: return ROW_SCHEMA;
            case 6: return DECIMAL_INFO;
            case 7: return TIME_INFO;
            case 8: return TIMESTAMP_INFO;
            case 9: return LOCAL_ZONED_TIMESTAMP_INFO;
            case 10: return ZONED_TIMESTAMP_INFO;
            case 11: return BINARY_INFO;
            case 12: return VAR_BINARY_INFO;
            case 13: return CHAR_INFO;
            case 14: return VAR_CHAR_INFO;
            case 0: return TYPEINFO_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public TypeInfoCase
      getTypeInfoCase() {
        return TypeInfoCase.forNumber(
            typeInfoCase_);
      }

      public static final int TYPE_NAME_FIELD_NUMBER = 1;
      private int typeName_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
       * @return The enum numeric value on the wire for typeName.
       */
      @java.lang.Override public int getTypeNameValue() {
        return typeName_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
       * @return The typeName.
       */
      @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName getTypeName() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName result = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.valueOf(typeName_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.UNRECOGNIZED : result;
      }

      public static final int NULLABLE_FIELD_NUMBER = 2;
      private boolean nullable_;
      /**
       * <code>bool nullable = 2;</code>
       * @return The nullable.
       */
      @java.lang.Override
      public boolean getNullable() {
        return nullable_;
      }

      public static final int COLLECTION_ELEMENT_TYPE_FIELD_NUMBER = 3;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       * @return Whether the collectionElementType field is set.
       */
      @java.lang.Override
      public boolean hasCollectionElementType() {
        return typeInfoCase_ == 3;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       * @return The collectionElementType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getCollectionElementType() {
        if (typeInfoCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getCollectionElementTypeOrBuilder() {
        if (typeInfoCase_ == 3) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
      }

      public static final int MAP_INFO_FIELD_NUMBER = 4;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       * @return Whether the mapInfo field is set.
       */
      @java.lang.Override
      public boolean hasMapInfo() {
        return typeInfoCase_ == 4;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       * @return The mapInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getMapInfo() {
        if (typeInfoCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder getMapInfoOrBuilder() {
        if (typeInfoCase_ == 4) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
      }

      public static final int ROW_SCHEMA_FIELD_NUMBER = 5;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       * @return Whether the rowSchema field is set.
       */
      @java.lang.Override
      public boolean hasRowSchema() {
        return typeInfoCase_ == 5;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       * @return The rowSchema.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getRowSchema() {
        if (typeInfoCase_ == 5) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getRowSchemaOrBuilder() {
        if (typeInfoCase_ == 5) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
      }

      public static final int DECIMAL_INFO_FIELD_NUMBER = 6;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       * @return Whether the decimalInfo field is set.
       */
      @java.lang.Override
      public boolean hasDecimalInfo() {
        return typeInfoCase_ == 6;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       * @return The decimalInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDecimalInfo() {
        if (typeInfoCase_ == 6) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder getDecimalInfoOrBuilder() {
        if (typeInfoCase_ == 6) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
      }

      public static final int TIME_INFO_FIELD_NUMBER = 7;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       * @return Whether the timeInfo field is set.
       */
      @java.lang.Override
      public boolean hasTimeInfo() {
        return typeInfoCase_ == 7;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       * @return The timeInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getTimeInfo() {
        if (typeInfoCase_ == 7) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder getTimeInfoOrBuilder() {
        if (typeInfoCase_ == 7) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
      }

      public static final int TIMESTAMP_INFO_FIELD_NUMBER = 8;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       * @return Whether the timestampInfo field is set.
       */
      @java.lang.Override
      public boolean hasTimestampInfo() {
        return typeInfoCase_ == 8;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       * @return The timestampInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getTimestampInfo() {
        if (typeInfoCase_ == 8) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder getTimestampInfoOrBuilder() {
        if (typeInfoCase_ == 8) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
      }

      public static final int LOCAL_ZONED_TIMESTAMP_INFO_FIELD_NUMBER = 9;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       * @return Whether the localZonedTimestampInfo field is set.
       */
      @java.lang.Override
      public boolean hasLocalZonedTimestampInfo() {
        return typeInfoCase_ == 9;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       * @return The localZonedTimestampInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getLocalZonedTimestampInfo() {
        if (typeInfoCase_ == 9) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder getLocalZonedTimestampInfoOrBuilder() {
        if (typeInfoCase_ == 9) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
      }

      public static final int ZONED_TIMESTAMP_INFO_FIELD_NUMBER = 10;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       * @return Whether the zonedTimestampInfo field is set.
       */
      @java.lang.Override
      public boolean hasZonedTimestampInfo() {
        return typeInfoCase_ == 10;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       * @return The zonedTimestampInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getZonedTimestampInfo() {
        if (typeInfoCase_ == 10) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder getZonedTimestampInfoOrBuilder() {
        if (typeInfoCase_ == 10) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
      }

      public static final int BINARY_INFO_FIELD_NUMBER = 11;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       * @return Whether the binaryInfo field is set.
       */
      @java.lang.Override
      public boolean hasBinaryInfo() {
        return typeInfoCase_ == 11;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       * @return The binaryInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getBinaryInfo() {
        if (typeInfoCase_ == 11) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder getBinaryInfoOrBuilder() {
        if (typeInfoCase_ == 11) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
      }

      public static final int VAR_BINARY_INFO_FIELD_NUMBER = 12;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       * @return Whether the varBinaryInfo field is set.
       */
      @java.lang.Override
      public boolean hasVarBinaryInfo() {
        return typeInfoCase_ == 12;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       * @return The varBinaryInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getVarBinaryInfo() {
        if (typeInfoCase_ == 12) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder getVarBinaryInfoOrBuilder() {
        if (typeInfoCase_ == 12) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
      }

      public static final int CHAR_INFO_FIELD_NUMBER = 13;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       * @return Whether the charInfo field is set.
       */
      @java.lang.Override
      public boolean hasCharInfo() {
        return typeInfoCase_ == 13;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       * @return The charInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getCharInfo() {
        if (typeInfoCase_ == 13) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder getCharInfoOrBuilder() {
        if (typeInfoCase_ == 13) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
      }

      public static final int VAR_CHAR_INFO_FIELD_NUMBER = 14;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       * @return Whether the varCharInfo field is set.
       */
      @java.lang.Override
      public boolean hasVarCharInfo() {
        return typeInfoCase_ == 14;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       * @return The varCharInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getVarCharInfo() {
        if (typeInfoCase_ == 14) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder getVarCharInfoOrBuilder() {
        if (typeInfoCase_ == 14) {
           return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_;
        }
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (typeName_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.ROW.getNumber()) {
          output.writeEnum(1, typeName_);
        }
        if (nullable_ != false) {
          output.writeBool(2, nullable_);
        }
        if (typeInfoCase_ == 3) {
          output.writeMessage(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_);
        }
        if (typeInfoCase_ == 4) {
          output.writeMessage(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_);
        }
        if (typeInfoCase_ == 5) {
          output.writeMessage(5, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_);
        }
        if (typeInfoCase_ == 6) {
          output.writeMessage(6, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_);
        }
        if (typeInfoCase_ == 7) {
          output.writeMessage(7, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_);
        }
        if (typeInfoCase_ == 8) {
          output.writeMessage(8, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 9) {
          output.writeMessage(9, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 10) {
          output.writeMessage(10, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 11) {
          output.writeMessage(11, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_);
        }
        if (typeInfoCase_ == 12) {
          output.writeMessage(12, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_);
        }
        if (typeInfoCase_ == 13) {
          output.writeMessage(13, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_);
        }
        if (typeInfoCase_ == 14) {
          output.writeMessage(14, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (typeName_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.ROW.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, typeName_);
        }
        if (nullable_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, nullable_);
        }
        if (typeInfoCase_ == 3) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_);
        }
        if (typeInfoCase_ == 4) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_);
        }
        if (typeInfoCase_ == 5) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_);
        }
        if (typeInfoCase_ == 6) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_);
        }
        if (typeInfoCase_ == 7) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_);
        }
        if (typeInfoCase_ == 8) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 9) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 10) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_);
        }
        if (typeInfoCase_ == 11) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_);
        }
        if (typeInfoCase_ == 12) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(12, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_);
        }
        if (typeInfoCase_ == 13) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(13, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_);
        }
        if (typeInfoCase_ == 14) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(14, (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) obj;

        if (typeName_ != other.typeName_) return false;
        if (getNullable()
            != other.getNullable()) return false;
        if (!getTypeInfoCase().equals(other.getTypeInfoCase())) return false;
        switch (typeInfoCase_) {
          case 3:
            if (!getCollectionElementType()
                .equals(other.getCollectionElementType())) return false;
            break;
          case 4:
            if (!getMapInfo()
                .equals(other.getMapInfo())) return false;
            break;
          case 5:
            if (!getRowSchema()
                .equals(other.getRowSchema())) return false;
            break;
          case 6:
            if (!getDecimalInfo()
                .equals(other.getDecimalInfo())) return false;
            break;
          case 7:
            if (!getTimeInfo()
                .equals(other.getTimeInfo())) return false;
            break;
          case 8:
            if (!getTimestampInfo()
                .equals(other.getTimestampInfo())) return false;
            break;
          case 9:
            if (!getLocalZonedTimestampInfo()
                .equals(other.getLocalZonedTimestampInfo())) return false;
            break;
          case 10:
            if (!getZonedTimestampInfo()
                .equals(other.getZonedTimestampInfo())) return false;
            break;
          case 11:
            if (!getBinaryInfo()
                .equals(other.getBinaryInfo())) return false;
            break;
          case 12:
            if (!getVarBinaryInfo()
                .equals(other.getVarBinaryInfo())) return false;
            break;
          case 13:
            if (!getCharInfo()
                .equals(other.getCharInfo())) return false;
            break;
          case 14:
            if (!getVarCharInfo()
                .equals(other.getVarCharInfo())) return false;
            break;
          case 0:
          default:
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TYPE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + typeName_;
        hash = (37 * hash) + NULLABLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNullable());
        switch (typeInfoCase_) {
          case 3:
            hash = (37 * hash) + COLLECTION_ELEMENT_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getCollectionElementType().hashCode();
            break;
          case 4:
            hash = (37 * hash) + MAP_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getMapInfo().hashCode();
            break;
          case 5:
            hash = (37 * hash) + ROW_SCHEMA_FIELD_NUMBER;
            hash = (53 * hash) + getRowSchema().hashCode();
            break;
          case 6:
            hash = (37 * hash) + DECIMAL_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getDecimalInfo().hashCode();
            break;
          case 7:
            hash = (37 * hash) + TIME_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getTimeInfo().hashCode();
            break;
          case 8:
            hash = (37 * hash) + TIMESTAMP_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getTimestampInfo().hashCode();
            break;
          case 9:
            hash = (37 * hash) + LOCAL_ZONED_TIMESTAMP_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getLocalZonedTimestampInfo().hashCode();
            break;
          case 10:
            hash = (37 * hash) + ZONED_TIMESTAMP_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getZonedTimestampInfo().hashCode();
            break;
          case 11:
            hash = (37 * hash) + BINARY_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getBinaryInfo().hashCode();
            break;
          case 12:
            hash = (37 * hash) + VAR_BINARY_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getVarBinaryInfo().hashCode();
            break;
          case 13:
            hash = (37 * hash) + CHAR_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getCharInfo().hashCode();
            break;
          case 14:
            hash = (37 * hash) + VAR_CHAR_INFO_FIELD_NUMBER;
            hash = (53 * hash) + getVarCharInfo().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.FieldType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.FieldType)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          typeName_ = 0;

          nullable_ = false;

          if (collectionElementTypeBuilder_ != null) {
            collectionElementTypeBuilder_.clear();
          }
          if (mapInfoBuilder_ != null) {
            mapInfoBuilder_.clear();
          }
          if (rowSchemaBuilder_ != null) {
            rowSchemaBuilder_.clear();
          }
          if (decimalInfoBuilder_ != null) {
            decimalInfoBuilder_.clear();
          }
          if (timeInfoBuilder_ != null) {
            timeInfoBuilder_.clear();
          }
          if (timestampInfoBuilder_ != null) {
            timestampInfoBuilder_.clear();
          }
          if (localZonedTimestampInfoBuilder_ != null) {
            localZonedTimestampInfoBuilder_.clear();
          }
          if (zonedTimestampInfoBuilder_ != null) {
            zonedTimestampInfoBuilder_.clear();
          }
          if (binaryInfoBuilder_ != null) {
            binaryInfoBuilder_.clear();
          }
          if (varBinaryInfoBuilder_ != null) {
            varBinaryInfoBuilder_.clear();
          }
          if (charInfoBuilder_ != null) {
            charInfoBuilder_.clear();
          }
          if (varCharInfoBuilder_ != null) {
            varCharInfoBuilder_.clear();
          }
          typeInfoCase_ = 0;
          typeInfo_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType(this);
          result.typeName_ = typeName_;
          result.nullable_ = nullable_;
          if (typeInfoCase_ == 3) {
            if (collectionElementTypeBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = collectionElementTypeBuilder_.build();
            }
          }
          if (typeInfoCase_ == 4) {
            if (mapInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = mapInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 5) {
            if (rowSchemaBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = rowSchemaBuilder_.build();
            }
          }
          if (typeInfoCase_ == 6) {
            if (decimalInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = decimalInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 7) {
            if (timeInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = timeInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 8) {
            if (timestampInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = timestampInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 9) {
            if (localZonedTimestampInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = localZonedTimestampInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 10) {
            if (zonedTimestampInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = zonedTimestampInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 11) {
            if (binaryInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = binaryInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 12) {
            if (varBinaryInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = varBinaryInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 13) {
            if (charInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = charInfoBuilder_.build();
            }
          }
          if (typeInfoCase_ == 14) {
            if (varCharInfoBuilder_ == null) {
              result.typeInfo_ = typeInfo_;
            } else {
              result.typeInfo_ = varCharInfoBuilder_.build();
            }
          }
          result.typeInfoCase_ = typeInfoCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance()) return this;
          if (other.typeName_ != 0) {
            setTypeNameValue(other.getTypeNameValue());
          }
          if (other.getNullable() != false) {
            setNullable(other.getNullable());
          }
          switch (other.getTypeInfoCase()) {
            case COLLECTION_ELEMENT_TYPE: {
              mergeCollectionElementType(other.getCollectionElementType());
              break;
            }
            case MAP_INFO: {
              mergeMapInfo(other.getMapInfo());
              break;
            }
            case ROW_SCHEMA: {
              mergeRowSchema(other.getRowSchema());
              break;
            }
            case DECIMAL_INFO: {
              mergeDecimalInfo(other.getDecimalInfo());
              break;
            }
            case TIME_INFO: {
              mergeTimeInfo(other.getTimeInfo());
              break;
            }
            case TIMESTAMP_INFO: {
              mergeTimestampInfo(other.getTimestampInfo());
              break;
            }
            case LOCAL_ZONED_TIMESTAMP_INFO: {
              mergeLocalZonedTimestampInfo(other.getLocalZonedTimestampInfo());
              break;
            }
            case ZONED_TIMESTAMP_INFO: {
              mergeZonedTimestampInfo(other.getZonedTimestampInfo());
              break;
            }
            case BINARY_INFO: {
              mergeBinaryInfo(other.getBinaryInfo());
              break;
            }
            case VAR_BINARY_INFO: {
              mergeVarBinaryInfo(other.getVarBinaryInfo());
              break;
            }
            case CHAR_INFO: {
              mergeCharInfo(other.getCharInfo());
              break;
            }
            case VAR_CHAR_INFO: {
              mergeVarCharInfo(other.getVarCharInfo());
              break;
            }
            case TYPEINFO_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  typeName_ = input.readEnum();

                  break;
                } // case 8
                case 16: {
                  nullable_ = input.readBool();

                  break;
                } // case 16
                case 26: {
                  input.readMessage(
                      getCollectionElementTypeFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 3;
                  break;
                } // case 26
                case 34: {
                  input.readMessage(
                      getMapInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 4;
                  break;
                } // case 34
                case 42: {
                  input.readMessage(
                      getRowSchemaFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 5;
                  break;
                } // case 42
                case 50: {
                  input.readMessage(
                      getDecimalInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 6;
                  break;
                } // case 50
                case 58: {
                  input.readMessage(
                      getTimeInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 7;
                  break;
                } // case 58
                case 66: {
                  input.readMessage(
                      getTimestampInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 8;
                  break;
                } // case 66
                case 74: {
                  input.readMessage(
                      getLocalZonedTimestampInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 9;
                  break;
                } // case 74
                case 82: {
                  input.readMessage(
                      getZonedTimestampInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 10;
                  break;
                } // case 82
                case 90: {
                  input.readMessage(
                      getBinaryInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 11;
                  break;
                } // case 90
                case 98: {
                  input.readMessage(
                      getVarBinaryInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 12;
                  break;
                } // case 98
                case 106: {
                  input.readMessage(
                      getCharInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 13;
                  break;
                } // case 106
                case 114: {
                  input.readMessage(
                      getVarCharInfoFieldBuilder().getBuilder(),
                      extensionRegistry);
                  typeInfoCase_ = 14;
                  break;
                } // case 114
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int typeInfoCase_ = 0;
        private java.lang.Object typeInfo_;
        public TypeInfoCase
            getTypeInfoCase() {
          return TypeInfoCase.forNumber(
              typeInfoCase_);
        }

        public Builder clearTypeInfo() {
          typeInfoCase_ = 0;
          typeInfo_ = null;
          onChanged();
          return this;
        }


        private int typeName_ = 0;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @return The enum numeric value on the wire for typeName.
         */
        @java.lang.Override public int getTypeNameValue() {
          return typeName_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @param value The enum numeric value on the wire for typeName to set.
         * @return This builder for chaining.
         */
        public Builder setTypeNameValue(int value) {
          
          typeName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @return The typeName.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName getTypeName() {
          @SuppressWarnings("deprecation")
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName result = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.valueOf(typeName_);
          return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName.UNRECOGNIZED : result;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @param value The typeName to set.
         * @return This builder for chaining.
         */
        public Builder setTypeName(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TypeName value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          typeName_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TypeName type_name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTypeName() {
          
          typeName_ = 0;
          onChanged();
          return this;
        }

        private boolean nullable_ ;
        /**
         * <code>bool nullable = 2;</code>
         * @return The nullable.
         */
        @java.lang.Override
        public boolean getNullable() {
          return nullable_;
        }
        /**
         * <code>bool nullable = 2;</code>
         * @param value The nullable to set.
         * @return This builder for chaining.
         */
        public Builder setNullable(boolean value) {
          
          nullable_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool nullable = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearNullable() {
          
          nullable_ = false;
          onChanged();
          return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> collectionElementTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         * @return Whether the collectionElementType field is set.
         */
        @java.lang.Override
        public boolean hasCollectionElementType() {
          return typeInfoCase_ == 3;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         * @return The collectionElementType.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getCollectionElementType() {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 3) {
              return collectionElementTypeBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public Builder setCollectionElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (collectionElementTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            collectionElementTypeBuilder_.setMessage(value);
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public Builder setCollectionElementType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
          if (collectionElementTypeBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            collectionElementTypeBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public Builder mergeCollectionElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 3 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 3) {
              collectionElementTypeBuilder_.mergeFrom(value);
            } else {
              collectionElementTypeBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 3;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public Builder clearCollectionElementType() {
          if (collectionElementTypeBuilder_ == null) {
            if (typeInfoCase_ == 3) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 3) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            collectionElementTypeBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getCollectionElementTypeBuilder() {
          return getCollectionElementTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getCollectionElementTypeOrBuilder() {
          if ((typeInfoCase_ == 3) && (collectionElementTypeBuilder_ != null)) {
            return collectionElementTypeBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 3) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType collection_element_type = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
            getCollectionElementTypeFieldBuilder() {
          if (collectionElementTypeBuilder_ == null) {
            if (!(typeInfoCase_ == 3)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance();
            }
            collectionElementTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 3;
          onChanged();;
          return collectionElementTypeBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder> mapInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         * @return Whether the mapInfo field is set.
         */
        @java.lang.Override
        public boolean hasMapInfo() {
          return typeInfoCase_ == 4;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         * @return The mapInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo getMapInfo() {
          if (mapInfoBuilder_ == null) {
            if (typeInfoCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 4) {
              return mapInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public Builder setMapInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo value) {
          if (mapInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            mapInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public Builder setMapInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder builderForValue) {
          if (mapInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            mapInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public Builder mergeMapInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo value) {
          if (mapInfoBuilder_ == null) {
            if (typeInfoCase_ == 4 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 4) {
              mapInfoBuilder_.mergeFrom(value);
            } else {
              mapInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 4;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public Builder clearMapInfo() {
          if (mapInfoBuilder_ == null) {
            if (typeInfoCase_ == 4) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 4) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            mapInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder getMapInfoBuilder() {
          return getMapInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder getMapInfoOrBuilder() {
          if ((typeInfoCase_ == 4) && (mapInfoBuilder_ != null)) {
            return mapInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 4) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.MapInfo map_info = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder> 
            getMapInfoFieldBuilder() {
          if (mapInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 4)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.getDefaultInstance();
            }
            mapInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.MapInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 4;
          onChanged();;
          return mapInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> rowSchemaBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         * @return Whether the rowSchema field is set.
         */
        @java.lang.Override
        public boolean hasRowSchema() {
          return typeInfoCase_ == 5;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         * @return The rowSchema.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getRowSchema() {
          if (rowSchemaBuilder_ == null) {
            if (typeInfoCase_ == 5) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 5) {
              return rowSchemaBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public Builder setRowSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (rowSchemaBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            rowSchemaBuilder_.setMessage(value);
          }
          typeInfoCase_ = 5;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public Builder setRowSchema(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder builderForValue) {
          if (rowSchemaBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            rowSchemaBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 5;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public Builder mergeRowSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (rowSchemaBuilder_ == null) {
            if (typeInfoCase_ == 5 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 5) {
              rowSchemaBuilder_.mergeFrom(value);
            } else {
              rowSchemaBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 5;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public Builder clearRowSchema() {
          if (rowSchemaBuilder_ == null) {
            if (typeInfoCase_ == 5) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 5) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            rowSchemaBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder getRowSchemaBuilder() {
          return getRowSchemaFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getRowSchemaOrBuilder() {
          if ((typeInfoCase_ == 5) && (rowSchemaBuilder_ != null)) {
            return rowSchemaBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 5) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema row_schema = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> 
            getRowSchemaFieldBuilder() {
          if (rowSchemaBuilder_ == null) {
            if (!(typeInfoCase_ == 5)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
            }
            rowSchemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 5;
          onChanged();;
          return rowSchemaBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder> decimalInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         * @return Whether the decimalInfo field is set.
         */
        @java.lang.Override
        public boolean hasDecimalInfo() {
          return typeInfoCase_ == 6;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         * @return The decimalInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo getDecimalInfo() {
          if (decimalInfoBuilder_ == null) {
            if (typeInfoCase_ == 6) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 6) {
              return decimalInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public Builder setDecimalInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo value) {
          if (decimalInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            decimalInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 6;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public Builder setDecimalInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder builderForValue) {
          if (decimalInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            decimalInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 6;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public Builder mergeDecimalInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo value) {
          if (decimalInfoBuilder_ == null) {
            if (typeInfoCase_ == 6 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 6) {
              decimalInfoBuilder_.mergeFrom(value);
            } else {
              decimalInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 6;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public Builder clearDecimalInfo() {
          if (decimalInfoBuilder_ == null) {
            if (typeInfoCase_ == 6) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 6) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            decimalInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder getDecimalInfoBuilder() {
          return getDecimalInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder getDecimalInfoOrBuilder() {
          if ((typeInfoCase_ == 6) && (decimalInfoBuilder_ != null)) {
            return decimalInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 6) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.DecimalInfo decimal_info = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder> 
            getDecimalInfoFieldBuilder() {
          if (decimalInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 6)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.getDefaultInstance();
            }
            decimalInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.DecimalInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 6;
          onChanged();;
          return decimalInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder> timeInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         * @return Whether the timeInfo field is set.
         */
        @java.lang.Override
        public boolean hasTimeInfo() {
          return typeInfoCase_ == 7;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         * @return The timeInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo getTimeInfo() {
          if (timeInfoBuilder_ == null) {
            if (typeInfoCase_ == 7) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 7) {
              return timeInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public Builder setTimeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo value) {
          if (timeInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            timeInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 7;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public Builder setTimeInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder builderForValue) {
          if (timeInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            timeInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 7;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public Builder mergeTimeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo value) {
          if (timeInfoBuilder_ == null) {
            if (typeInfoCase_ == 7 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 7) {
              timeInfoBuilder_.mergeFrom(value);
            } else {
              timeInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 7;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public Builder clearTimeInfo() {
          if (timeInfoBuilder_ == null) {
            if (typeInfoCase_ == 7) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 7) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            timeInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder getTimeInfoBuilder() {
          return getTimeInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder getTimeInfoOrBuilder() {
          if ((typeInfoCase_ == 7) && (timeInfoBuilder_ != null)) {
            return timeInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 7) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimeInfo time_info = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder> 
            getTimeInfoFieldBuilder() {
          if (timeInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 7)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.getDefaultInstance();
            }
            timeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimeInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 7;
          onChanged();;
          return timeInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder> timestampInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         * @return Whether the timestampInfo field is set.
         */
        @java.lang.Override
        public boolean hasTimestampInfo() {
          return typeInfoCase_ == 8;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         * @return The timestampInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo getTimestampInfo() {
          if (timestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 8) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 8) {
              return timestampInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public Builder setTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo value) {
          if (timestampInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            timestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 8;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public Builder setTimestampInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder builderForValue) {
          if (timestampInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            timestampInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 8;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public Builder mergeTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo value) {
          if (timestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 8 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 8) {
              timestampInfoBuilder_.mergeFrom(value);
            } else {
              timestampInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 8;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public Builder clearTimestampInfo() {
          if (timestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 8) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 8) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            timestampInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder getTimestampInfoBuilder() {
          return getTimestampInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder getTimestampInfoOrBuilder() {
          if ((typeInfoCase_ == 8) && (timestampInfoBuilder_ != null)) {
            return timestampInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 8) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.TimestampInfo timestamp_info = 8;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder> 
            getTimestampInfoFieldBuilder() {
          if (timestampInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 8)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.getDefaultInstance();
            }
            timestampInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.TimestampInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 8;
          onChanged();;
          return timestampInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder> localZonedTimestampInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         * @return Whether the localZonedTimestampInfo field is set.
         */
        @java.lang.Override
        public boolean hasLocalZonedTimestampInfo() {
          return typeInfoCase_ == 9;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         * @return The localZonedTimestampInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo getLocalZonedTimestampInfo() {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 9) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 9) {
              return localZonedTimestampInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public Builder setLocalZonedTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo value) {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            localZonedTimestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 9;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public Builder setLocalZonedTimestampInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder builderForValue) {
          if (localZonedTimestampInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            localZonedTimestampInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 9;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public Builder mergeLocalZonedTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo value) {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 9 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 9) {
              localZonedTimestampInfoBuilder_.mergeFrom(value);
            } else {
              localZonedTimestampInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 9;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public Builder clearLocalZonedTimestampInfo() {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 9) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 9) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            localZonedTimestampInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder getLocalZonedTimestampInfoBuilder() {
          return getLocalZonedTimestampInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder getLocalZonedTimestampInfoOrBuilder() {
          if ((typeInfoCase_ == 9) && (localZonedTimestampInfoBuilder_ != null)) {
            return localZonedTimestampInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 9) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.LocalZonedTimestampInfo local_zoned_timestamp_info = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder> 
            getLocalZonedTimestampInfoFieldBuilder() {
          if (localZonedTimestampInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 9)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.getDefaultInstance();
            }
            localZonedTimestampInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.LocalZonedTimestampInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 9;
          onChanged();;
          return localZonedTimestampInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder> zonedTimestampInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         * @return Whether the zonedTimestampInfo field is set.
         */
        @java.lang.Override
        public boolean hasZonedTimestampInfo() {
          return typeInfoCase_ == 10;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         * @return The zonedTimestampInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo getZonedTimestampInfo() {
          if (zonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 10) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 10) {
              return zonedTimestampInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public Builder setZonedTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo value) {
          if (zonedTimestampInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            zonedTimestampInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 10;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public Builder setZonedTimestampInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder builderForValue) {
          if (zonedTimestampInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            zonedTimestampInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 10;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public Builder mergeZonedTimestampInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo value) {
          if (zonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 10 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 10) {
              zonedTimestampInfoBuilder_.mergeFrom(value);
            } else {
              zonedTimestampInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 10;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public Builder clearZonedTimestampInfo() {
          if (zonedTimestampInfoBuilder_ == null) {
            if (typeInfoCase_ == 10) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 10) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            zonedTimestampInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder getZonedTimestampInfoBuilder() {
          return getZonedTimestampInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder getZonedTimestampInfoOrBuilder() {
          if ((typeInfoCase_ == 10) && (zonedTimestampInfoBuilder_ != null)) {
            return zonedTimestampInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 10) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.ZonedTimestampInfo zoned_timestamp_info = 10;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder> 
            getZonedTimestampInfoFieldBuilder() {
          if (zonedTimestampInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 10)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.getDefaultInstance();
            }
            zonedTimestampInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.ZonedTimestampInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 10;
          onChanged();;
          return zonedTimestampInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder> binaryInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         * @return Whether the binaryInfo field is set.
         */
        @java.lang.Override
        public boolean hasBinaryInfo() {
          return typeInfoCase_ == 11;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         * @return The binaryInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo getBinaryInfo() {
          if (binaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 11) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 11) {
              return binaryInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public Builder setBinaryInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo value) {
          if (binaryInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            binaryInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 11;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public Builder setBinaryInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder builderForValue) {
          if (binaryInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            binaryInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 11;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public Builder mergeBinaryInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo value) {
          if (binaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 11 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 11) {
              binaryInfoBuilder_.mergeFrom(value);
            } else {
              binaryInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 11;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public Builder clearBinaryInfo() {
          if (binaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 11) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 11) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            binaryInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder getBinaryInfoBuilder() {
          return getBinaryInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder getBinaryInfoOrBuilder() {
          if ((typeInfoCase_ == 11) && (binaryInfoBuilder_ != null)) {
            return binaryInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 11) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.BinaryInfo binary_info = 11;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder> 
            getBinaryInfoFieldBuilder() {
          if (binaryInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 11)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.getDefaultInstance();
            }
            binaryInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.BinaryInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 11;
          onChanged();;
          return binaryInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder> varBinaryInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         * @return Whether the varBinaryInfo field is set.
         */
        @java.lang.Override
        public boolean hasVarBinaryInfo() {
          return typeInfoCase_ == 12;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         * @return The varBinaryInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo getVarBinaryInfo() {
          if (varBinaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 12) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 12) {
              return varBinaryInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public Builder setVarBinaryInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo value) {
          if (varBinaryInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            varBinaryInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 12;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public Builder setVarBinaryInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder builderForValue) {
          if (varBinaryInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            varBinaryInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 12;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public Builder mergeVarBinaryInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo value) {
          if (varBinaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 12 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 12) {
              varBinaryInfoBuilder_.mergeFrom(value);
            } else {
              varBinaryInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 12;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public Builder clearVarBinaryInfo() {
          if (varBinaryInfoBuilder_ == null) {
            if (typeInfoCase_ == 12) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 12) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            varBinaryInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder getVarBinaryInfoBuilder() {
          return getVarBinaryInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder getVarBinaryInfoOrBuilder() {
          if ((typeInfoCase_ == 12) && (varBinaryInfoBuilder_ != null)) {
            return varBinaryInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 12) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarBinaryInfo var_binary_info = 12;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder> 
            getVarBinaryInfoFieldBuilder() {
          if (varBinaryInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 12)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.getDefaultInstance();
            }
            varBinaryInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarBinaryInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 12;
          onChanged();;
          return varBinaryInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder> charInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         * @return Whether the charInfo field is set.
         */
        @java.lang.Override
        public boolean hasCharInfo() {
          return typeInfoCase_ == 13;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         * @return The charInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo getCharInfo() {
          if (charInfoBuilder_ == null) {
            if (typeInfoCase_ == 13) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 13) {
              return charInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public Builder setCharInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo value) {
          if (charInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            charInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 13;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public Builder setCharInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder builderForValue) {
          if (charInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            charInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 13;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public Builder mergeCharInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo value) {
          if (charInfoBuilder_ == null) {
            if (typeInfoCase_ == 13 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 13) {
              charInfoBuilder_.mergeFrom(value);
            } else {
              charInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 13;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public Builder clearCharInfo() {
          if (charInfoBuilder_ == null) {
            if (typeInfoCase_ == 13) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 13) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            charInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder getCharInfoBuilder() {
          return getCharInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder getCharInfoOrBuilder() {
          if ((typeInfoCase_ == 13) && (charInfoBuilder_ != null)) {
            return charInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 13) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.CharInfo char_info = 13;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder> 
            getCharInfoFieldBuilder() {
          if (charInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 13)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.getDefaultInstance();
            }
            charInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.CharInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 13;
          onChanged();;
          return charInfoBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder> varCharInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         * @return Whether the varCharInfo field is set.
         */
        @java.lang.Override
        public boolean hasVarCharInfo() {
          return typeInfoCase_ == 14;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         * @return The varCharInfo.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo getVarCharInfo() {
          if (varCharInfoBuilder_ == null) {
            if (typeInfoCase_ == 14) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
          } else {
            if (typeInfoCase_ == 14) {
              return varCharInfoBuilder_.getMessage();
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public Builder setVarCharInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo value) {
          if (varCharInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            varCharInfoBuilder_.setMessage(value);
          }
          typeInfoCase_ = 14;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public Builder setVarCharInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder builderForValue) {
          if (varCharInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            varCharInfoBuilder_.setMessage(builderForValue.build());
          }
          typeInfoCase_ = 14;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public Builder mergeVarCharInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo value) {
          if (varCharInfoBuilder_ == null) {
            if (typeInfoCase_ == 14 &&
                typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance()) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_)
                  .mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            if (typeInfoCase_ == 14) {
              varCharInfoBuilder_.mergeFrom(value);
            } else {
              varCharInfoBuilder_.setMessage(value);
            }
          }
          typeInfoCase_ = 14;
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public Builder clearVarCharInfo() {
          if (varCharInfoBuilder_ == null) {
            if (typeInfoCase_ == 14) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
              onChanged();
            }
          } else {
            if (typeInfoCase_ == 14) {
              typeInfoCase_ = 0;
              typeInfo_ = null;
            }
            varCharInfoBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder getVarCharInfoBuilder() {
          return getVarCharInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder getVarCharInfoOrBuilder() {
          if ((typeInfoCase_ == 14) && (varCharInfoBuilder_ != null)) {
            return varCharInfoBuilder_.getMessageOrBuilder();
          } else {
            if (typeInfoCase_ == 14) {
              return (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.VarCharInfo var_char_info = 14;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder> 
            getVarCharInfoFieldBuilder() {
          if (varCharInfoBuilder_ == null) {
            if (!(typeInfoCase_ == 14)) {
              typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.getDefaultInstance();
            }
            varCharInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfoOrBuilder>(
                    (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.VarCharInfo) typeInfo_,
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          typeInfoCase_ = 14;
          onChanged();;
          return varCharInfoBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.FieldType)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.FieldType)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<FieldType>
          PARSER = new com.google.protobuf.AbstractParser<FieldType>() {
        @java.lang.Override
        public FieldType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<FieldType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<FieldType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface FieldOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.Schema.Field)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <code>string description = 2;</code>
       * @return The description.
       */
      java.lang.String getDescription();
      /**
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      com.google.protobuf.ByteString
          getDescriptionBytes();

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       * @return The type.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getTypeOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.Field}
     */
    public static final class Field extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.Schema.Field)
        FieldOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Field.newBuilder() to construct.
      private Field(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Field() {
        name_ = "";
        description_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Field();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder.class);
      }

      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DESCRIPTION_FIELD_NUMBER = 2;
      private volatile java.lang.Object description_;
      /**
       * <code>string description = 2;</code>
       * @return The description.
       */
      @java.lang.Override
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        }
      }
      /**
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TYPE_FIELD_NUMBER = 3;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType type_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override
      public boolean hasType() {
        return type_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getType() {
        return type_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : type_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getTypeOrBuilder() {
        return getType();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(description_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, description_);
        }
        if (type_ != null) {
          output.writeMessage(3, getType());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(description_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, description_);
        }
        if (type_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getType());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field) obj;

        if (!getName()
            .equals(other.getName())) return false;
        if (!getDescription()
            .equals(other.getDescription())) return false;
        if (hasType() != other.hasType()) return false;
        if (hasType()) {
          if (!getType()
              .equals(other.getType())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getType().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema.Field}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema.Field)
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          name_ = "";

          description_ = "";

          if (typeBuilder_ == null) {
            type_ = null;
          } else {
            type_ = null;
            typeBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field(this);
          result.name_ = name_;
          result.description_ = description_;
          if (typeBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = typeBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            onChanged();
          }
          if (!other.getDescription().isEmpty()) {
            description_ = other.description_;
            onChanged();
          }
          if (other.hasType()) {
            mergeType(other.getType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  name_ = input.readStringRequireUtf8();

                  break;
                } // case 10
                case 18: {
                  description_ = input.readStringRequireUtf8();

                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 26
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <code>string name = 1;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          name_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object description_ = "";
        /**
         * <code>string description = 2;</code>
         * @return The description.
         */
        public java.lang.String getDescription() {
          java.lang.Object ref = description_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            description_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string description = 2;</code>
         * @return The bytes for description.
         */
        public com.google.protobuf.ByteString
            getDescriptionBytes() {
          java.lang.Object ref = description_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            description_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string description = 2;</code>
         * @param value The description to set.
         * @return This builder for chaining.
         */
        public Builder setDescription(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          description_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string description = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDescription() {
          
          description_ = getDefaultInstance().getDescription();
          onChanged();
          return this;
        }
        /**
         * <code>string description = 2;</code>
         * @param value The bytes for description to set.
         * @return This builder for chaining.
         */
        public Builder setDescriptionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          description_ = value;
          onChanged();
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType type_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> typeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         * @return Whether the type field is set.
         */
        public boolean hasType() {
          return typeBuilder_ != null || type_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         * @return The type.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType getType() {
          if (typeBuilder_ == null) {
            return type_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : type_;
          } else {
            return typeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public Builder setType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (typeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            type_ = value;
            onChanged();
          } else {
            typeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public Builder setType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder builderForValue) {
          if (typeBuilder_ == null) {
            type_ = builderForValue.build();
            onChanged();
          } else {
            typeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public Builder mergeType(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType value) {
          if (typeBuilder_ == null) {
            if (type_ != null) {
              type_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.newBuilder(type_).mergeFrom(value).buildPartial();
            } else {
              type_ = value;
            }
            onChanged();
          } else {
            typeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public Builder clearType() {
          if (typeBuilder_ == null) {
            type_ = null;
            onChanged();
          } else {
            type_ = null;
            typeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder getTypeBuilder() {
          
          onChanged();
          return getTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder getTypeOrBuilder() {
          if (typeBuilder_ != null) {
            return typeBuilder_.getMessageOrBuilder();
          } else {
            return type_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.getDefaultInstance() : type_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema.FieldType type = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder> 
            getTypeFieldBuilder() {
          if (typeBuilder_ == null) {
            typeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldTypeOrBuilder>(
                    getType(),
                    getParentForChildren(),
                    isClean());
            type_ = null;
          }
          return typeBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema.Field)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema.Field)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Field>
          PARSER = new com.google.protobuf.AbstractParser<Field>() {
        @java.lang.Override
        public Field parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Field> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Field> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int FIELDS_FIELD_NUMBER = 1;
    private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> fields_;
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> getFieldsList() {
      return fields_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> 
        getFieldsOrBuilderList() {
      return fields_;
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    @java.lang.Override
    public int getFieldsCount() {
      return fields_.size();
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getFields(int index) {
      return fields_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder getFieldsOrBuilder(
        int index) {
      return fields_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < fields_.size(); i++) {
        output.writeMessage(1, fields_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < fields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, fields_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema other = (org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) obj;

      if (!getFieldsList()
          .equals(other.getFieldsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFieldsCount() > 0) {
        hash = (37 * hash) + FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getFieldsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A representation of the data schema.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.Schema}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.Schema)
        org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.class, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
        } else {
          fields_ = null;
          fieldsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema result = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema(this);
        int from_bitField0_ = bitField0_;
        if (fieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            fields_ = java.util.Collections.unmodifiableList(fields_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.fields_ = fields_;
        } else {
          result.fields_ = fieldsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.Schema) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.Schema)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance()) return this;
        if (fieldsBuilder_ == null) {
          if (!other.fields_.isEmpty()) {
            if (fields_.isEmpty()) {
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFieldsIsMutable();
              fields_.addAll(other.fields_);
            }
            onChanged();
          }
        } else {
          if (!other.fields_.isEmpty()) {
            if (fieldsBuilder_.isEmpty()) {
              fieldsBuilder_.dispose();
              fieldsBuilder_ = null;
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFieldsFieldBuilder() : null;
            } else {
              fieldsBuilder_.addAllMessages(other.fields_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field m =
                    input.readMessage(
                        org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.parser(),
                        extensionRegistry);
                if (fieldsBuilder_ == null) {
                  ensureFieldsIsMutable();
                  fields_.add(m);
                } else {
                  fieldsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> fields_ =
        java.util.Collections.emptyList();
      private void ensureFieldsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          fields_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field>(fields_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> fieldsBuilder_;

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> getFieldsList() {
        if (fieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fields_);
        } else {
          return fieldsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public int getFieldsCount() {
        if (fieldsBuilder_ == null) {
          return fields_.size();
        } else {
          return fieldsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field getFields(int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);
        } else {
          return fieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder setFields(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.set(index, value);
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder setFields(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addFields(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addFields(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(index, value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addFields(
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addFields(
          int index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder addAllFields(
          java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field> values) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fields_);
          onChanged();
        } else {
          fieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder clearFields() {
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public Builder removeFields(int index) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.remove(index);
          onChanged();
        } else {
          fieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder getFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder getFieldsOrBuilder(
          int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);  } else {
          return fieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> 
           getFieldsOrBuilderList() {
        if (fieldsBuilder_ != null) {
          return fieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fields_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder addFieldsBuilder() {
        return getFieldsFieldBuilder().addBuilder(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder addFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().addBuilder(
            index, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.Schema.Field fields = 1;</code>
       */
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder> 
           getFieldsBuilderList() {
        return getFieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder> 
          getFieldsFieldBuilder() {
        if (fieldsBuilder_ == null) {
          fieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.FieldOrBuilder>(
                  fields_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          fields_ = null;
        }
        return fieldsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.Schema)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.Schema)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.Schema DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.Schema();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Schema>
        PARSER = new com.google.protobuf.AbstractParser<Schema>() {
      @java.lang.Override
      public Schema parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Schema> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Schema> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TypeInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
     * @return The enum numeric value on the wire for typeName.
     */
    int getTypeNameValue();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
     * @return The typeName.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName getTypeName();

    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
     * @return Whether the collectionElementType field is set.
     */
    boolean hasCollectionElementType();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
     * @return The collectionElementType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getCollectionElementType();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getCollectionElementTypeOrBuilder();

    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
     * @return Whether the rowTypeInfo field is set.
     */
    boolean hasRowTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
     * @return The rowTypeInfo.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo getRowTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfoOrBuilder getRowTypeInfoOrBuilder();

    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
     * @return Whether the tupleTypeInfo field is set.
     */
    boolean hasTupleTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
     * @return The tupleTypeInfo.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo getTupleTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfoOrBuilder getTupleTypeInfoOrBuilder();

    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
     * @return Whether the mapTypeInfo field is set.
     */
    boolean hasMapTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
     * @return The mapTypeInfo.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo getMapTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfoOrBuilder getMapTypeInfoOrBuilder();

    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
     * @return Whether the avroTypeInfo field is set.
     */
    boolean hasAvroTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
     * @return The avroTypeInfo.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo getAvroTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfoOrBuilder getAvroTypeInfoOrBuilder();

    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeInfoCase getTypeInfoCase();
  }
  /**
   * <pre>
   * A representation of the data type information in DataStream.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo}
   */
  public static final class TypeInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo)
      TypeInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TypeInfo.newBuilder() to construct.
    private TypeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TypeInfo() {
      typeName_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TypeInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.TypeInfo.TypeName}
     */
    public enum TypeName
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ROW = 0;</code>
       */
      ROW(0),
      /**
       * <code>STRING = 1;</code>
       */
      STRING(1),
      /**
       * <code>BYTE = 2;</code>
       */
      BYTE(2),
      /**
       * <code>BOOLEAN = 3;</code>
       */
      BOOLEAN(3),
      /**
       * <code>SHORT = 4;</code>
       */
      SHORT(4),
      /**
       * <code>INT = 5;</code>
       */
      INT(5),
      /**
       * <code>LONG = 6;</code>
       */
      LONG(6),
      /**
       * <code>FLOAT = 7;</code>
       */
      FLOAT(7),
      /**
       * <code>DOUBLE = 8;</code>
       */
      DOUBLE(8),
      /**
       * <code>CHAR = 9;</code>
       */
      CHAR(9),
      /**
       * <code>BIG_INT = 10;</code>
       */
      BIG_INT(10),
      /**
       * <code>BIG_DEC = 11;</code>
       */
      BIG_DEC(11),
      /**
       * <code>SQL_DATE = 12;</code>
       */
      SQL_DATE(12),
      /**
       * <code>SQL_TIME = 13;</code>
       */
      SQL_TIME(13),
      /**
       * <code>SQL_TIMESTAMP = 14;</code>
       */
      SQL_TIMESTAMP(14),
      /**
       * <code>BASIC_ARRAY = 15;</code>
       */
      BASIC_ARRAY(15),
      /**
       * <code>PRIMITIVE_ARRAY = 16;</code>
       */
      PRIMITIVE_ARRAY(16),
      /**
       * <code>TUPLE = 17;</code>
       */
      TUPLE(17),
      /**
       * <code>LIST = 18;</code>
       */
      LIST(18),
      /**
       * <code>MAP = 19;</code>
       */
      MAP(19),
      /**
       * <code>PICKLED_BYTES = 20;</code>
       */
      PICKLED_BYTES(20),
      /**
       * <code>OBJECT_ARRAY = 21;</code>
       */
      OBJECT_ARRAY(21),
      /**
       * <code>INSTANT = 22;</code>
       */
      INSTANT(22),
      /**
       * <code>AVRO = 23;</code>
       */
      AVRO(23),
      /**
       * <code>LOCAL_DATE = 24;</code>
       */
      LOCAL_DATE(24),
      /**
       * <code>LOCAL_TIME = 25;</code>
       */
      LOCAL_TIME(25),
      /**
       * <code>LOCAL_DATETIME = 26;</code>
       */
      LOCAL_DATETIME(26),
      /**
       * <code>LOCAL_ZONED_TIMESTAMP = 27;</code>
       */
      LOCAL_ZONED_TIMESTAMP(27),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>ROW = 0;</code>
       */
      public static final int ROW_VALUE = 0;
      /**
       * <code>STRING = 1;</code>
       */
      public static final int STRING_VALUE = 1;
      /**
       * <code>BYTE = 2;</code>
       */
      public static final int BYTE_VALUE = 2;
      /**
       * <code>BOOLEAN = 3;</code>
       */
      public static final int BOOLEAN_VALUE = 3;
      /**
       * <code>SHORT = 4;</code>
       */
      public static final int SHORT_VALUE = 4;
      /**
       * <code>INT = 5;</code>
       */
      public static final int INT_VALUE = 5;
      /**
       * <code>LONG = 6;</code>
       */
      public static final int LONG_VALUE = 6;
      /**
       * <code>FLOAT = 7;</code>
       */
      public static final int FLOAT_VALUE = 7;
      /**
       * <code>DOUBLE = 8;</code>
       */
      public static final int DOUBLE_VALUE = 8;
      /**
       * <code>CHAR = 9;</code>
       */
      public static final int CHAR_VALUE = 9;
      /**
       * <code>BIG_INT = 10;</code>
       */
      public static final int BIG_INT_VALUE = 10;
      /**
       * <code>BIG_DEC = 11;</code>
       */
      public static final int BIG_DEC_VALUE = 11;
      /**
       * <code>SQL_DATE = 12;</code>
       */
      public static final int SQL_DATE_VALUE = 12;
      /**
       * <code>SQL_TIME = 13;</code>
       */
      public static final int SQL_TIME_VALUE = 13;
      /**
       * <code>SQL_TIMESTAMP = 14;</code>
       */
      public static final int SQL_TIMESTAMP_VALUE = 14;
      /**
       * <code>BASIC_ARRAY = 15;</code>
       */
      public static final int BASIC_ARRAY_VALUE = 15;
      /**
       * <code>PRIMITIVE_ARRAY = 16;</code>
       */
      public static final int PRIMITIVE_ARRAY_VALUE = 16;
      /**
       * <code>TUPLE = 17;</code>
       */
      public static final int TUPLE_VALUE = 17;
      /**
       * <code>LIST = 18;</code>
       */
      public static final int LIST_VALUE = 18;
      /**
       * <code>MAP = 19;</code>
       */
      public static final int MAP_VALUE = 19;
      /**
       * <code>PICKLED_BYTES = 20;</code>
       */
      public static final int PICKLED_BYTES_VALUE = 20;
      /**
       * <code>OBJECT_ARRAY = 21;</code>
       */
      public static final int OBJECT_ARRAY_VALUE = 21;
      /**
       * <code>INSTANT = 22;</code>
       */
      public static final int INSTANT_VALUE = 22;
      /**
       * <code>AVRO = 23;</code>
       */
      public static final int AVRO_VALUE = 23;
      /**
       * <code>LOCAL_DATE = 24;</code>
       */
      public static final int LOCAL_DATE_VALUE = 24;
      /**
       * <code>LOCAL_TIME = 25;</code>
       */
      public static final int LOCAL_TIME_VALUE = 25;
      /**
       * <code>LOCAL_DATETIME = 26;</code>
       */
      public static final int LOCAL_DATETIME_VALUE = 26;
      /**
       * <code>LOCAL_ZONED_TIMESTAMP = 27;</code>
       */
      public static final int LOCAL_ZONED_TIMESTAMP_VALUE = 27;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypeName valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TypeName forNumber(int value) {
        switch (value) {
          case 0: return ROW;
          case 1: return STRING;
          case 2: return BYTE;
          case 3: return BOOLEAN;
          case 4: return SHORT;
          case 5: return INT;
          case 6: return LONG;
          case 7: return FLOAT;
          case 8: return DOUBLE;
          case 9: return CHAR;
          case 10: return BIG_INT;
          case 11: return BIG_DEC;
          case 12: return SQL_DATE;
          case 13: return SQL_TIME;
          case 14: return SQL_TIMESTAMP;
          case 15: return BASIC_ARRAY;
          case 16: return PRIMITIVE_ARRAY;
          case 17: return TUPLE;
          case 18: return LIST;
          case 19: return MAP;
          case 20: return PICKLED_BYTES;
          case 21: return OBJECT_ARRAY;
          case 22: return INSTANT;
          case 23: return AVRO;
          case 24: return LOCAL_DATE;
          case 25: return LOCAL_TIME;
          case 26: return LOCAL_DATETIME;
          case 27: return LOCAL_ZONED_TIMESTAMP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TypeName>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TypeName> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TypeName>() {
              public TypeName findValueByNumber(int number) {
                return TypeName.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final TypeName[] VALUES = values();

      public static TypeName valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TypeName(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.TypeInfo.TypeName)
    }

    public interface MapTypeInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
       * @return Whether the keyType field is set.
       */
      boolean hasKeyType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
       * @return The keyType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeOrBuilder();

      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
       * @return Whether the valueType field is set.
       */
      boolean hasValueType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
       * @return The valueType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getValueType();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getValueTypeOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo}
     */
    public static final class MapTypeInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo)
        MapTypeInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MapTypeInfo.newBuilder() to construct.
      private MapTypeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MapTypeInfo() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new MapTypeInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.Builder.class);
      }

      public static final int KEY_TYPE_FIELD_NUMBER = 1;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo keyType_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
       * @return Whether the keyType field is set.
       */
      @java.lang.Override
      public boolean hasKeyType() {
        return keyType_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
       * @return The keyType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyType() {
        return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeOrBuilder() {
        return getKeyType();
      }

      public static final int VALUE_TYPE_FIELD_NUMBER = 2;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo valueType_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
       * @return Whether the valueType field is set.
       */
      @java.lang.Override
      public boolean hasValueType() {
        return valueType_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
       * @return The valueType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getValueType() {
        return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : valueType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getValueTypeOrBuilder() {
        return getValueType();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (keyType_ != null) {
          output.writeMessage(1, getKeyType());
        }
        if (valueType_ != null) {
          output.writeMessage(2, getValueType());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (keyType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getKeyType());
        }
        if (valueType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getValueType());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) obj;

        if (hasKeyType() != other.hasKeyType()) return false;
        if (hasKeyType()) {
          if (!getKeyType()
              .equals(other.getKeyType())) return false;
        }
        if (hasValueType() != other.hasValueType()) return false;
        if (hasValueType()) {
          if (!getValueType()
              .equals(other.getValueType())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasKeyType()) {
          hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getKeyType().hashCode();
        }
        if (hasValueType()) {
          hash = (37 * hash) + VALUE_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getValueType().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (keyTypeBuilder_ == null) {
            keyType_ = null;
          } else {
            keyType_ = null;
            keyTypeBuilder_ = null;
          }
          if (valueTypeBuilder_ == null) {
            valueType_ = null;
          } else {
            valueType_ = null;
            valueTypeBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo(this);
          if (keyTypeBuilder_ == null) {
            result.keyType_ = keyType_;
          } else {
            result.keyType_ = keyTypeBuilder_.build();
          }
          if (valueTypeBuilder_ == null) {
            result.valueType_ = valueType_;
          } else {
            result.valueType_ = valueTypeBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance()) return this;
          if (other.hasKeyType()) {
            mergeKeyType(other.getKeyType());
          }
          if (other.hasValueType()) {
            mergeValueType(other.getValueType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getKeyTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                case 18: {
                  input.readMessage(
                      getValueTypeFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo keyType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> keyTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         * @return Whether the keyType field is set.
         */
        public boolean hasKeyType() {
          return keyTypeBuilder_ != null || keyType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         * @return The keyType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyType() {
          if (keyTypeBuilder_ == null) {
            return keyType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyType_;
          } else {
            return keyTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         */
        public Builder setKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (keyTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            keyType_ = value;
            onChanged();
          } else {
            keyTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         */
        public Builder setKeyType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
          if (keyTypeBuilder_ == null) {
            keyType_ = builderForValue.build();
            onChanged();
          } else {
            keyTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         */
        public Builder mergeKeyType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (keyTypeBuilder_ == null) {
            if (keyType_ != null) {
              keyType_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder(keyType_).mergeFrom(value).buildPartial();
            } else {
              keyType_ = value;
            }
            onChanged();
          } else {
            keyTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         */
        public Builder clearKeyType() {
          if (keyTypeBuilder_ == null) {
            keyType_ = null;
            onChanged();
          } else {
            keyType_ = null;
            keyTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getKeyTypeBuilder() {
          
          onChanged();
          return getKeyTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeOrBuilder() {
          if (keyTypeBuilder_ != null) {
            return keyTypeBuilder_.getMessageOrBuilder();
          } else {
            return keyType_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyType_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
            getKeyTypeFieldBuilder() {
          if (keyTypeBuilder_ == null) {
            keyTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                    getKeyType(),
                    getParentForChildren(),
                    isClean());
            keyType_ = null;
          }
          return keyTypeBuilder_;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo valueType_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> valueTypeBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         * @return Whether the valueType field is set.
         */
        public boolean hasValueType() {
          return valueTypeBuilder_ != null || valueType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         * @return The valueType.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getValueType() {
          if (valueTypeBuilder_ == null) {
            return valueType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : valueType_;
          } else {
            return valueTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         */
        public Builder setValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (valueTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valueType_ = value;
            onChanged();
          } else {
            valueTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         */
        public Builder setValueType(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
          if (valueTypeBuilder_ == null) {
            valueType_ = builderForValue.build();
            onChanged();
          } else {
            valueTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         */
        public Builder mergeValueType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (valueTypeBuilder_ == null) {
            if (valueType_ != null) {
              valueType_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder(valueType_).mergeFrom(value).buildPartial();
            } else {
              valueType_ = value;
            }
            onChanged();
          } else {
            valueTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         */
        public Builder clearValueType() {
          if (valueTypeBuilder_ == null) {
            valueType_ = null;
            onChanged();
          } else {
            valueType_ = null;
            valueTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getValueTypeBuilder() {
          
          onChanged();
          return getValueTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getValueTypeOrBuilder() {
          if (valueTypeBuilder_ != null) {
            return valueTypeBuilder_.getMessageOrBuilder();
          } else {
            return valueType_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : valueType_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo value_type = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
            getValueTypeFieldBuilder() {
          if (valueTypeBuilder_ == null) {
            valueTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                    getValueType(),
                    getParentForChildren(),
                    isClean());
            valueType_ = null;
          }
          return valueTypeBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<MapTypeInfo>
          PARSER = new com.google.protobuf.AbstractParser<MapTypeInfo>() {
        @java.lang.Override
        public MapTypeInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<MapTypeInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MapTypeInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RowTypeInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field> 
          getFieldsList();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field getFields(int index);
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      int getFieldsCount();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder> 
          getFieldsOrBuilderList();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder getFieldsOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo}
     */
    public static final class RowTypeInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo)
        RowTypeInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RowTypeInfo.newBuilder() to construct.
      private RowTypeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RowTypeInfo() {
        fields_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RowTypeInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Builder.class);
      }

      public interface FieldOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>string field_name = 1;</code>
         * @return The fieldName.
         */
        java.lang.String getFieldName();
        /**
         * <code>string field_name = 1;</code>
         * @return The bytes for fieldName.
         */
        com.google.protobuf.ByteString
            getFieldNameBytes();

        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
         * @return Whether the fieldType field is set.
         */
        boolean hasFieldType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
         * @return The fieldType.
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getFieldType();
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getFieldTypeOrBuilder();
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field}
       */
      public static final class Field extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field)
          FieldOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use Field.newBuilder() to construct.
        private Field(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private Field() {
          fieldName_ = "";
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new Field();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder.class);
        }

        public static final int FIELD_NAME_FIELD_NUMBER = 1;
        private volatile java.lang.Object fieldName_;
        /**
         * <code>string field_name = 1;</code>
         * @return The fieldName.
         */
        @java.lang.Override
        public java.lang.String getFieldName() {
          java.lang.Object ref = fieldName_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            fieldName_ = s;
            return s;
          }
        }
        /**
         * <code>string field_name = 1;</code>
         * @return The bytes for fieldName.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getFieldNameBytes() {
          java.lang.Object ref = fieldName_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            fieldName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int FIELD_TYPE_FIELD_NUMBER = 2;
        private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo fieldType_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
         * @return Whether the fieldType field is set.
         */
        @java.lang.Override
        public boolean hasFieldType() {
          return fieldType_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
         * @return The fieldType.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getFieldType() {
          return fieldType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : fieldType_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getFieldTypeOrBuilder() {
          return getFieldType();
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(fieldName_)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, fieldName_);
          }
          if (fieldType_ != null) {
            output.writeMessage(2, getFieldType());
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(fieldName_)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, fieldName_);
          }
          if (fieldType_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(2, getFieldType());
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field)) {
            return super.equals(obj);
          }
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field) obj;

          if (!getFieldName()
              .equals(other.getFieldName())) return false;
          if (hasFieldType() != other.hasFieldType()) return false;
          if (hasFieldType()) {
            if (!getFieldType()
                .equals(other.getFieldType())) return false;
          }
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + FIELD_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getFieldName().hashCode();
          if (hasFieldType()) {
            hash = (37 * hash) + FIELD_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getFieldType().hashCode();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field)
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder.class);
          }

          // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            fieldName_ = "";

            if (fieldTypeBuilder_ == null) {
              fieldType_ = null;
            } else {
              fieldType_ = null;
              fieldTypeBuilder_ = null;
            }
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_descriptor;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field getDefaultInstanceForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field build() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field buildPartial() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field(this);
            result.fieldName_ = fieldName_;
            if (fieldTypeBuilder_ == null) {
              result.fieldType_ = fieldType_;
            } else {
              result.fieldType_ = fieldTypeBuilder_.build();
            }
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field) {
              return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field other) {
            if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.getDefaultInstance()) return this;
            if (!other.getFieldName().isEmpty()) {
              fieldName_ = other.fieldName_;
              onChanged();
            }
            if (other.hasFieldType()) {
              mergeFieldType(other.getFieldType());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    fieldName_ = input.readStringRequireUtf8();

                    break;
                  } // case 10
                  case 18: {
                    input.readMessage(
                        getFieldTypeFieldBuilder().getBuilder(),
                        extensionRegistry);

                    break;
                  } // case 18
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }

          private java.lang.Object fieldName_ = "";
          /**
           * <code>string field_name = 1;</code>
           * @return The fieldName.
           */
          public java.lang.String getFieldName() {
            java.lang.Object ref = fieldName_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              fieldName_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <code>string field_name = 1;</code>
           * @return The bytes for fieldName.
           */
          public com.google.protobuf.ByteString
              getFieldNameBytes() {
            java.lang.Object ref = fieldName_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              fieldName_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <code>string field_name = 1;</code>
           * @param value The fieldName to set.
           * @return This builder for chaining.
           */
          public Builder setFieldName(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            fieldName_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>string field_name = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearFieldName() {
            
            fieldName_ = getDefaultInstance().getFieldName();
            onChanged();
            return this;
          }
          /**
           * <code>string field_name = 1;</code>
           * @param value The bytes for fieldName to set.
           * @return This builder for chaining.
           */
          public Builder setFieldNameBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            fieldName_ = value;
            onChanged();
            return this;
          }

          private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo fieldType_;
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> fieldTypeBuilder_;
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           * @return Whether the fieldType field is set.
           */
          public boolean hasFieldType() {
            return fieldTypeBuilder_ != null || fieldType_ != null;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           * @return The fieldType.
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getFieldType() {
            if (fieldTypeBuilder_ == null) {
              return fieldType_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : fieldType_;
            } else {
              return fieldTypeBuilder_.getMessage();
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           */
          public Builder setFieldType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
            if (fieldTypeBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              fieldType_ = value;
              onChanged();
            } else {
              fieldTypeBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           */
          public Builder setFieldType(
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
            if (fieldTypeBuilder_ == null) {
              fieldType_ = builderForValue.build();
              onChanged();
            } else {
              fieldTypeBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           */
          public Builder mergeFieldType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
            if (fieldTypeBuilder_ == null) {
              if (fieldType_ != null) {
                fieldType_ =
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder(fieldType_).mergeFrom(value).buildPartial();
              } else {
                fieldType_ = value;
              }
              onChanged();
            } else {
              fieldTypeBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           */
          public Builder clearFieldType() {
            if (fieldTypeBuilder_ == null) {
              fieldType_ = null;
              onChanged();
            } else {
              fieldType_ = null;
              fieldTypeBuilder_ = null;
            }

            return this;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getFieldTypeBuilder() {
            
            onChanged();
            return getFieldTypeFieldBuilder().getBuilder();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getFieldTypeOrBuilder() {
            if (fieldTypeBuilder_ != null) {
              return fieldTypeBuilder_.getMessageOrBuilder();
            } else {
              return fieldType_ == null ?
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : fieldType_;
            }
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.TypeInfo field_type = 2;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
              getFieldTypeFieldBuilder() {
            if (fieldTypeBuilder_ == null) {
              fieldTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                      getFieldType(),
                      getParentForChildren(),
                      isClean());
              fieldType_ = null;
            }
            return fieldTypeBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field)
        }

        // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field)
        private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field();
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Field>
            PARSER = new com.google.protobuf.AbstractParser<Field>() {
          @java.lang.Override
          public Field parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<Field> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Field> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public static final int FIELDS_FIELD_NUMBER = 1;
      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field> fields_;
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field> getFieldsList() {
        return fields_;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      @java.lang.Override
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder> 
          getFieldsOrBuilderList() {
        return fields_;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      @java.lang.Override
      public int getFieldsCount() {
        return fields_.size();
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field getFields(int index) {
        return fields_.get(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder getFieldsOrBuilder(
          int index) {
        return fields_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < fields_.size(); i++) {
          output.writeMessage(1, fields_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < fields_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, fields_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) obj;

        if (!getFieldsList()
            .equals(other.getFieldsList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getFieldsCount() > 0) {
          hash = (37 * hash) + FIELDS_FIELD_NUMBER;
          hash = (53 * hash) + getFieldsList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (fieldsBuilder_ == null) {
            fields_ = java.util.Collections.emptyList();
          } else {
            fields_ = null;
            fieldsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo(this);
          int from_bitField0_ = bitField0_;
          if (fieldsBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              fields_ = java.util.Collections.unmodifiableList(fields_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.fields_ = fields_;
          } else {
            result.fields_ = fieldsBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance()) return this;
          if (fieldsBuilder_ == null) {
            if (!other.fields_.isEmpty()) {
              if (fields_.isEmpty()) {
                fields_ = other.fields_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureFieldsIsMutable();
                fields_.addAll(other.fields_);
              }
              onChanged();
            }
          } else {
            if (!other.fields_.isEmpty()) {
              if (fieldsBuilder_.isEmpty()) {
                fieldsBuilder_.dispose();
                fieldsBuilder_ = null;
                fields_ = other.fields_;
                bitField0_ = (bitField0_ & ~0x00000001);
                fieldsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getFieldsFieldBuilder() : null;
              } else {
                fieldsBuilder_.addAllMessages(other.fields_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field m =
                      input.readMessage(
                          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.parser(),
                          extensionRegistry);
                  if (fieldsBuilder_ == null) {
                    ensureFieldsIsMutable();
                    fields_.add(m);
                  } else {
                    fieldsBuilder_.addMessage(m);
                  }
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field> fields_ =
          java.util.Collections.emptyList();
        private void ensureFieldsIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            fields_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field>(fields_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder> fieldsBuilder_;

        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field> getFieldsList() {
          if (fieldsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(fields_);
          } else {
            return fieldsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public int getFieldsCount() {
          if (fieldsBuilder_ == null) {
            return fields_.size();
          } else {
            return fieldsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field getFields(int index) {
          if (fieldsBuilder_ == null) {
            return fields_.get(index);
          } else {
            return fieldsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder setFields(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field value) {
          if (fieldsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFieldsIsMutable();
            fields_.set(index, value);
            onChanged();
          } else {
            fieldsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder setFields(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder builderForValue) {
          if (fieldsBuilder_ == null) {
            ensureFieldsIsMutable();
            fields_.set(index, builderForValue.build());
            onChanged();
          } else {
            fieldsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder addFields(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field value) {
          if (fieldsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFieldsIsMutable();
            fields_.add(value);
            onChanged();
          } else {
            fieldsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder addFields(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field value) {
          if (fieldsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFieldsIsMutable();
            fields_.add(index, value);
            onChanged();
          } else {
            fieldsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder addFields(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder builderForValue) {
          if (fieldsBuilder_ == null) {
            ensureFieldsIsMutable();
            fields_.add(builderForValue.build());
            onChanged();
          } else {
            fieldsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder addFields(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder builderForValue) {
          if (fieldsBuilder_ == null) {
            ensureFieldsIsMutable();
            fields_.add(index, builderForValue.build());
            onChanged();
          } else {
            fieldsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder addAllFields(
            java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field> values) {
          if (fieldsBuilder_ == null) {
            ensureFieldsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, fields_);
            onChanged();
          } else {
            fieldsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder clearFields() {
          if (fieldsBuilder_ == null) {
            fields_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            fieldsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public Builder removeFields(int index) {
          if (fieldsBuilder_ == null) {
            ensureFieldsIsMutable();
            fields_.remove(index);
            onChanged();
          } else {
            fieldsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder getFieldsBuilder(
            int index) {
          return getFieldsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder getFieldsOrBuilder(
            int index) {
          if (fieldsBuilder_ == null) {
            return fields_.get(index);  } else {
            return fieldsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder> 
             getFieldsOrBuilderList() {
          if (fieldsBuilder_ != null) {
            return fieldsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(fields_);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder addFieldsBuilder() {
          return getFieldsFieldBuilder().addBuilder(
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.getDefaultInstance());
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder addFieldsBuilder(
            int index) {
          return getFieldsFieldBuilder().addBuilder(
              index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.getDefaultInstance());
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo.Field fields = 1;</code>
         */
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder> 
             getFieldsBuilderList() {
          return getFieldsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder> 
            getFieldsFieldBuilder() {
          if (fieldsBuilder_ == null) {
            fieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Field.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.FieldOrBuilder>(
                    fields_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            fields_ = null;
          }
          return fieldsBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RowTypeInfo>
          PARSER = new com.google.protobuf.AbstractParser<RowTypeInfo>() {
        @java.lang.Override
        public RowTypeInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<RowTypeInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RowTypeInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TupleTypeInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo> 
          getFieldTypesList();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getFieldTypes(int index);
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      int getFieldTypesCount();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
          getFieldTypesOrBuilderList();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getFieldTypesOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo}
     */
    public static final class TupleTypeInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo)
        TupleTypeInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TupleTypeInfo.newBuilder() to construct.
      private TupleTypeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TupleTypeInfo() {
        fieldTypes_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new TupleTypeInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.Builder.class);
      }

      public static final int FIELD_TYPES_FIELD_NUMBER = 1;
      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo> fieldTypes_;
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo> getFieldTypesList() {
        return fieldTypes_;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      @java.lang.Override
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
          getFieldTypesOrBuilderList() {
        return fieldTypes_;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      @java.lang.Override
      public int getFieldTypesCount() {
        return fieldTypes_.size();
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getFieldTypes(int index) {
        return fieldTypes_.get(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getFieldTypesOrBuilder(
          int index) {
        return fieldTypes_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < fieldTypes_.size(); i++) {
          output.writeMessage(1, fieldTypes_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < fieldTypes_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, fieldTypes_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) obj;

        if (!getFieldTypesList()
            .equals(other.getFieldTypesList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getFieldTypesCount() > 0) {
          hash = (37 * hash) + FIELD_TYPES_FIELD_NUMBER;
          hash = (53 * hash) + getFieldTypesList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (fieldTypesBuilder_ == null) {
            fieldTypes_ = java.util.Collections.emptyList();
          } else {
            fieldTypes_ = null;
            fieldTypesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo(this);
          int from_bitField0_ = bitField0_;
          if (fieldTypesBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              fieldTypes_ = java.util.Collections.unmodifiableList(fieldTypes_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.fieldTypes_ = fieldTypes_;
          } else {
            result.fieldTypes_ = fieldTypesBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance()) return this;
          if (fieldTypesBuilder_ == null) {
            if (!other.fieldTypes_.isEmpty()) {
              if (fieldTypes_.isEmpty()) {
                fieldTypes_ = other.fieldTypes_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureFieldTypesIsMutable();
                fieldTypes_.addAll(other.fieldTypes_);
              }
              onChanged();
            }
          } else {
            if (!other.fieldTypes_.isEmpty()) {
              if (fieldTypesBuilder_.isEmpty()) {
                fieldTypesBuilder_.dispose();
                fieldTypesBuilder_ = null;
                fieldTypes_ = other.fieldTypes_;
                bitField0_ = (bitField0_ & ~0x00000001);
                fieldTypesBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getFieldTypesFieldBuilder() : null;
              } else {
                fieldTypesBuilder_.addAllMessages(other.fieldTypes_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo m =
                      input.readMessage(
                          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.parser(),
                          extensionRegistry);
                  if (fieldTypesBuilder_ == null) {
                    ensureFieldTypesIsMutable();
                    fieldTypes_.add(m);
                  } else {
                    fieldTypesBuilder_.addMessage(m);
                  }
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo> fieldTypes_ =
          java.util.Collections.emptyList();
        private void ensureFieldTypesIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            fieldTypes_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo>(fieldTypes_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> fieldTypesBuilder_;

        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo> getFieldTypesList() {
          if (fieldTypesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(fieldTypes_);
          } else {
            return fieldTypesBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public int getFieldTypesCount() {
          if (fieldTypesBuilder_ == null) {
            return fieldTypes_.size();
          } else {
            return fieldTypesBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getFieldTypes(int index) {
          if (fieldTypesBuilder_ == null) {
            return fieldTypes_.get(index);
          } else {
            return fieldTypesBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder setFieldTypes(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (fieldTypesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFieldTypesIsMutable();
            fieldTypes_.set(index, value);
            onChanged();
          } else {
            fieldTypesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder setFieldTypes(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
          if (fieldTypesBuilder_ == null) {
            ensureFieldTypesIsMutable();
            fieldTypes_.set(index, builderForValue.build());
            onChanged();
          } else {
            fieldTypesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder addFieldTypes(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (fieldTypesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFieldTypesIsMutable();
            fieldTypes_.add(value);
            onChanged();
          } else {
            fieldTypesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder addFieldTypes(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (fieldTypesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureFieldTypesIsMutable();
            fieldTypes_.add(index, value);
            onChanged();
          } else {
            fieldTypesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder addFieldTypes(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
          if (fieldTypesBuilder_ == null) {
            ensureFieldTypesIsMutable();
            fieldTypes_.add(builderForValue.build());
            onChanged();
          } else {
            fieldTypesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder addFieldTypes(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
          if (fieldTypesBuilder_ == null) {
            ensureFieldTypesIsMutable();
            fieldTypes_.add(index, builderForValue.build());
            onChanged();
          } else {
            fieldTypesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder addAllFieldTypes(
            java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo> values) {
          if (fieldTypesBuilder_ == null) {
            ensureFieldTypesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, fieldTypes_);
            onChanged();
          } else {
            fieldTypesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder clearFieldTypes() {
          if (fieldTypesBuilder_ == null) {
            fieldTypes_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            fieldTypesBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public Builder removeFieldTypes(int index) {
          if (fieldTypesBuilder_ == null) {
            ensureFieldTypesIsMutable();
            fieldTypes_.remove(index);
            onChanged();
          } else {
            fieldTypesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getFieldTypesBuilder(
            int index) {
          return getFieldTypesFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getFieldTypesOrBuilder(
            int index) {
          if (fieldTypesBuilder_ == null) {
            return fieldTypes_.get(index);  } else {
            return fieldTypesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
             getFieldTypesOrBuilderList() {
          if (fieldTypesBuilder_ != null) {
            return fieldTypesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(fieldTypes_);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder addFieldTypesBuilder() {
          return getFieldTypesFieldBuilder().addBuilder(
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance());
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder addFieldTypesBuilder(
            int index) {
          return getFieldTypesFieldBuilder().addBuilder(
              index, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance());
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.TypeInfo field_types = 1;</code>
         */
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder> 
             getFieldTypesBuilderList() {
          return getFieldTypesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
            getFieldTypesFieldBuilder() {
          if (fieldTypesBuilder_ == null) {
            fieldTypesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                    fieldTypes_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            fieldTypes_ = null;
          }
          return fieldTypesBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TupleTypeInfo>
          PARSER = new com.google.protobuf.AbstractParser<TupleTypeInfo>() {
        @java.lang.Override
        public TupleTypeInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<TupleTypeInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TupleTypeInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface AvroTypeInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string schema = 1;</code>
       * @return The schema.
       */
      java.lang.String getSchema();
      /**
       * <code>string schema = 1;</code>
       * @return The bytes for schema.
       */
      com.google.protobuf.ByteString
          getSchemaBytes();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo}
     */
    public static final class AvroTypeInfo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo)
        AvroTypeInfoOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use AvroTypeInfo.newBuilder() to construct.
      private AvroTypeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private AvroTypeInfo() {
        schema_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new AvroTypeInfo();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.Builder.class);
      }

      public static final int SCHEMA_FIELD_NUMBER = 1;
      private volatile java.lang.Object schema_;
      /**
       * <code>string schema = 1;</code>
       * @return The schema.
       */
      @java.lang.Override
      public java.lang.String getSchema() {
        java.lang.Object ref = schema_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          schema_ = s;
          return s;
        }
      }
      /**
       * <code>string schema = 1;</code>
       * @return The bytes for schema.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSchemaBytes() {
        java.lang.Object ref = schema_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          schema_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schema_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, schema_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schema_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, schema_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) obj;

        if (!getSchema()
            .equals(other.getSchema())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getSchema().hashCode();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo)
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          schema_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo(this);
          result.schema_ = schema_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance()) return this;
          if (!other.getSchema().isEmpty()) {
            schema_ = other.schema_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  schema_ = input.readStringRequireUtf8();

                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private java.lang.Object schema_ = "";
        /**
         * <code>string schema = 1;</code>
         * @return The schema.
         */
        public java.lang.String getSchema() {
          java.lang.Object ref = schema_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            schema_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string schema = 1;</code>
         * @return The bytes for schema.
         */
        public com.google.protobuf.ByteString
            getSchemaBytes() {
          java.lang.Object ref = schema_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            schema_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string schema = 1;</code>
         * @param value The schema to set.
         * @return This builder for chaining.
         */
        public Builder setSchema(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          schema_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string schema = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearSchema() {
          
          schema_ = getDefaultInstance().getSchema();
          onChanged();
          return this;
        }
        /**
         * <code>string schema = 1;</code>
         * @param value The bytes for schema to set.
         * @return This builder for chaining.
         */
        public Builder setSchemaBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          schema_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<AvroTypeInfo>
          PARSER = new com.google.protobuf.AbstractParser<AvroTypeInfo>() {
        @java.lang.Override
        public AvroTypeInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<AvroTypeInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<AvroTypeInfo> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int typeInfoCase_ = 0;
    private java.lang.Object typeInfo_;
    public enum TypeInfoCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      COLLECTION_ELEMENT_TYPE(2),
      ROW_TYPE_INFO(3),
      TUPLE_TYPE_INFO(4),
      MAP_TYPE_INFO(5),
      AVRO_TYPE_INFO(6),
      TYPEINFO_NOT_SET(0);
      private final int value;
      private TypeInfoCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypeInfoCase valueOf(int value) {
        return forNumber(value);
      }

      public static TypeInfoCase forNumber(int value) {
        switch (value) {
          case 2: return COLLECTION_ELEMENT_TYPE;
          case 3: return ROW_TYPE_INFO;
          case 4: return TUPLE_TYPE_INFO;
          case 5: return MAP_TYPE_INFO;
          case 6: return AVRO_TYPE_INFO;
          case 0: return TYPEINFO_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TypeInfoCase
    getTypeInfoCase() {
      return TypeInfoCase.forNumber(
          typeInfoCase_);
    }

    public static final int TYPE_NAME_FIELD_NUMBER = 1;
    private int typeName_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
     * @return The enum numeric value on the wire for typeName.
     */
    @java.lang.Override public int getTypeNameValue() {
      return typeName_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
     * @return The typeName.
     */
    @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName getTypeName() {
      @SuppressWarnings("deprecation")
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName result = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.valueOf(typeName_);
      return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.UNRECOGNIZED : result;
    }

    public static final int COLLECTION_ELEMENT_TYPE_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
     * @return Whether the collectionElementType field is set.
     */
    @java.lang.Override
    public boolean hasCollectionElementType() {
      return typeInfoCase_ == 2;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
     * @return The collectionElementType.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getCollectionElementType() {
      if (typeInfoCase_ == 2) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getCollectionElementTypeOrBuilder() {
      if (typeInfoCase_ == 2) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
    }

    public static final int ROW_TYPE_INFO_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
     * @return Whether the rowTypeInfo field is set.
     */
    @java.lang.Override
    public boolean hasRowTypeInfo() {
      return typeInfoCase_ == 3;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
     * @return The rowTypeInfo.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo getRowTypeInfo() {
      if (typeInfoCase_ == 3) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfoOrBuilder getRowTypeInfoOrBuilder() {
      if (typeInfoCase_ == 3) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance();
    }

    public static final int TUPLE_TYPE_INFO_FIELD_NUMBER = 4;
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
     * @return Whether the tupleTypeInfo field is set.
     */
    @java.lang.Override
    public boolean hasTupleTypeInfo() {
      return typeInfoCase_ == 4;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
     * @return The tupleTypeInfo.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo getTupleTypeInfo() {
      if (typeInfoCase_ == 4) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfoOrBuilder getTupleTypeInfoOrBuilder() {
      if (typeInfoCase_ == 4) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance();
    }

    public static final int MAP_TYPE_INFO_FIELD_NUMBER = 5;
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
     * @return Whether the mapTypeInfo field is set.
     */
    @java.lang.Override
    public boolean hasMapTypeInfo() {
      return typeInfoCase_ == 5;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
     * @return The mapTypeInfo.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo getMapTypeInfo() {
      if (typeInfoCase_ == 5) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfoOrBuilder getMapTypeInfoOrBuilder() {
      if (typeInfoCase_ == 5) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance();
    }

    public static final int AVRO_TYPE_INFO_FIELD_NUMBER = 6;
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
     * @return Whether the avroTypeInfo field is set.
     */
    @java.lang.Override
    public boolean hasAvroTypeInfo() {
      return typeInfoCase_ == 6;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
     * @return The avroTypeInfo.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo getAvroTypeInfo() {
      if (typeInfoCase_ == 6) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfoOrBuilder getAvroTypeInfoOrBuilder() {
      if (typeInfoCase_ == 6) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) typeInfo_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (typeName_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.ROW.getNumber()) {
        output.writeEnum(1, typeName_);
      }
      if (typeInfoCase_ == 2) {
        output.writeMessage(2, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_);
      }
      if (typeInfoCase_ == 3) {
        output.writeMessage(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) typeInfo_);
      }
      if (typeInfoCase_ == 4) {
        output.writeMessage(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) typeInfo_);
      }
      if (typeInfoCase_ == 5) {
        output.writeMessage(5, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) typeInfo_);
      }
      if (typeInfoCase_ == 6) {
        output.writeMessage(6, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) typeInfo_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (typeName_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.ROW.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, typeName_);
      }
      if (typeInfoCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_);
      }
      if (typeInfoCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) typeInfo_);
      }
      if (typeInfoCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) typeInfo_);
      }
      if (typeInfoCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) typeInfo_);
      }
      if (typeInfoCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) typeInfo_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo other = (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) obj;

      if (typeName_ != other.typeName_) return false;
      if (!getTypeInfoCase().equals(other.getTypeInfoCase())) return false;
      switch (typeInfoCase_) {
        case 2:
          if (!getCollectionElementType()
              .equals(other.getCollectionElementType())) return false;
          break;
        case 3:
          if (!getRowTypeInfo()
              .equals(other.getRowTypeInfo())) return false;
          break;
        case 4:
          if (!getTupleTypeInfo()
              .equals(other.getTupleTypeInfo())) return false;
          break;
        case 5:
          if (!getMapTypeInfo()
              .equals(other.getMapTypeInfo())) return false;
          break;
        case 6:
          if (!getAvroTypeInfo()
              .equals(other.getAvroTypeInfo())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + typeName_;
      switch (typeInfoCase_) {
        case 2:
          hash = (37 * hash) + COLLECTION_ELEMENT_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getCollectionElementType().hashCode();
          break;
        case 3:
          hash = (37 * hash) + ROW_TYPE_INFO_FIELD_NUMBER;
          hash = (53 * hash) + getRowTypeInfo().hashCode();
          break;
        case 4:
          hash = (37 * hash) + TUPLE_TYPE_INFO_FIELD_NUMBER;
          hash = (53 * hash) + getTupleTypeInfo().hashCode();
          break;
        case 5:
          hash = (37 * hash) + MAP_TYPE_INFO_FIELD_NUMBER;
          hash = (53 * hash) + getMapTypeInfo().hashCode();
          break;
        case 6:
          hash = (37 * hash) + AVRO_TYPE_INFO_FIELD_NUMBER;
          hash = (53 * hash) + getAvroTypeInfo().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A representation of the data type information in DataStream.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.TypeInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.TypeInfo)
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.class, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        typeName_ = 0;

        if (collectionElementTypeBuilder_ != null) {
          collectionElementTypeBuilder_.clear();
        }
        if (rowTypeInfoBuilder_ != null) {
          rowTypeInfoBuilder_.clear();
        }
        if (tupleTypeInfoBuilder_ != null) {
          tupleTypeInfoBuilder_.clear();
        }
        if (mapTypeInfoBuilder_ != null) {
          mapTypeInfoBuilder_.clear();
        }
        if (avroTypeInfoBuilder_ != null) {
          avroTypeInfoBuilder_.clear();
        }
        typeInfoCase_ = 0;
        typeInfo_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo result = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo(this);
        result.typeName_ = typeName_;
        if (typeInfoCase_ == 2) {
          if (collectionElementTypeBuilder_ == null) {
            result.typeInfo_ = typeInfo_;
          } else {
            result.typeInfo_ = collectionElementTypeBuilder_.build();
          }
        }
        if (typeInfoCase_ == 3) {
          if (rowTypeInfoBuilder_ == null) {
            result.typeInfo_ = typeInfo_;
          } else {
            result.typeInfo_ = rowTypeInfoBuilder_.build();
          }
        }
        if (typeInfoCase_ == 4) {
          if (tupleTypeInfoBuilder_ == null) {
            result.typeInfo_ = typeInfo_;
          } else {
            result.typeInfo_ = tupleTypeInfoBuilder_.build();
          }
        }
        if (typeInfoCase_ == 5) {
          if (mapTypeInfoBuilder_ == null) {
            result.typeInfo_ = typeInfo_;
          } else {
            result.typeInfo_ = mapTypeInfoBuilder_.build();
          }
        }
        if (typeInfoCase_ == 6) {
          if (avroTypeInfoBuilder_ == null) {
            result.typeInfo_ = typeInfo_;
          } else {
            result.typeInfo_ = avroTypeInfoBuilder_.build();
          }
        }
        result.typeInfoCase_ = typeInfoCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance()) return this;
        if (other.typeName_ != 0) {
          setTypeNameValue(other.getTypeNameValue());
        }
        switch (other.getTypeInfoCase()) {
          case COLLECTION_ELEMENT_TYPE: {
            mergeCollectionElementType(other.getCollectionElementType());
            break;
          }
          case ROW_TYPE_INFO: {
            mergeRowTypeInfo(other.getRowTypeInfo());
            break;
          }
          case TUPLE_TYPE_INFO: {
            mergeTupleTypeInfo(other.getTupleTypeInfo());
            break;
          }
          case MAP_TYPE_INFO: {
            mergeMapTypeInfo(other.getMapTypeInfo());
            break;
          }
          case AVRO_TYPE_INFO: {
            mergeAvroTypeInfo(other.getAvroTypeInfo());
            break;
          }
          case TYPEINFO_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                typeName_ = input.readEnum();

                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getCollectionElementTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                typeInfoCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getRowTypeInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                typeInfoCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getTupleTypeInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                typeInfoCase_ = 4;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getMapTypeInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                typeInfoCase_ = 5;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getAvroTypeInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                typeInfoCase_ = 6;
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int typeInfoCase_ = 0;
      private java.lang.Object typeInfo_;
      public TypeInfoCase
          getTypeInfoCase() {
        return TypeInfoCase.forNumber(
            typeInfoCase_);
      }

      public Builder clearTypeInfo() {
        typeInfoCase_ = 0;
        typeInfo_ = null;
        onChanged();
        return this;
      }


      private int typeName_ = 0;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @return The enum numeric value on the wire for typeName.
       */
      @java.lang.Override public int getTypeNameValue() {
        return typeName_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @param value The enum numeric value on the wire for typeName to set.
       * @return This builder for chaining.
       */
      public Builder setTypeNameValue(int value) {
        
        typeName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @return The typeName.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName getTypeName() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName result = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.valueOf(typeName_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @param value The typeName to set.
       * @return This builder for chaining.
       */
      public Builder setTypeName(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TypeName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        typeName_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TypeName type_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeName() {
        
        typeName_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> collectionElementTypeBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       * @return Whether the collectionElementType field is set.
       */
      @java.lang.Override
      public boolean hasCollectionElementType() {
        return typeInfoCase_ == 2;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       * @return The collectionElementType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getCollectionElementType() {
        if (collectionElementTypeBuilder_ == null) {
          if (typeInfoCase_ == 2) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
        } else {
          if (typeInfoCase_ == 2) {
            return collectionElementTypeBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       */
      public Builder setCollectionElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
        if (collectionElementTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeInfo_ = value;
          onChanged();
        } else {
          collectionElementTypeBuilder_.setMessage(value);
        }
        typeInfoCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       */
      public Builder setCollectionElementType(
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
        if (collectionElementTypeBuilder_ == null) {
          typeInfo_ = builderForValue.build();
          onChanged();
        } else {
          collectionElementTypeBuilder_.setMessage(builderForValue.build());
        }
        typeInfoCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       */
      public Builder mergeCollectionElementType(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
        if (collectionElementTypeBuilder_ == null) {
          if (typeInfoCase_ == 2 &&
              typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance()) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_)
                .mergeFrom(value).buildPartial();
          } else {
            typeInfo_ = value;
          }
          onChanged();
        } else {
          if (typeInfoCase_ == 2) {
            collectionElementTypeBuilder_.mergeFrom(value);
          } else {
            collectionElementTypeBuilder_.setMessage(value);
          }
        }
        typeInfoCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       */
      public Builder clearCollectionElementType() {
        if (collectionElementTypeBuilder_ == null) {
          if (typeInfoCase_ == 2) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
            onChanged();
          }
        } else {
          if (typeInfoCase_ == 2) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
          }
          collectionElementTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getCollectionElementTypeBuilder() {
        return getCollectionElementTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getCollectionElementTypeOrBuilder() {
        if ((typeInfoCase_ == 2) && (collectionElementTypeBuilder_ != null)) {
          return collectionElementTypeBuilder_.getMessageOrBuilder();
        } else {
          if (typeInfoCase_ == 2) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo collection_element_type = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
          getCollectionElementTypeFieldBuilder() {
        if (collectionElementTypeBuilder_ == null) {
          if (!(typeInfoCase_ == 2)) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance();
          }
          collectionElementTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo) typeInfo_,
                  getParentForChildren(),
                  isClean());
          typeInfo_ = null;
        }
        typeInfoCase_ = 2;
        onChanged();;
        return collectionElementTypeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfoOrBuilder> rowTypeInfoBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       * @return Whether the rowTypeInfo field is set.
       */
      @java.lang.Override
      public boolean hasRowTypeInfo() {
        return typeInfoCase_ == 3;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       * @return The rowTypeInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo getRowTypeInfo() {
        if (rowTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 3) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance();
        } else {
          if (typeInfoCase_ == 3) {
            return rowTypeInfoBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       */
      public Builder setRowTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo value) {
        if (rowTypeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeInfo_ = value;
          onChanged();
        } else {
          rowTypeInfoBuilder_.setMessage(value);
        }
        typeInfoCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       */
      public Builder setRowTypeInfo(
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Builder builderForValue) {
        if (rowTypeInfoBuilder_ == null) {
          typeInfo_ = builderForValue.build();
          onChanged();
        } else {
          rowTypeInfoBuilder_.setMessage(builderForValue.build());
        }
        typeInfoCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       */
      public Builder mergeRowTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo value) {
        if (rowTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 3 &&
              typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance()) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) typeInfo_)
                .mergeFrom(value).buildPartial();
          } else {
            typeInfo_ = value;
          }
          onChanged();
        } else {
          if (typeInfoCase_ == 3) {
            rowTypeInfoBuilder_.mergeFrom(value);
          } else {
            rowTypeInfoBuilder_.setMessage(value);
          }
        }
        typeInfoCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       */
      public Builder clearRowTypeInfo() {
        if (rowTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 3) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
            onChanged();
          }
        } else {
          if (typeInfoCase_ == 3) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
          }
          rowTypeInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Builder getRowTypeInfoBuilder() {
        return getRowTypeInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfoOrBuilder getRowTypeInfoOrBuilder() {
        if ((typeInfoCase_ == 3) && (rowTypeInfoBuilder_ != null)) {
          return rowTypeInfoBuilder_.getMessageOrBuilder();
        } else {
          if (typeInfoCase_ == 3) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.RowTypeInfo row_type_info = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfoOrBuilder> 
          getRowTypeInfoFieldBuilder() {
        if (rowTypeInfoBuilder_ == null) {
          if (!(typeInfoCase_ == 3)) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.getDefaultInstance();
          }
          rowTypeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfoOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.RowTypeInfo) typeInfo_,
                  getParentForChildren(),
                  isClean());
          typeInfo_ = null;
        }
        typeInfoCase_ = 3;
        onChanged();;
        return rowTypeInfoBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfoOrBuilder> tupleTypeInfoBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       * @return Whether the tupleTypeInfo field is set.
       */
      @java.lang.Override
      public boolean hasTupleTypeInfo() {
        return typeInfoCase_ == 4;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       * @return The tupleTypeInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo getTupleTypeInfo() {
        if (tupleTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 4) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance();
        } else {
          if (typeInfoCase_ == 4) {
            return tupleTypeInfoBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       */
      public Builder setTupleTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo value) {
        if (tupleTypeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeInfo_ = value;
          onChanged();
        } else {
          tupleTypeInfoBuilder_.setMessage(value);
        }
        typeInfoCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       */
      public Builder setTupleTypeInfo(
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.Builder builderForValue) {
        if (tupleTypeInfoBuilder_ == null) {
          typeInfo_ = builderForValue.build();
          onChanged();
        } else {
          tupleTypeInfoBuilder_.setMessage(builderForValue.build());
        }
        typeInfoCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       */
      public Builder mergeTupleTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo value) {
        if (tupleTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 4 &&
              typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance()) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) typeInfo_)
                .mergeFrom(value).buildPartial();
          } else {
            typeInfo_ = value;
          }
          onChanged();
        } else {
          if (typeInfoCase_ == 4) {
            tupleTypeInfoBuilder_.mergeFrom(value);
          } else {
            tupleTypeInfoBuilder_.setMessage(value);
          }
        }
        typeInfoCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       */
      public Builder clearTupleTypeInfo() {
        if (tupleTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 4) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
            onChanged();
          }
        } else {
          if (typeInfoCase_ == 4) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
          }
          tupleTypeInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.Builder getTupleTypeInfoBuilder() {
        return getTupleTypeInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfoOrBuilder getTupleTypeInfoOrBuilder() {
        if ((typeInfoCase_ == 4) && (tupleTypeInfoBuilder_ != null)) {
          return tupleTypeInfoBuilder_.getMessageOrBuilder();
        } else {
          if (typeInfoCase_ == 4) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.TupleTypeInfo tuple_type_info = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfoOrBuilder> 
          getTupleTypeInfoFieldBuilder() {
        if (tupleTypeInfoBuilder_ == null) {
          if (!(typeInfoCase_ == 4)) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.getDefaultInstance();
          }
          tupleTypeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfoOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.TupleTypeInfo) typeInfo_,
                  getParentForChildren(),
                  isClean());
          typeInfo_ = null;
        }
        typeInfoCase_ = 4;
        onChanged();;
        return tupleTypeInfoBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfoOrBuilder> mapTypeInfoBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       * @return Whether the mapTypeInfo field is set.
       */
      @java.lang.Override
      public boolean hasMapTypeInfo() {
        return typeInfoCase_ == 5;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       * @return The mapTypeInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo getMapTypeInfo() {
        if (mapTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 5) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance();
        } else {
          if (typeInfoCase_ == 5) {
            return mapTypeInfoBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       */
      public Builder setMapTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo value) {
        if (mapTypeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeInfo_ = value;
          onChanged();
        } else {
          mapTypeInfoBuilder_.setMessage(value);
        }
        typeInfoCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       */
      public Builder setMapTypeInfo(
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.Builder builderForValue) {
        if (mapTypeInfoBuilder_ == null) {
          typeInfo_ = builderForValue.build();
          onChanged();
        } else {
          mapTypeInfoBuilder_.setMessage(builderForValue.build());
        }
        typeInfoCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       */
      public Builder mergeMapTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo value) {
        if (mapTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 5 &&
              typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance()) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) typeInfo_)
                .mergeFrom(value).buildPartial();
          } else {
            typeInfo_ = value;
          }
          onChanged();
        } else {
          if (typeInfoCase_ == 5) {
            mapTypeInfoBuilder_.mergeFrom(value);
          } else {
            mapTypeInfoBuilder_.setMessage(value);
          }
        }
        typeInfoCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       */
      public Builder clearMapTypeInfo() {
        if (mapTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 5) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
            onChanged();
          }
        } else {
          if (typeInfoCase_ == 5) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
          }
          mapTypeInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.Builder getMapTypeInfoBuilder() {
        return getMapTypeInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfoOrBuilder getMapTypeInfoOrBuilder() {
        if ((typeInfoCase_ == 5) && (mapTypeInfoBuilder_ != null)) {
          return mapTypeInfoBuilder_.getMessageOrBuilder();
        } else {
          if (typeInfoCase_ == 5) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.MapTypeInfo map_type_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfoOrBuilder> 
          getMapTypeInfoFieldBuilder() {
        if (mapTypeInfoBuilder_ == null) {
          if (!(typeInfoCase_ == 5)) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.getDefaultInstance();
          }
          mapTypeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfoOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.MapTypeInfo) typeInfo_,
                  getParentForChildren(),
                  isClean());
          typeInfo_ = null;
        }
        typeInfoCase_ = 5;
        onChanged();;
        return mapTypeInfoBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfoOrBuilder> avroTypeInfoBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       * @return Whether the avroTypeInfo field is set.
       */
      @java.lang.Override
      public boolean hasAvroTypeInfo() {
        return typeInfoCase_ == 6;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       * @return The avroTypeInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo getAvroTypeInfo() {
        if (avroTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 6) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance();
        } else {
          if (typeInfoCase_ == 6) {
            return avroTypeInfoBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       */
      public Builder setAvroTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo value) {
        if (avroTypeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typeInfo_ = value;
          onChanged();
        } else {
          avroTypeInfoBuilder_.setMessage(value);
        }
        typeInfoCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       */
      public Builder setAvroTypeInfo(
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.Builder builderForValue) {
        if (avroTypeInfoBuilder_ == null) {
          typeInfo_ = builderForValue.build();
          onChanged();
        } else {
          avroTypeInfoBuilder_.setMessage(builderForValue.build());
        }
        typeInfoCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       */
      public Builder mergeAvroTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo value) {
        if (avroTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 6 &&
              typeInfo_ != org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance()) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) typeInfo_)
                .mergeFrom(value).buildPartial();
          } else {
            typeInfo_ = value;
          }
          onChanged();
        } else {
          if (typeInfoCase_ == 6) {
            avroTypeInfoBuilder_.mergeFrom(value);
          } else {
            avroTypeInfoBuilder_.setMessage(value);
          }
        }
        typeInfoCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       */
      public Builder clearAvroTypeInfo() {
        if (avroTypeInfoBuilder_ == null) {
          if (typeInfoCase_ == 6) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
            onChanged();
          }
        } else {
          if (typeInfoCase_ == 6) {
            typeInfoCase_ = 0;
            typeInfo_ = null;
          }
          avroTypeInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.Builder getAvroTypeInfoBuilder() {
        return getAvroTypeInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfoOrBuilder getAvroTypeInfoOrBuilder() {
        if ((typeInfoCase_ == 6) && (avroTypeInfoBuilder_ != null)) {
          return avroTypeInfoBuilder_.getMessageOrBuilder();
        } else {
          if (typeInfoCase_ == 6) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) typeInfo_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo.AvroTypeInfo avro_type_info = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfoOrBuilder> 
          getAvroTypeInfoFieldBuilder() {
        if (avroTypeInfoBuilder_ == null) {
          if (!(typeInfoCase_ == 6)) {
            typeInfo_ = org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.getDefaultInstance();
          }
          avroTypeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfoOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.AvroTypeInfo) typeInfo_,
                  getParentForChildren(),
                  isClean());
          typeInfo_ = null;
        }
        typeInfoCase_ = 6;
        onChanged();;
        return avroTypeInfoBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.TypeInfo)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.TypeInfo)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TypeInfo>
        PARSER = new com.google.protobuf.AbstractParser<TypeInfo>() {
      @java.lang.Override
      public TypeInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TypeInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TypeInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserDefinedDataStreamFunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
     * @return The enum numeric value on the wire for functionType.
     */
    int getFunctionTypeValue();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
     * @return The functionType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType getFunctionType();

    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     * @return Whether the runtimeContext field is set.
     */
    boolean hasRuntimeContext();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     * @return The runtimeContext.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getRuntimeContext();
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder getRuntimeContextOrBuilder();

    /**
     * <code>bytes payload = 3;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <code>bool metric_enabled = 4;</code>
     * @return The metricEnabled.
     */
    boolean getMetricEnabled();

    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     * @return Whether the keyTypeInfo field is set.
     */
    boolean hasKeyTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     * @return The keyTypeInfo.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyTypeInfo();
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeInfoOrBuilder();

    /**
     * <code>bool profile_enabled = 6;</code>
     * @return The profileEnabled.
     */
    boolean getProfileEnabled();

    /**
     * <code>bool has_side_output = 7;</code>
     * @return The hasSideOutput.
     */
    boolean getHasSideOutput();

    /**
     * <pre>
     * The state cache size.
     * </pre>
     *
     * <code>int32 state_cache_size = 8;</code>
     * @return The stateCacheSize.
     */
    int getStateCacheSize();

    /**
     * <pre>
     * The map state read cache size.
     * </pre>
     *
     * <code>int32 map_state_read_cache_size = 9;</code>
     * @return The mapStateReadCacheSize.
     */
    int getMapStateReadCacheSize();

    /**
     * <pre>
     * The map_state_write_cache_size.
     * </pre>
     *
     * <code>int32 map_state_write_cache_size = 10;</code>
     * @return The mapStateWriteCacheSize.
     */
    int getMapStateWriteCacheSize();
  }
  /**
   * <pre>
   * User defined DataStream function definition.
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction}
   */
  public static final class UserDefinedDataStreamFunction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
      UserDefinedDataStreamFunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDefinedDataStreamFunction.newBuilder() to construct.
    private UserDefinedDataStreamFunction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDefinedDataStreamFunction() {
      functionType_ = 0;
      payload_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserDefinedDataStreamFunction();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType}
     */
    public enum FunctionType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PROCESS = 0;</code>
       */
      PROCESS(0),
      /**
       * <code>CO_PROCESS = 1;</code>
       */
      CO_PROCESS(1),
      /**
       * <code>KEYED_PROCESS = 2;</code>
       */
      KEYED_PROCESS(2),
      /**
       * <code>KEYED_CO_PROCESS = 3;</code>
       */
      KEYED_CO_PROCESS(3),
      /**
       * <code>WINDOW = 4;</code>
       */
      WINDOW(4),
      /**
       * <code>CO_BROADCAST_PROCESS = 5;</code>
       */
      CO_BROADCAST_PROCESS(5),
      /**
       * <code>KEYED_CO_BROADCAST_PROCESS = 6;</code>
       */
      KEYED_CO_BROADCAST_PROCESS(6),
      /**
       * <code>REVISE_OUTPUT = 100;</code>
       */
      REVISE_OUTPUT(100),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>PROCESS = 0;</code>
       */
      public static final int PROCESS_VALUE = 0;
      /**
       * <code>CO_PROCESS = 1;</code>
       */
      public static final int CO_PROCESS_VALUE = 1;
      /**
       * <code>KEYED_PROCESS = 2;</code>
       */
      public static final int KEYED_PROCESS_VALUE = 2;
      /**
       * <code>KEYED_CO_PROCESS = 3;</code>
       */
      public static final int KEYED_CO_PROCESS_VALUE = 3;
      /**
       * <code>WINDOW = 4;</code>
       */
      public static final int WINDOW_VALUE = 4;
      /**
       * <code>CO_BROADCAST_PROCESS = 5;</code>
       */
      public static final int CO_BROADCAST_PROCESS_VALUE = 5;
      /**
       * <code>KEYED_CO_BROADCAST_PROCESS = 6;</code>
       */
      public static final int KEYED_CO_BROADCAST_PROCESS_VALUE = 6;
      /**
       * <code>REVISE_OUTPUT = 100;</code>
       */
      public static final int REVISE_OUTPUT_VALUE = 100;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FunctionType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static FunctionType forNumber(int value) {
        switch (value) {
          case 0: return PROCESS;
          case 1: return CO_PROCESS;
          case 2: return KEYED_PROCESS;
          case 3: return KEYED_CO_PROCESS;
          case 4: return WINDOW;
          case 5: return CO_BROADCAST_PROCESS;
          case 6: return KEYED_CO_BROADCAST_PROCESS;
          case 100: return REVISE_OUTPUT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FunctionType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FunctionType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FunctionType>() {
              public FunctionType findValueByNumber(int number) {
                return FunctionType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.getDescriptor().getEnumTypes().get(0);
      }

      private static final FunctionType[] VALUES = values();

      public static FunctionType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FunctionType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType)
    }

    public interface RuntimeContextOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string task_name = 1;</code>
       * @return The taskName.
       */
      java.lang.String getTaskName();
      /**
       * <code>string task_name = 1;</code>
       * @return The bytes for taskName.
       */
      com.google.protobuf.ByteString
          getTaskNameBytes();

      /**
       * <code>string task_name_with_subtasks = 2;</code>
       * @return The taskNameWithSubtasks.
       */
      java.lang.String getTaskNameWithSubtasks();
      /**
       * <code>string task_name_with_subtasks = 2;</code>
       * @return The bytes for taskNameWithSubtasks.
       */
      com.google.protobuf.ByteString
          getTaskNameWithSubtasksBytes();

      /**
       * <code>int32 number_of_parallel_subtasks = 3;</code>
       * @return The numberOfParallelSubtasks.
       */
      int getNumberOfParallelSubtasks();

      /**
       * <code>int32 max_number_of_parallel_subtasks = 4;</code>
       * @return The maxNumberOfParallelSubtasks.
       */
      int getMaxNumberOfParallelSubtasks();

      /**
       * <code>int32 index_of_this_subtask = 5;</code>
       * @return The indexOfThisSubtask.
       */
      int getIndexOfThisSubtask();

      /**
       * <code>int32 attempt_number = 6;</code>
       * @return The attemptNumber.
       */
      int getAttemptNumber();

      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> 
          getJobParametersList();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index);
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      int getJobParametersCount();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
          getJobParametersOrBuilderList();
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
          int index);

      /**
       * <code>bool in_batch_execution_mode = 8;</code>
       * @return The inBatchExecutionMode.
       */
      boolean getInBatchExecutionMode();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext}
     */
    public static final class RuntimeContext extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
        RuntimeContextOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RuntimeContext.newBuilder() to construct.
      private RuntimeContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RuntimeContext() {
        taskName_ = "";
        taskNameWithSubtasks_ = "";
        jobParameters_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RuntimeContext();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder.class);
      }

      public static final int TASK_NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object taskName_;
      /**
       * <code>string task_name = 1;</code>
       * @return The taskName.
       */
      @java.lang.Override
      public java.lang.String getTaskName() {
        java.lang.Object ref = taskName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          taskName_ = s;
          return s;
        }
      }
      /**
       * <code>string task_name = 1;</code>
       * @return The bytes for taskName.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTaskNameBytes() {
        java.lang.Object ref = taskName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          taskName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TASK_NAME_WITH_SUBTASKS_FIELD_NUMBER = 2;
      private volatile java.lang.Object taskNameWithSubtasks_;
      /**
       * <code>string task_name_with_subtasks = 2;</code>
       * @return The taskNameWithSubtasks.
       */
      @java.lang.Override
      public java.lang.String getTaskNameWithSubtasks() {
        java.lang.Object ref = taskNameWithSubtasks_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          taskNameWithSubtasks_ = s;
          return s;
        }
      }
      /**
       * <code>string task_name_with_subtasks = 2;</code>
       * @return The bytes for taskNameWithSubtasks.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTaskNameWithSubtasksBytes() {
        java.lang.Object ref = taskNameWithSubtasks_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          taskNameWithSubtasks_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int NUMBER_OF_PARALLEL_SUBTASKS_FIELD_NUMBER = 3;
      private int numberOfParallelSubtasks_;
      /**
       * <code>int32 number_of_parallel_subtasks = 3;</code>
       * @return The numberOfParallelSubtasks.
       */
      @java.lang.Override
      public int getNumberOfParallelSubtasks() {
        return numberOfParallelSubtasks_;
      }

      public static final int MAX_NUMBER_OF_PARALLEL_SUBTASKS_FIELD_NUMBER = 4;
      private int maxNumberOfParallelSubtasks_;
      /**
       * <code>int32 max_number_of_parallel_subtasks = 4;</code>
       * @return The maxNumberOfParallelSubtasks.
       */
      @java.lang.Override
      public int getMaxNumberOfParallelSubtasks() {
        return maxNumberOfParallelSubtasks_;
      }

      public static final int INDEX_OF_THIS_SUBTASK_FIELD_NUMBER = 5;
      private int indexOfThisSubtask_;
      /**
       * <code>int32 index_of_this_subtask = 5;</code>
       * @return The indexOfThisSubtask.
       */
      @java.lang.Override
      public int getIndexOfThisSubtask() {
        return indexOfThisSubtask_;
      }

      public static final int ATTEMPT_NUMBER_FIELD_NUMBER = 6;
      private int attemptNumber_;
      /**
       * <code>int32 attempt_number = 6;</code>
       * @return The attemptNumber.
       */
      @java.lang.Override
      public int getAttemptNumber() {
        return attemptNumber_;
      }

      public static final int JOB_PARAMETERS_FIELD_NUMBER = 7;
      private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> jobParameters_;
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      @java.lang.Override
      public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> getJobParametersList() {
        return jobParameters_;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      @java.lang.Override
      public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
          getJobParametersOrBuilderList() {
        return jobParameters_;
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      @java.lang.Override
      public int getJobParametersCount() {
        return jobParameters_.size();
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index) {
        return jobParameters_.get(index);
      }
      /**
       * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
          int index) {
        return jobParameters_.get(index);
      }

      public static final int IN_BATCH_EXECUTION_MODE_FIELD_NUMBER = 8;
      private boolean inBatchExecutionMode_;
      /**
       * <code>bool in_batch_execution_mode = 8;</code>
       * @return The inBatchExecutionMode.
       */
      @java.lang.Override
      public boolean getInBatchExecutionMode() {
        return inBatchExecutionMode_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(taskName_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, taskName_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(taskNameWithSubtasks_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, taskNameWithSubtasks_);
        }
        if (numberOfParallelSubtasks_ != 0) {
          output.writeInt32(3, numberOfParallelSubtasks_);
        }
        if (maxNumberOfParallelSubtasks_ != 0) {
          output.writeInt32(4, maxNumberOfParallelSubtasks_);
        }
        if (indexOfThisSubtask_ != 0) {
          output.writeInt32(5, indexOfThisSubtask_);
        }
        if (attemptNumber_ != 0) {
          output.writeInt32(6, attemptNumber_);
        }
        for (int i = 0; i < jobParameters_.size(); i++) {
          output.writeMessage(7, jobParameters_.get(i));
        }
        if (inBatchExecutionMode_ != false) {
          output.writeBool(8, inBatchExecutionMode_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(taskName_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, taskName_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(taskNameWithSubtasks_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, taskNameWithSubtasks_);
        }
        if (numberOfParallelSubtasks_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, numberOfParallelSubtasks_);
        }
        if (maxNumberOfParallelSubtasks_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, maxNumberOfParallelSubtasks_);
        }
        if (indexOfThisSubtask_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, indexOfThisSubtask_);
        }
        if (attemptNumber_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(6, attemptNumber_);
        }
        for (int i = 0; i < jobParameters_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, jobParameters_.get(i));
        }
        if (inBatchExecutionMode_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(8, inBatchExecutionMode_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext) obj;

        if (!getTaskName()
            .equals(other.getTaskName())) return false;
        if (!getTaskNameWithSubtasks()
            .equals(other.getTaskNameWithSubtasks())) return false;
        if (getNumberOfParallelSubtasks()
            != other.getNumberOfParallelSubtasks()) return false;
        if (getMaxNumberOfParallelSubtasks()
            != other.getMaxNumberOfParallelSubtasks()) return false;
        if (getIndexOfThisSubtask()
            != other.getIndexOfThisSubtask()) return false;
        if (getAttemptNumber()
            != other.getAttemptNumber()) return false;
        if (!getJobParametersList()
            .equals(other.getJobParametersList())) return false;
        if (getInBatchExecutionMode()
            != other.getInBatchExecutionMode()) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TASK_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getTaskName().hashCode();
        hash = (37 * hash) + TASK_NAME_WITH_SUBTASKS_FIELD_NUMBER;
        hash = (53 * hash) + getTaskNameWithSubtasks().hashCode();
        hash = (37 * hash) + NUMBER_OF_PARALLEL_SUBTASKS_FIELD_NUMBER;
        hash = (53 * hash) + getNumberOfParallelSubtasks();
        hash = (37 * hash) + MAX_NUMBER_OF_PARALLEL_SUBTASKS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxNumberOfParallelSubtasks();
        hash = (37 * hash) + INDEX_OF_THIS_SUBTASK_FIELD_NUMBER;
        hash = (53 * hash) + getIndexOfThisSubtask();
        hash = (37 * hash) + ATTEMPT_NUMBER_FIELD_NUMBER;
        hash = (53 * hash) + getAttemptNumber();
        if (getJobParametersCount() > 0) {
          hash = (37 * hash) + JOB_PARAMETERS_FIELD_NUMBER;
          hash = (53 * hash) + getJobParametersList().hashCode();
        }
        hash = (37 * hash) + IN_BATCH_EXECUTION_MODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getInBatchExecutionMode());
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          taskName_ = "";

          taskNameWithSubtasks_ = "";

          numberOfParallelSubtasks_ = 0;

          maxNumberOfParallelSubtasks_ = 0;

          indexOfThisSubtask_ = 0;

          attemptNumber_ = 0;

          if (jobParametersBuilder_ == null) {
            jobParameters_ = java.util.Collections.emptyList();
          } else {
            jobParameters_ = null;
            jobParametersBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          inBatchExecutionMode_ = false;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext(this);
          int from_bitField0_ = bitField0_;
          result.taskName_ = taskName_;
          result.taskNameWithSubtasks_ = taskNameWithSubtasks_;
          result.numberOfParallelSubtasks_ = numberOfParallelSubtasks_;
          result.maxNumberOfParallelSubtasks_ = maxNumberOfParallelSubtasks_;
          result.indexOfThisSubtask_ = indexOfThisSubtask_;
          result.attemptNumber_ = attemptNumber_;
          if (jobParametersBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              jobParameters_ = java.util.Collections.unmodifiableList(jobParameters_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.jobParameters_ = jobParameters_;
          } else {
            result.jobParameters_ = jobParametersBuilder_.build();
          }
          result.inBatchExecutionMode_ = inBatchExecutionMode_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance()) return this;
          if (!other.getTaskName().isEmpty()) {
            taskName_ = other.taskName_;
            onChanged();
          }
          if (!other.getTaskNameWithSubtasks().isEmpty()) {
            taskNameWithSubtasks_ = other.taskNameWithSubtasks_;
            onChanged();
          }
          if (other.getNumberOfParallelSubtasks() != 0) {
            setNumberOfParallelSubtasks(other.getNumberOfParallelSubtasks());
          }
          if (other.getMaxNumberOfParallelSubtasks() != 0) {
            setMaxNumberOfParallelSubtasks(other.getMaxNumberOfParallelSubtasks());
          }
          if (other.getIndexOfThisSubtask() != 0) {
            setIndexOfThisSubtask(other.getIndexOfThisSubtask());
          }
          if (other.getAttemptNumber() != 0) {
            setAttemptNumber(other.getAttemptNumber());
          }
          if (jobParametersBuilder_ == null) {
            if (!other.jobParameters_.isEmpty()) {
              if (jobParameters_.isEmpty()) {
                jobParameters_ = other.jobParameters_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureJobParametersIsMutable();
                jobParameters_.addAll(other.jobParameters_);
              }
              onChanged();
            }
          } else {
            if (!other.jobParameters_.isEmpty()) {
              if (jobParametersBuilder_.isEmpty()) {
                jobParametersBuilder_.dispose();
                jobParametersBuilder_ = null;
                jobParameters_ = other.jobParameters_;
                bitField0_ = (bitField0_ & ~0x00000001);
                jobParametersBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getJobParametersFieldBuilder() : null;
              } else {
                jobParametersBuilder_.addAllMessages(other.jobParameters_);
              }
            }
          }
          if (other.getInBatchExecutionMode() != false) {
            setInBatchExecutionMode(other.getInBatchExecutionMode());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  taskName_ = input.readStringRequireUtf8();

                  break;
                } // case 10
                case 18: {
                  taskNameWithSubtasks_ = input.readStringRequireUtf8();

                  break;
                } // case 18
                case 24: {
                  numberOfParallelSubtasks_ = input.readInt32();

                  break;
                } // case 24
                case 32: {
                  maxNumberOfParallelSubtasks_ = input.readInt32();

                  break;
                } // case 32
                case 40: {
                  indexOfThisSubtask_ = input.readInt32();

                  break;
                } // case 40
                case 48: {
                  attemptNumber_ = input.readInt32();

                  break;
                } // case 48
                case 58: {
                  org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter m =
                      input.readMessage(
                          org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.parser(),
                          extensionRegistry);
                  if (jobParametersBuilder_ == null) {
                    ensureJobParametersIsMutable();
                    jobParameters_.add(m);
                  } else {
                    jobParametersBuilder_.addMessage(m);
                  }
                  break;
                } // case 58
                case 64: {
                  inBatchExecutionMode_ = input.readBool();

                  break;
                } // case 64
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object taskName_ = "";
        /**
         * <code>string task_name = 1;</code>
         * @return The taskName.
         */
        public java.lang.String getTaskName() {
          java.lang.Object ref = taskName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            taskName_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string task_name = 1;</code>
         * @return The bytes for taskName.
         */
        public com.google.protobuf.ByteString
            getTaskNameBytes() {
          java.lang.Object ref = taskName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            taskName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string task_name = 1;</code>
         * @param value The taskName to set.
         * @return This builder for chaining.
         */
        public Builder setTaskName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          taskName_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string task_name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTaskName() {
          
          taskName_ = getDefaultInstance().getTaskName();
          onChanged();
          return this;
        }
        /**
         * <code>string task_name = 1;</code>
         * @param value The bytes for taskName to set.
         * @return This builder for chaining.
         */
        public Builder setTaskNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          taskName_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object taskNameWithSubtasks_ = "";
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @return The taskNameWithSubtasks.
         */
        public java.lang.String getTaskNameWithSubtasks() {
          java.lang.Object ref = taskNameWithSubtasks_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            taskNameWithSubtasks_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @return The bytes for taskNameWithSubtasks.
         */
        public com.google.protobuf.ByteString
            getTaskNameWithSubtasksBytes() {
          java.lang.Object ref = taskNameWithSubtasks_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            taskNameWithSubtasks_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @param value The taskNameWithSubtasks to set.
         * @return This builder for chaining.
         */
        public Builder setTaskNameWithSubtasks(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          taskNameWithSubtasks_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTaskNameWithSubtasks() {
          
          taskNameWithSubtasks_ = getDefaultInstance().getTaskNameWithSubtasks();
          onChanged();
          return this;
        }
        /**
         * <code>string task_name_with_subtasks = 2;</code>
         * @param value The bytes for taskNameWithSubtasks to set.
         * @return This builder for chaining.
         */
        public Builder setTaskNameWithSubtasksBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          taskNameWithSubtasks_ = value;
          onChanged();
          return this;
        }

        private int numberOfParallelSubtasks_ ;
        /**
         * <code>int32 number_of_parallel_subtasks = 3;</code>
         * @return The numberOfParallelSubtasks.
         */
        @java.lang.Override
        public int getNumberOfParallelSubtasks() {
          return numberOfParallelSubtasks_;
        }
        /**
         * <code>int32 number_of_parallel_subtasks = 3;</code>
         * @param value The numberOfParallelSubtasks to set.
         * @return This builder for chaining.
         */
        public Builder setNumberOfParallelSubtasks(int value) {
          
          numberOfParallelSubtasks_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 number_of_parallel_subtasks = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumberOfParallelSubtasks() {
          
          numberOfParallelSubtasks_ = 0;
          onChanged();
          return this;
        }

        private int maxNumberOfParallelSubtasks_ ;
        /**
         * <code>int32 max_number_of_parallel_subtasks = 4;</code>
         * @return The maxNumberOfParallelSubtasks.
         */
        @java.lang.Override
        public int getMaxNumberOfParallelSubtasks() {
          return maxNumberOfParallelSubtasks_;
        }
        /**
         * <code>int32 max_number_of_parallel_subtasks = 4;</code>
         * @param value The maxNumberOfParallelSubtasks to set.
         * @return This builder for chaining.
         */
        public Builder setMaxNumberOfParallelSubtasks(int value) {
          
          maxNumberOfParallelSubtasks_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 max_number_of_parallel_subtasks = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearMaxNumberOfParallelSubtasks() {
          
          maxNumberOfParallelSubtasks_ = 0;
          onChanged();
          return this;
        }

        private int indexOfThisSubtask_ ;
        /**
         * <code>int32 index_of_this_subtask = 5;</code>
         * @return The indexOfThisSubtask.
         */
        @java.lang.Override
        public int getIndexOfThisSubtask() {
          return indexOfThisSubtask_;
        }
        /**
         * <code>int32 index_of_this_subtask = 5;</code>
         * @param value The indexOfThisSubtask to set.
         * @return This builder for chaining.
         */
        public Builder setIndexOfThisSubtask(int value) {
          
          indexOfThisSubtask_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 index_of_this_subtask = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearIndexOfThisSubtask() {
          
          indexOfThisSubtask_ = 0;
          onChanged();
          return this;
        }

        private int attemptNumber_ ;
        /**
         * <code>int32 attempt_number = 6;</code>
         * @return The attemptNumber.
         */
        @java.lang.Override
        public int getAttemptNumber() {
          return attemptNumber_;
        }
        /**
         * <code>int32 attempt_number = 6;</code>
         * @param value The attemptNumber to set.
         * @return This builder for chaining.
         */
        public Builder setAttemptNumber(int value) {
          
          attemptNumber_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 attempt_number = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearAttemptNumber() {
          
          attemptNumber_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> jobParameters_ =
          java.util.Collections.emptyList();
        private void ensureJobParametersIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            jobParameters_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter>(jobParameters_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> jobParametersBuilder_;

        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> getJobParametersList() {
          if (jobParametersBuilder_ == null) {
            return java.util.Collections.unmodifiableList(jobParameters_);
          } else {
            return jobParametersBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public int getJobParametersCount() {
          if (jobParametersBuilder_ == null) {
            return jobParameters_.size();
          } else {
            return jobParametersBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter getJobParameters(int index) {
          if (jobParametersBuilder_ == null) {
            return jobParameters_.get(index);
          } else {
            return jobParametersBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder setJobParameters(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
          if (jobParametersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureJobParametersIsMutable();
            jobParameters_.set(index, value);
            onChanged();
          } else {
            jobParametersBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder setJobParameters(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            jobParameters_.set(index, builderForValue.build());
            onChanged();
          } else {
            jobParametersBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder addJobParameters(org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
          if (jobParametersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureJobParametersIsMutable();
            jobParameters_.add(value);
            onChanged();
          } else {
            jobParametersBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder addJobParameters(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter value) {
          if (jobParametersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureJobParametersIsMutable();
            jobParameters_.add(index, value);
            onChanged();
          } else {
            jobParametersBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder addJobParameters(
            org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            jobParameters_.add(builderForValue.build());
            onChanged();
          } else {
            jobParametersBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder addJobParameters(
            int index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder builderForValue) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            jobParameters_.add(index, builderForValue.build());
            onChanged();
          } else {
            jobParametersBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder addAllJobParameters(
            java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter> values) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, jobParameters_);
            onChanged();
          } else {
            jobParametersBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder clearJobParameters() {
          if (jobParametersBuilder_ == null) {
            jobParameters_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            jobParametersBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public Builder removeJobParameters(int index) {
          if (jobParametersBuilder_ == null) {
            ensureJobParametersIsMutable();
            jobParameters_.remove(index);
            onChanged();
          } else {
            jobParametersBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder getJobParametersBuilder(
            int index) {
          return getJobParametersFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder getJobParametersOrBuilder(
            int index) {
          if (jobParametersBuilder_ == null) {
            return jobParameters_.get(index);  } else {
            return jobParametersBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
             getJobParametersOrBuilderList() {
          if (jobParametersBuilder_ != null) {
            return jobParametersBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(jobParameters_);
          }
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder addJobParametersBuilder() {
          return getJobParametersFieldBuilder().addBuilder(
              org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.getDefaultInstance());
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder addJobParametersBuilder(
            int index) {
          return getJobParametersFieldBuilder().addBuilder(
              index, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.getDefaultInstance());
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.JobParameter job_parameters = 7;</code>
         */
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder> 
             getJobParametersBuilderList() {
          return getJobParametersFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder> 
            getJobParametersFieldBuilder() {
          if (jobParametersBuilder_ == null) {
            jobParametersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameter.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.JobParameterOrBuilder>(
                    jobParameters_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            jobParameters_ = null;
          }
          return jobParametersBuilder_;
        }

        private boolean inBatchExecutionMode_ ;
        /**
         * <code>bool in_batch_execution_mode = 8;</code>
         * @return The inBatchExecutionMode.
         */
        @java.lang.Override
        public boolean getInBatchExecutionMode() {
          return inBatchExecutionMode_;
        }
        /**
         * <code>bool in_batch_execution_mode = 8;</code>
         * @param value The inBatchExecutionMode to set.
         * @return This builder for chaining.
         */
        public Builder setInBatchExecutionMode(boolean value) {
          
          inBatchExecutionMode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool in_batch_execution_mode = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearInBatchExecutionMode() {
          
          inBatchExecutionMode_ = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RuntimeContext>
          PARSER = new com.google.protobuf.AbstractParser<RuntimeContext>() {
        @java.lang.Override
        public RuntimeContext parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<RuntimeContext> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RuntimeContext> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int FUNCTION_TYPE_FIELD_NUMBER = 1;
    private int functionType_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
     * @return The enum numeric value on the wire for functionType.
     */
    @java.lang.Override public int getFunctionTypeValue() {
      return functionType_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
     * @return The functionType.
     */
    @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType getFunctionType() {
      @SuppressWarnings("deprecation")
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType result = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.valueOf(functionType_);
      return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.UNRECOGNIZED : result;
    }

    public static final int RUNTIME_CONTEXT_FIELD_NUMBER = 2;
    private org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext runtimeContext_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     * @return Whether the runtimeContext field is set.
     */
    @java.lang.Override
    public boolean hasRuntimeContext() {
      return runtimeContext_ != null;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     * @return The runtimeContext.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getRuntimeContext() {
      return runtimeContext_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance() : runtimeContext_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder getRuntimeContextOrBuilder() {
      return getRuntimeContext();
    }

    public static final int PAYLOAD_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString payload_;
    /**
     * <code>bytes payload = 3;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int METRIC_ENABLED_FIELD_NUMBER = 4;
    private boolean metricEnabled_;
    /**
     * <code>bool metric_enabled = 4;</code>
     * @return The metricEnabled.
     */
    @java.lang.Override
    public boolean getMetricEnabled() {
      return metricEnabled_;
    }

    public static final int KEY_TYPE_INFO_FIELD_NUMBER = 5;
    private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo keyTypeInfo_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     * @return Whether the keyTypeInfo field is set.
     */
    @java.lang.Override
    public boolean hasKeyTypeInfo() {
      return keyTypeInfo_ != null;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     * @return The keyTypeInfo.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyTypeInfo() {
      return keyTypeInfo_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyTypeInfo_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeInfoOrBuilder() {
      return getKeyTypeInfo();
    }

    public static final int PROFILE_ENABLED_FIELD_NUMBER = 6;
    private boolean profileEnabled_;
    /**
     * <code>bool profile_enabled = 6;</code>
     * @return The profileEnabled.
     */
    @java.lang.Override
    public boolean getProfileEnabled() {
      return profileEnabled_;
    }

    public static final int HAS_SIDE_OUTPUT_FIELD_NUMBER = 7;
    private boolean hasSideOutput_;
    /**
     * <code>bool has_side_output = 7;</code>
     * @return The hasSideOutput.
     */
    @java.lang.Override
    public boolean getHasSideOutput() {
      return hasSideOutput_;
    }

    public static final int STATE_CACHE_SIZE_FIELD_NUMBER = 8;
    private int stateCacheSize_;
    /**
     * <pre>
     * The state cache size.
     * </pre>
     *
     * <code>int32 state_cache_size = 8;</code>
     * @return The stateCacheSize.
     */
    @java.lang.Override
    public int getStateCacheSize() {
      return stateCacheSize_;
    }

    public static final int MAP_STATE_READ_CACHE_SIZE_FIELD_NUMBER = 9;
    private int mapStateReadCacheSize_;
    /**
     * <pre>
     * The map state read cache size.
     * </pre>
     *
     * <code>int32 map_state_read_cache_size = 9;</code>
     * @return The mapStateReadCacheSize.
     */
    @java.lang.Override
    public int getMapStateReadCacheSize() {
      return mapStateReadCacheSize_;
    }

    public static final int MAP_STATE_WRITE_CACHE_SIZE_FIELD_NUMBER = 10;
    private int mapStateWriteCacheSize_;
    /**
     * <pre>
     * The map_state_write_cache_size.
     * </pre>
     *
     * <code>int32 map_state_write_cache_size = 10;</code>
     * @return The mapStateWriteCacheSize.
     */
    @java.lang.Override
    public int getMapStateWriteCacheSize() {
      return mapStateWriteCacheSize_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (functionType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.PROCESS.getNumber()) {
        output.writeEnum(1, functionType_);
      }
      if (runtimeContext_ != null) {
        output.writeMessage(2, getRuntimeContext());
      }
      if (!payload_.isEmpty()) {
        output.writeBytes(3, payload_);
      }
      if (metricEnabled_ != false) {
        output.writeBool(4, metricEnabled_);
      }
      if (keyTypeInfo_ != null) {
        output.writeMessage(5, getKeyTypeInfo());
      }
      if (profileEnabled_ != false) {
        output.writeBool(6, profileEnabled_);
      }
      if (hasSideOutput_ != false) {
        output.writeBool(7, hasSideOutput_);
      }
      if (stateCacheSize_ != 0) {
        output.writeInt32(8, stateCacheSize_);
      }
      if (mapStateReadCacheSize_ != 0) {
        output.writeInt32(9, mapStateReadCacheSize_);
      }
      if (mapStateWriteCacheSize_ != 0) {
        output.writeInt32(10, mapStateWriteCacheSize_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (functionType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.PROCESS.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, functionType_);
      }
      if (runtimeContext_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getRuntimeContext());
      }
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, payload_);
      }
      if (metricEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, metricEnabled_);
      }
      if (keyTypeInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getKeyTypeInfo());
      }
      if (profileEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, profileEnabled_);
      }
      if (hasSideOutput_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, hasSideOutput_);
      }
      if (stateCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, stateCacheSize_);
      }
      if (mapStateReadCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, mapStateReadCacheSize_);
      }
      if (mapStateWriteCacheSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, mapStateWriteCacheSize_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction other = (org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction) obj;

      if (functionType_ != other.functionType_) return false;
      if (hasRuntimeContext() != other.hasRuntimeContext()) return false;
      if (hasRuntimeContext()) {
        if (!getRuntimeContext()
            .equals(other.getRuntimeContext())) return false;
      }
      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (getMetricEnabled()
          != other.getMetricEnabled()) return false;
      if (hasKeyTypeInfo() != other.hasKeyTypeInfo()) return false;
      if (hasKeyTypeInfo()) {
        if (!getKeyTypeInfo()
            .equals(other.getKeyTypeInfo())) return false;
      }
      if (getProfileEnabled()
          != other.getProfileEnabled()) return false;
      if (getHasSideOutput()
          != other.getHasSideOutput()) return false;
      if (getStateCacheSize()
          != other.getStateCacheSize()) return false;
      if (getMapStateReadCacheSize()
          != other.getMapStateReadCacheSize()) return false;
      if (getMapStateWriteCacheSize()
          != other.getMapStateWriteCacheSize()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FUNCTION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + functionType_;
      if (hasRuntimeContext()) {
        hash = (37 * hash) + RUNTIME_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getRuntimeContext().hashCode();
      }
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      hash = (37 * hash) + METRIC_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getMetricEnabled());
      if (hasKeyTypeInfo()) {
        hash = (37 * hash) + KEY_TYPE_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getKeyTypeInfo().hashCode();
      }
      hash = (37 * hash) + PROFILE_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getProfileEnabled());
      hash = (37 * hash) + HAS_SIDE_OUTPUT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasSideOutput());
      hash = (37 * hash) + STATE_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getStateCacheSize();
      hash = (37 * hash) + MAP_STATE_READ_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getMapStateReadCacheSize();
      hash = (37 * hash) + MAP_STATE_WRITE_CACHE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getMapStateWriteCacheSize();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * User defined DataStream function definition.
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.class, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        functionType_ = 0;

        if (runtimeContextBuilder_ == null) {
          runtimeContext_ = null;
        } else {
          runtimeContext_ = null;
          runtimeContextBuilder_ = null;
        }
        payload_ = com.google.protobuf.ByteString.EMPTY;

        metricEnabled_ = false;

        if (keyTypeInfoBuilder_ == null) {
          keyTypeInfo_ = null;
        } else {
          keyTypeInfo_ = null;
          keyTypeInfoBuilder_ = null;
        }
        profileEnabled_ = false;

        hasSideOutput_ = false;

        stateCacheSize_ = 0;

        mapStateReadCacheSize_ = 0;

        mapStateWriteCacheSize_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction result = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction(this);
        result.functionType_ = functionType_;
        if (runtimeContextBuilder_ == null) {
          result.runtimeContext_ = runtimeContext_;
        } else {
          result.runtimeContext_ = runtimeContextBuilder_.build();
        }
        result.payload_ = payload_;
        result.metricEnabled_ = metricEnabled_;
        if (keyTypeInfoBuilder_ == null) {
          result.keyTypeInfo_ = keyTypeInfo_;
        } else {
          result.keyTypeInfo_ = keyTypeInfoBuilder_.build();
        }
        result.profileEnabled_ = profileEnabled_;
        result.hasSideOutput_ = hasSideOutput_;
        result.stateCacheSize_ = stateCacheSize_;
        result.mapStateReadCacheSize_ = mapStateReadCacheSize_;
        result.mapStateWriteCacheSize_ = mapStateWriteCacheSize_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.getDefaultInstance()) return this;
        if (other.functionType_ != 0) {
          setFunctionTypeValue(other.getFunctionTypeValue());
        }
        if (other.hasRuntimeContext()) {
          mergeRuntimeContext(other.getRuntimeContext());
        }
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        if (other.getMetricEnabled() != false) {
          setMetricEnabled(other.getMetricEnabled());
        }
        if (other.hasKeyTypeInfo()) {
          mergeKeyTypeInfo(other.getKeyTypeInfo());
        }
        if (other.getProfileEnabled() != false) {
          setProfileEnabled(other.getProfileEnabled());
        }
        if (other.getHasSideOutput() != false) {
          setHasSideOutput(other.getHasSideOutput());
        }
        if (other.getStateCacheSize() != 0) {
          setStateCacheSize(other.getStateCacheSize());
        }
        if (other.getMapStateReadCacheSize() != 0) {
          setMapStateReadCacheSize(other.getMapStateReadCacheSize());
        }
        if (other.getMapStateWriteCacheSize() != 0) {
          setMapStateWriteCacheSize(other.getMapStateWriteCacheSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                functionType_ = input.readEnum();

                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getRuntimeContextFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 18
              case 26: {
                payload_ = input.readBytes();

                break;
              } // case 26
              case 32: {
                metricEnabled_ = input.readBool();

                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getKeyTypeInfoFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 42
              case 48: {
                profileEnabled_ = input.readBool();

                break;
              } // case 48
              case 56: {
                hasSideOutput_ = input.readBool();

                break;
              } // case 56
              case 64: {
                stateCacheSize_ = input.readInt32();

                break;
              } // case 64
              case 72: {
                mapStateReadCacheSize_ = input.readInt32();

                break;
              } // case 72
              case 80: {
                mapStateWriteCacheSize_ = input.readInt32();

                break;
              } // case 80
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int functionType_ = 0;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @return The enum numeric value on the wire for functionType.
       */
      @java.lang.Override public int getFunctionTypeValue() {
        return functionType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @param value The enum numeric value on the wire for functionType to set.
       * @return This builder for chaining.
       */
      public Builder setFunctionTypeValue(int value) {
        
        functionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @return The functionType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType getFunctionType() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType result = org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.valueOf(functionType_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @param value The functionType to set.
       * @return This builder for chaining.
       */
      public Builder setFunctionType(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.FunctionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        functionType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.FunctionType function_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFunctionType() {
        
        functionType_ = 0;
        onChanged();
        return this;
      }

      private org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext runtimeContext_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder> runtimeContextBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       * @return Whether the runtimeContext field is set.
       */
      public boolean hasRuntimeContext() {
        return runtimeContextBuilder_ != null || runtimeContext_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       * @return The runtimeContext.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext getRuntimeContext() {
        if (runtimeContextBuilder_ == null) {
          return runtimeContext_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance() : runtimeContext_;
        } else {
          return runtimeContextBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public Builder setRuntimeContext(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext value) {
        if (runtimeContextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          runtimeContext_ = value;
          onChanged();
        } else {
          runtimeContextBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public Builder setRuntimeContext(
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder builderForValue) {
        if (runtimeContextBuilder_ == null) {
          runtimeContext_ = builderForValue.build();
          onChanged();
        } else {
          runtimeContextBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public Builder mergeRuntimeContext(org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext value) {
        if (runtimeContextBuilder_ == null) {
          if (runtimeContext_ != null) {
            runtimeContext_ =
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.newBuilder(runtimeContext_).mergeFrom(value).buildPartial();
          } else {
            runtimeContext_ = value;
          }
          onChanged();
        } else {
          runtimeContextBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public Builder clearRuntimeContext() {
        if (runtimeContextBuilder_ == null) {
          runtimeContext_ = null;
          onChanged();
        } else {
          runtimeContext_ = null;
          runtimeContextBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder getRuntimeContextBuilder() {
        
        onChanged();
        return getRuntimeContextFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder getRuntimeContextOrBuilder() {
        if (runtimeContextBuilder_ != null) {
          return runtimeContextBuilder_.getMessageOrBuilder();
        } else {
          return runtimeContext_ == null ?
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.getDefaultInstance() : runtimeContext_;
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction.RuntimeContext runtime_context = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder> 
          getRuntimeContextFieldBuilder() {
        if (runtimeContextBuilder_ == null) {
          runtimeContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContext.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction.RuntimeContextOrBuilder>(
                  getRuntimeContext(),
                  getParentForChildren(),
                  isClean());
          runtimeContext_ = null;
        }
        return runtimeContextBuilder_;
      }

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes payload = 3;</code>
       * @return The payload.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <code>bytes payload = 3;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes payload = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private boolean metricEnabled_ ;
      /**
       * <code>bool metric_enabled = 4;</code>
       * @return The metricEnabled.
       */
      @java.lang.Override
      public boolean getMetricEnabled() {
        return metricEnabled_;
      }
      /**
       * <code>bool metric_enabled = 4;</code>
       * @param value The metricEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setMetricEnabled(boolean value) {
        
        metricEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool metric_enabled = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetricEnabled() {
        
        metricEnabled_ = false;
        onChanged();
        return this;
      }

      private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo keyTypeInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> keyTypeInfoBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       * @return Whether the keyTypeInfo field is set.
       */
      public boolean hasKeyTypeInfo() {
        return keyTypeInfoBuilder_ != null || keyTypeInfo_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       * @return The keyTypeInfo.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getKeyTypeInfo() {
        if (keyTypeInfoBuilder_ == null) {
          return keyTypeInfo_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyTypeInfo_;
        } else {
          return keyTypeInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public Builder setKeyTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
        if (keyTypeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyTypeInfo_ = value;
          onChanged();
        } else {
          keyTypeInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public Builder setKeyTypeInfo(
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
        if (keyTypeInfoBuilder_ == null) {
          keyTypeInfo_ = builderForValue.build();
          onChanged();
        } else {
          keyTypeInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public Builder mergeKeyTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
        if (keyTypeInfoBuilder_ == null) {
          if (keyTypeInfo_ != null) {
            keyTypeInfo_ =
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder(keyTypeInfo_).mergeFrom(value).buildPartial();
          } else {
            keyTypeInfo_ = value;
          }
          onChanged();
        } else {
          keyTypeInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public Builder clearKeyTypeInfo() {
        if (keyTypeInfoBuilder_ == null) {
          keyTypeInfo_ = null;
          onChanged();
        } else {
          keyTypeInfo_ = null;
          keyTypeInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getKeyTypeInfoBuilder() {
        
        onChanged();
        return getKeyTypeInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getKeyTypeInfoOrBuilder() {
        if (keyTypeInfoBuilder_ != null) {
          return keyTypeInfoBuilder_.getMessageOrBuilder();
        } else {
          return keyTypeInfo_ == null ?
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : keyTypeInfo_;
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo key_type_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
          getKeyTypeInfoFieldBuilder() {
        if (keyTypeInfoBuilder_ == null) {
          keyTypeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                  getKeyTypeInfo(),
                  getParentForChildren(),
                  isClean());
          keyTypeInfo_ = null;
        }
        return keyTypeInfoBuilder_;
      }

      private boolean profileEnabled_ ;
      /**
       * <code>bool profile_enabled = 6;</code>
       * @return The profileEnabled.
       */
      @java.lang.Override
      public boolean getProfileEnabled() {
        return profileEnabled_;
      }
      /**
       * <code>bool profile_enabled = 6;</code>
       * @param value The profileEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setProfileEnabled(boolean value) {
        
        profileEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool profile_enabled = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearProfileEnabled() {
        
        profileEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean hasSideOutput_ ;
      /**
       * <code>bool has_side_output = 7;</code>
       * @return The hasSideOutput.
       */
      @java.lang.Override
      public boolean getHasSideOutput() {
        return hasSideOutput_;
      }
      /**
       * <code>bool has_side_output = 7;</code>
       * @param value The hasSideOutput to set.
       * @return This builder for chaining.
       */
      public Builder setHasSideOutput(boolean value) {
        
        hasSideOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool has_side_output = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasSideOutput() {
        
        hasSideOutput_ = false;
        onChanged();
        return this;
      }

      private int stateCacheSize_ ;
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @return The stateCacheSize.
       */
      @java.lang.Override
      public int getStateCacheSize() {
        return stateCacheSize_;
      }
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @param value The stateCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setStateCacheSize(int value) {
        
        stateCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The state cache size.
       * </pre>
       *
       * <code>int32 state_cache_size = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateCacheSize() {
        
        stateCacheSize_ = 0;
        onChanged();
        return this;
      }

      private int mapStateReadCacheSize_ ;
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @return The mapStateReadCacheSize.
       */
      @java.lang.Override
      public int getMapStateReadCacheSize() {
        return mapStateReadCacheSize_;
      }
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @param value The mapStateReadCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setMapStateReadCacheSize(int value) {
        
        mapStateReadCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The map state read cache size.
       * </pre>
       *
       * <code>int32 map_state_read_cache_size = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearMapStateReadCacheSize() {
        
        mapStateReadCacheSize_ = 0;
        onChanged();
        return this;
      }

      private int mapStateWriteCacheSize_ ;
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @return The mapStateWriteCacheSize.
       */
      @java.lang.Override
      public int getMapStateWriteCacheSize() {
        return mapStateWriteCacheSize_;
      }
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @param value The mapStateWriteCacheSize to set.
       * @return This builder for chaining.
       */
      public Builder setMapStateWriteCacheSize(int value) {
        
        mapStateWriteCacheSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The map_state_write_cache_size.
       * </pre>
       *
       * <code>int32 map_state_write_cache_size = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearMapStateWriteCacheSize() {
        
        mapStateWriteCacheSize_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.UserDefinedDataStreamFunction)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDefinedDataStreamFunction>
        PARSER = new com.google.protobuf.AbstractParser<UserDefinedDataStreamFunction>() {
      @java.lang.Override
      public UserDefinedDataStreamFunction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UserDefinedDataStreamFunction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDefinedDataStreamFunction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.UserDefinedDataStreamFunction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.StateDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string state_name = 1;</code>
     * @return The stateName.
     */
    java.lang.String getStateName();
    /**
     * <code>string state_name = 1;</code>
     * @return The bytes for stateName.
     */
    com.google.protobuf.ByteString
        getStateNameBytes();

    /**
     * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
     * @return Whether the stateTtlConfig field is set.
     */
    boolean hasStateTtlConfig();
    /**
     * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
     * @return The stateTtlConfig.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig getStateTtlConfig();
    /**
     * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfigOrBuilder getStateTtlConfigOrBuilder();
  }
  /**
   * <pre>
   * A representation of State
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor}
   */
  public static final class StateDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.StateDescriptor)
      StateDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateDescriptor.newBuilder() to construct.
    private StateDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateDescriptor() {
      stateName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.Builder.class);
    }

    public interface StateTTLConfigOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
       * @return The enum numeric value on the wire for updateType.
       */
      int getUpdateTypeValue();
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
       * @return The updateType.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType getUpdateType();

      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
       * @return The enum numeric value on the wire for stateVisibility.
       */
      int getStateVisibilityValue();
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
       * @return The stateVisibility.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility getStateVisibility();

      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
       * @return The enum numeric value on the wire for ttlTimeCharacteristic.
       */
      int getTtlTimeCharacteristicValue();
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
       * @return The ttlTimeCharacteristic.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic getTtlTimeCharacteristic();

      /**
       * <code>int64 ttl = 4;</code>
       * @return The ttl.
       */
      long getTtl();

      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
       * @return Whether the cleanupStrategies field is set.
       */
      boolean hasCleanupStrategies();
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
       * @return The cleanupStrategies.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies getCleanupStrategies();
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategiesOrBuilder getCleanupStrategiesOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig}
     */
    public static final class StateTTLConfig extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig)
        StateTTLConfigOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use StateTTLConfig.newBuilder() to construct.
      private StateTTLConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private StateTTLConfig() {
        updateType_ = 0;
        stateVisibility_ = 0;
        ttlTimeCharacteristic_ = 0;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new StateTTLConfig();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.Builder.class);
      }

      /**
       * <pre>
       * This option value configures when to update last access timestamp which prolongs state TTL.
       * </pre>
       *
       * Protobuf enum {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType}
       */
      public enum UpdateType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * TTL is disabled. State does not expire.
         * </pre>
         *
         * <code>Disabled = 0;</code>
         */
        Disabled(0),
        /**
         * <pre>
         * Last access timestamp is initialised when state is created and updated on every write operation.
         * </pre>
         *
         * <code>OnCreateAndWrite = 1;</code>
         */
        OnCreateAndWrite(1),
        /**
         * <pre>
         * The same as OnCreateAndWrite but also updated on read.
         * </pre>
         *
         * <code>OnReadAndWrite = 2;</code>
         */
        OnReadAndWrite(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <pre>
         * TTL is disabled. State does not expire.
         * </pre>
         *
         * <code>Disabled = 0;</code>
         */
        public static final int Disabled_VALUE = 0;
        /**
         * <pre>
         * Last access timestamp is initialised when state is created and updated on every write operation.
         * </pre>
         *
         * <code>OnCreateAndWrite = 1;</code>
         */
        public static final int OnCreateAndWrite_VALUE = 1;
        /**
         * <pre>
         * The same as OnCreateAndWrite but also updated on read.
         * </pre>
         *
         * <code>OnReadAndWrite = 2;</code>
         */
        public static final int OnReadAndWrite_VALUE = 2;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static UpdateType valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static UpdateType forNumber(int value) {
          switch (value) {
            case 0: return Disabled;
            case 1: return OnCreateAndWrite;
            case 2: return OnReadAndWrite;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<UpdateType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            UpdateType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<UpdateType>() {
                public UpdateType findValueByNumber(int number) {
                  return UpdateType.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException(
                "Can't get the descriptor of an unrecognized enum value.");
          }
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.getDescriptor().getEnumTypes().get(0);
        }

        private static final UpdateType[] VALUES = values();

        public static UpdateType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private UpdateType(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType)
      }

      /**
       * <pre>
       * This option configures whether expired user value can be returned or not.
       * </pre>
       *
       * Protobuf enum {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility}
       */
      public enum StateVisibility
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Return expired user value if it is not cleaned up yet.
         * </pre>
         *
         * <code>ReturnExpiredIfNotCleanedUp = 0;</code>
         */
        ReturnExpiredIfNotCleanedUp(0),
        /**
         * <pre>
         * Never return expired user value.
         * </pre>
         *
         * <code>NeverReturnExpired = 1;</code>
         */
        NeverReturnExpired(1),
        UNRECOGNIZED(-1),
        ;

        /**
         * <pre>
         * Return expired user value if it is not cleaned up yet.
         * </pre>
         *
         * <code>ReturnExpiredIfNotCleanedUp = 0;</code>
         */
        public static final int ReturnExpiredIfNotCleanedUp_VALUE = 0;
        /**
         * <pre>
         * Never return expired user value.
         * </pre>
         *
         * <code>NeverReturnExpired = 1;</code>
         */
        public static final int NeverReturnExpired_VALUE = 1;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static StateVisibility valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static StateVisibility forNumber(int value) {
          switch (value) {
            case 0: return ReturnExpiredIfNotCleanedUp;
            case 1: return NeverReturnExpired;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<StateVisibility>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            StateVisibility> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<StateVisibility>() {
                public StateVisibility findValueByNumber(int number) {
                  return StateVisibility.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException(
                "Can't get the descriptor of an unrecognized enum value.");
          }
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.getDescriptor().getEnumTypes().get(1);
        }

        private static final StateVisibility[] VALUES = values();

        public static StateVisibility valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private StateVisibility(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility)
      }

      /**
       * <pre>
       * This option configures time scale to use for ttl.
       * </pre>
       *
       * Protobuf enum {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic}
       */
      public enum TtlTimeCharacteristic
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Processing time
         * </pre>
         *
         * <code>ProcessingTime = 0;</code>
         */
        ProcessingTime(0),
        UNRECOGNIZED(-1),
        ;

        /**
         * <pre>
         * Processing time
         * </pre>
         *
         * <code>ProcessingTime = 0;</code>
         */
        public static final int ProcessingTime_VALUE = 0;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TtlTimeCharacteristic valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static TtlTimeCharacteristic forNumber(int value) {
          switch (value) {
            case 0: return ProcessingTime;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<TtlTimeCharacteristic>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            TtlTimeCharacteristic> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<TtlTimeCharacteristic>() {
                public TtlTimeCharacteristic findValueByNumber(int number) {
                  return TtlTimeCharacteristic.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException(
                "Can't get the descriptor of an unrecognized enum value.");
          }
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.getDescriptor().getEnumTypes().get(2);
        }

        private static final TtlTimeCharacteristic[] VALUES = values();

        public static TtlTimeCharacteristic valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private TtlTimeCharacteristic(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic)
      }

      public interface CleanupStrategiesOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>bool is_cleanup_in_background = 1;</code>
         * @return The isCleanupInBackground.
         */
        boolean getIsCleanupInBackground();

        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry> 
            getStrategiesList();
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry getStrategies(int index);
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        int getStrategiesCount();
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder> 
            getStrategiesOrBuilderList();
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder getStrategiesOrBuilder(
            int index);
      }
      /**
       * <pre>
       * TTL cleanup strategies.
       * </pre>
       *
       * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies}
       */
      public static final class CleanupStrategies extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies)
          CleanupStrategiesOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use CleanupStrategies.newBuilder() to construct.
        private CleanupStrategies(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private CleanupStrategies() {
          strategies_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new CleanupStrategies();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Builder.class);
        }

        /**
         * <pre>
         * Fixed strategies ordinals in strategies config field.
         * </pre>
         *
         * Protobuf enum {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies}
         */
        public enum Strategies
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <code>FULL_STATE_SCAN_SNAPSHOT = 0;</code>
           */
          FULL_STATE_SCAN_SNAPSHOT(0),
          /**
           * <code>INCREMENTAL_CLEANUP = 1;</code>
           */
          INCREMENTAL_CLEANUP(1),
          /**
           * <code>ROCKSDB_COMPACTION_FILTER = 2;</code>
           */
          ROCKSDB_COMPACTION_FILTER(2),
          UNRECOGNIZED(-1),
          ;

          /**
           * <code>FULL_STATE_SCAN_SNAPSHOT = 0;</code>
           */
          public static final int FULL_STATE_SCAN_SNAPSHOT_VALUE = 0;
          /**
           * <code>INCREMENTAL_CLEANUP = 1;</code>
           */
          public static final int INCREMENTAL_CLEANUP_VALUE = 1;
          /**
           * <code>ROCKSDB_COMPACTION_FILTER = 2;</code>
           */
          public static final int ROCKSDB_COMPACTION_FILTER_VALUE = 2;


          public final int getNumber() {
            if (this == UNRECOGNIZED) {
              throw new java.lang.IllegalArgumentException(
                  "Can't get the number of an unknown enum value.");
            }
            return value;
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static Strategies valueOf(int value) {
            return forNumber(value);
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           */
          public static Strategies forNumber(int value) {
            switch (value) {
              case 0: return FULL_STATE_SCAN_SNAPSHOT;
              case 1: return INCREMENTAL_CLEANUP;
              case 2: return ROCKSDB_COMPACTION_FILTER;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<Strategies>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              Strategies> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<Strategies>() {
                  public Strategies findValueByNumber(int number) {
                    return Strategies.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            if (this == UNRECOGNIZED) {
              throw new java.lang.IllegalStateException(
                  "Can't get the descriptor of an unrecognized enum value.");
            }
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.getDescriptor().getEnumTypes().get(0);
          }

          private static final Strategies[] VALUES = values();

          public static Strategies valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
              return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private Strategies(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies)
        }

        /**
         * Protobuf enum {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy}
         */
        public enum EmptyCleanupStrategy
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <code>EMPTY_STRATEGY = 0;</code>
           */
          EMPTY_STRATEGY(0),
          UNRECOGNIZED(-1),
          ;

          /**
           * <code>EMPTY_STRATEGY = 0;</code>
           */
          public static final int EMPTY_STRATEGY_VALUE = 0;


          public final int getNumber() {
            if (this == UNRECOGNIZED) {
              throw new java.lang.IllegalArgumentException(
                  "Can't get the number of an unknown enum value.");
            }
            return value;
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static EmptyCleanupStrategy valueOf(int value) {
            return forNumber(value);
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           */
          public static EmptyCleanupStrategy forNumber(int value) {
            switch (value) {
              case 0: return EMPTY_STRATEGY;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<EmptyCleanupStrategy>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              EmptyCleanupStrategy> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<EmptyCleanupStrategy>() {
                  public EmptyCleanupStrategy findValueByNumber(int number) {
                    return EmptyCleanupStrategy.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            if (this == UNRECOGNIZED) {
              throw new java.lang.IllegalStateException(
                  "Can't get the descriptor of an unrecognized enum value.");
            }
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.getDescriptor().getEnumTypes().get(1);
          }

          private static final EmptyCleanupStrategy[] VALUES = values();

          public static EmptyCleanupStrategy valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
              return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private EmptyCleanupStrategy(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy)
        }

        public interface IncrementalCleanupStrategyOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy)
            com.google.protobuf.MessageOrBuilder {

          /**
           * <pre>
           * Max number of keys pulled from queue for clean up upon state touch for any key.
           * </pre>
           *
           * <code>int32 cleanup_size = 1;</code>
           * @return The cleanupSize.
           */
          int getCleanupSize();

          /**
           * <pre>
           * Whether to run incremental cleanup per each processed record.
           * </pre>
           *
           * <code>bool run_cleanup_for_every_record = 2;</code>
           * @return The runCleanupForEveryRecord.
           */
          boolean getRunCleanupForEveryRecord();
        }
        /**
         * <pre>
         * Configuration of cleanup strategy while taking the full snapshot.
         * </pre>
         *
         * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy}
         */
        public static final class IncrementalCleanupStrategy extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy)
            IncrementalCleanupStrategyOrBuilder {
        private static final long serialVersionUID = 0L;
          // Use IncrementalCleanupStrategy.newBuilder() to construct.
          private IncrementalCleanupStrategy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
          }
          private IncrementalCleanupStrategy() {
          }

          @java.lang.Override
          @SuppressWarnings({"unused"})
          protected java.lang.Object newInstance(
              UnusedPrivateParameter unused) {
            return new IncrementalCleanupStrategy();
          }

          @java.lang.Override
          public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
            return this.unknownFields;
          }
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.Builder.class);
          }

          public static final int CLEANUP_SIZE_FIELD_NUMBER = 1;
          private int cleanupSize_;
          /**
           * <pre>
           * Max number of keys pulled from queue for clean up upon state touch for any key.
           * </pre>
           *
           * <code>int32 cleanup_size = 1;</code>
           * @return The cleanupSize.
           */
          @java.lang.Override
          public int getCleanupSize() {
            return cleanupSize_;
          }

          public static final int RUN_CLEANUP_FOR_EVERY_RECORD_FIELD_NUMBER = 2;
          private boolean runCleanupForEveryRecord_;
          /**
           * <pre>
           * Whether to run incremental cleanup per each processed record.
           * </pre>
           *
           * <code>bool run_cleanup_for_every_record = 2;</code>
           * @return The runCleanupForEveryRecord.
           */
          @java.lang.Override
          public boolean getRunCleanupForEveryRecord() {
            return runCleanupForEveryRecord_;
          }

          private byte memoizedIsInitialized = -1;
          @java.lang.Override
          public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
          }

          @java.lang.Override
          public void writeTo(com.google.protobuf.CodedOutputStream output)
                              throws java.io.IOException {
            if (cleanupSize_ != 0) {
              output.writeInt32(1, cleanupSize_);
            }
            if (runCleanupForEveryRecord_ != false) {
              output.writeBool(2, runCleanupForEveryRecord_);
            }
            getUnknownFields().writeTo(output);
          }

          @java.lang.Override
          public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (cleanupSize_ != 0) {
              size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(1, cleanupSize_);
            }
            if (runCleanupForEveryRecord_ != false) {
              size += com.google.protobuf.CodedOutputStream
                .computeBoolSize(2, runCleanupForEveryRecord_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSize = size;
            return size;
          }

          @java.lang.Override
          public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
             return true;
            }
            if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy)) {
              return super.equals(obj);
            }
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy other = (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) obj;

            if (getCleanupSize()
                != other.getCleanupSize()) return false;
            if (getRunCleanupForEveryRecord()
                != other.getRunCleanupForEveryRecord()) return false;
            if (!getUnknownFields().equals(other.getUnknownFields())) return false;
            return true;
          }

          @java.lang.Override
          public int hashCode() {
            if (memoizedHashCode != 0) {
              return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + CLEANUP_SIZE_FIELD_NUMBER;
            hash = (53 * hash) + getCleanupSize();
            hash = (37 * hash) + RUN_CLEANUP_FOR_EVERY_RECORD_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getRunCleanupForEveryRecord());
            hash = (29 * hash) + getUnknownFields().hashCode();
            memoizedHashCode = hash;
            return hash;
          }

          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }

          @java.lang.Override
          public Builder newBuilderForType() { return newBuilder(); }
          public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
          }
          public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
          }
          @java.lang.Override
          public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
          }

          @java.lang.Override
          protected Builder newBuilderForType(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
          }
          /**
           * <pre>
           * Configuration of cleanup strategy while taking the full snapshot.
           * </pre>
           *
           * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy}
           */
          public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy)
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategyOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.Builder.class);
            }

            // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.newBuilder()
            private Builder() {

            }

            private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);

            }
            @java.lang.Override
            public Builder clear() {
              super.clear();
              cleanupSize_ = 0;

              runCleanupForEveryRecord_ = false;

              return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_descriptor;
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy getDefaultInstanceForType() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance();
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy build() {
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy result = buildPartial();
              if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
              }
              return result;
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy buildPartial() {
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy result = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy(this);
              result.cleanupSize_ = cleanupSize_;
              result.runCleanupForEveryRecord_ = runCleanupForEveryRecord_;
              onBuilt();
              return result;
            }

            @java.lang.Override
            public Builder clone() {
              return super.clone();
            }
            @java.lang.Override
            public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
              return super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
              return super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
              return super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
              if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) {
                return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy)other);
              } else {
                super.mergeFrom(other);
                return this;
              }
            }

            public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy other) {
              if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance()) return this;
              if (other.getCleanupSize() != 0) {
                setCleanupSize(other.getCleanupSize());
              }
              if (other.getRunCleanupForEveryRecord() != false) {
                setRunCleanupForEveryRecord(other.getRunCleanupForEveryRecord());
              }
              this.mergeUnknownFields(other.getUnknownFields());
              onChanged();
              return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
              return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
              if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
              }
              try {
                boolean done = false;
                while (!done) {
                  int tag = input.readTag();
                  switch (tag) {
                    case 0:
                      done = true;
                      break;
                    case 8: {
                      cleanupSize_ = input.readInt32();

                      break;
                    } // case 8
                    case 16: {
                      runCleanupForEveryRecord_ = input.readBool();

                      break;
                    } // case 16
                    default: {
                      if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                        done = true; // was an endgroup tag
                      }
                      break;
                    } // default:
                  } // switch (tag)
                } // while (!done)
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.unwrapIOException();
              } finally {
                onChanged();
              } // finally
              return this;
            }

            private int cleanupSize_ ;
            /**
             * <pre>
             * Max number of keys pulled from queue for clean up upon state touch for any key.
             * </pre>
             *
             * <code>int32 cleanup_size = 1;</code>
             * @return The cleanupSize.
             */
            @java.lang.Override
            public int getCleanupSize() {
              return cleanupSize_;
            }
            /**
             * <pre>
             * Max number of keys pulled from queue for clean up upon state touch for any key.
             * </pre>
             *
             * <code>int32 cleanup_size = 1;</code>
             * @param value The cleanupSize to set.
             * @return This builder for chaining.
             */
            public Builder setCleanupSize(int value) {
              
              cleanupSize_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Max number of keys pulled from queue for clean up upon state touch for any key.
             * </pre>
             *
             * <code>int32 cleanup_size = 1;</code>
             * @return This builder for chaining.
             */
            public Builder clearCleanupSize() {
              
              cleanupSize_ = 0;
              onChanged();
              return this;
            }

            private boolean runCleanupForEveryRecord_ ;
            /**
             * <pre>
             * Whether to run incremental cleanup per each processed record.
             * </pre>
             *
             * <code>bool run_cleanup_for_every_record = 2;</code>
             * @return The runCleanupForEveryRecord.
             */
            @java.lang.Override
            public boolean getRunCleanupForEveryRecord() {
              return runCleanupForEveryRecord_;
            }
            /**
             * <pre>
             * Whether to run incremental cleanup per each processed record.
             * </pre>
             *
             * <code>bool run_cleanup_for_every_record = 2;</code>
             * @param value The runCleanupForEveryRecord to set.
             * @return This builder for chaining.
             */
            public Builder setRunCleanupForEveryRecord(boolean value) {
              
              runCleanupForEveryRecord_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Whether to run incremental cleanup per each processed record.
             * </pre>
             *
             * <code>bool run_cleanup_for_every_record = 2;</code>
             * @return This builder for chaining.
             */
            public Builder clearRunCleanupForEveryRecord() {
              
              runCleanupForEveryRecord_ = false;
              onChanged();
              return this;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy)
          }

          // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy)
          private static final org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy DEFAULT_INSTANCE;
          static {
            DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy();
          }

          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy getDefaultInstance() {
            return DEFAULT_INSTANCE;
          }

          private static final com.google.protobuf.Parser<IncrementalCleanupStrategy>
              PARSER = new com.google.protobuf.AbstractParser<IncrementalCleanupStrategy>() {
            @java.lang.Override
            public IncrementalCleanupStrategy parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

          public static com.google.protobuf.Parser<IncrementalCleanupStrategy> parser() {
            return PARSER;
          }

          @java.lang.Override
          public com.google.protobuf.Parser<IncrementalCleanupStrategy> getParserForType() {
            return PARSER;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
          }

        }

        public interface RocksdbCompactFilterCleanupStrategyOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy)
            com.google.protobuf.MessageOrBuilder {

          /**
           * <pre>
           * Number of state entries to process by compaction filter before updating current timestamp.
           * </pre>
           *
           * <code>int64 query_time_after_num_entries = 1;</code>
           * @return The queryTimeAfterNumEntries.
           */
          long getQueryTimeAfterNumEntries();
        }
        /**
         * <pre>
         * Configuration of cleanup strategy using custom compaction filter in RocksDB.
         * </pre>
         *
         * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy}
         */
        public static final class RocksdbCompactFilterCleanupStrategy extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy)
            RocksdbCompactFilterCleanupStrategyOrBuilder {
        private static final long serialVersionUID = 0L;
          // Use RocksdbCompactFilterCleanupStrategy.newBuilder() to construct.
          private RocksdbCompactFilterCleanupStrategy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
          }
          private RocksdbCompactFilterCleanupStrategy() {
          }

          @java.lang.Override
          @SuppressWarnings({"unused"})
          protected java.lang.Object newInstance(
              UnusedPrivateParameter unused) {
            return new RocksdbCompactFilterCleanupStrategy();
          }

          @java.lang.Override
          public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
            return this.unknownFields;
          }
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.Builder.class);
          }

          public static final int QUERY_TIME_AFTER_NUM_ENTRIES_FIELD_NUMBER = 1;
          private long queryTimeAfterNumEntries_;
          /**
           * <pre>
           * Number of state entries to process by compaction filter before updating current timestamp.
           * </pre>
           *
           * <code>int64 query_time_after_num_entries = 1;</code>
           * @return The queryTimeAfterNumEntries.
           */
          @java.lang.Override
          public long getQueryTimeAfterNumEntries() {
            return queryTimeAfterNumEntries_;
          }

          private byte memoizedIsInitialized = -1;
          @java.lang.Override
          public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
          }

          @java.lang.Override
          public void writeTo(com.google.protobuf.CodedOutputStream output)
                              throws java.io.IOException {
            if (queryTimeAfterNumEntries_ != 0L) {
              output.writeInt64(1, queryTimeAfterNumEntries_);
            }
            getUnknownFields().writeTo(output);
          }

          @java.lang.Override
          public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (queryTimeAfterNumEntries_ != 0L) {
              size += com.google.protobuf.CodedOutputStream
                .computeInt64Size(1, queryTimeAfterNumEntries_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSize = size;
            return size;
          }

          @java.lang.Override
          public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
             return true;
            }
            if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy)) {
              return super.equals(obj);
            }
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy other = (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) obj;

            if (getQueryTimeAfterNumEntries()
                != other.getQueryTimeAfterNumEntries()) return false;
            if (!getUnknownFields().equals(other.getUnknownFields())) return false;
            return true;
          }

          @java.lang.Override
          public int hashCode() {
            if (memoizedHashCode != 0) {
              return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + QUERY_TIME_AFTER_NUM_ENTRIES_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getQueryTimeAfterNumEntries());
            hash = (29 * hash) + getUnknownFields().hashCode();
            memoizedHashCode = hash;
            return hash;
          }

          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }

          @java.lang.Override
          public Builder newBuilderForType() { return newBuilder(); }
          public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
          }
          public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
          }
          @java.lang.Override
          public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
          }

          @java.lang.Override
          protected Builder newBuilderForType(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
          }
          /**
           * <pre>
           * Configuration of cleanup strategy using custom compaction filter in RocksDB.
           * </pre>
           *
           * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy}
           */
          public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy)
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategyOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.Builder.class);
            }

            // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.newBuilder()
            private Builder() {

            }

            private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);

            }
            @java.lang.Override
            public Builder clear() {
              super.clear();
              queryTimeAfterNumEntries_ = 0L;

              return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_descriptor;
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy getDefaultInstanceForType() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance();
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy build() {
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy result = buildPartial();
              if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
              }
              return result;
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy buildPartial() {
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy result = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy(this);
              result.queryTimeAfterNumEntries_ = queryTimeAfterNumEntries_;
              onBuilt();
              return result;
            }

            @java.lang.Override
            public Builder clone() {
              return super.clone();
            }
            @java.lang.Override
            public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
              return super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
              return super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
              return super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
              if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) {
                return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy)other);
              } else {
                super.mergeFrom(other);
                return this;
              }
            }

            public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy other) {
              if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance()) return this;
              if (other.getQueryTimeAfterNumEntries() != 0L) {
                setQueryTimeAfterNumEntries(other.getQueryTimeAfterNumEntries());
              }
              this.mergeUnknownFields(other.getUnknownFields());
              onChanged();
              return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
              return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
              if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
              }
              try {
                boolean done = false;
                while (!done) {
                  int tag = input.readTag();
                  switch (tag) {
                    case 0:
                      done = true;
                      break;
                    case 8: {
                      queryTimeAfterNumEntries_ = input.readInt64();

                      break;
                    } // case 8
                    default: {
                      if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                        done = true; // was an endgroup tag
                      }
                      break;
                    } // default:
                  } // switch (tag)
                } // while (!done)
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.unwrapIOException();
              } finally {
                onChanged();
              } // finally
              return this;
            }

            private long queryTimeAfterNumEntries_ ;
            /**
             * <pre>
             * Number of state entries to process by compaction filter before updating current timestamp.
             * </pre>
             *
             * <code>int64 query_time_after_num_entries = 1;</code>
             * @return The queryTimeAfterNumEntries.
             */
            @java.lang.Override
            public long getQueryTimeAfterNumEntries() {
              return queryTimeAfterNumEntries_;
            }
            /**
             * <pre>
             * Number of state entries to process by compaction filter before updating current timestamp.
             * </pre>
             *
             * <code>int64 query_time_after_num_entries = 1;</code>
             * @param value The queryTimeAfterNumEntries to set.
             * @return This builder for chaining.
             */
            public Builder setQueryTimeAfterNumEntries(long value) {
              
              queryTimeAfterNumEntries_ = value;
              onChanged();
              return this;
            }
            /**
             * <pre>
             * Number of state entries to process by compaction filter before updating current timestamp.
             * </pre>
             *
             * <code>int64 query_time_after_num_entries = 1;</code>
             * @return This builder for chaining.
             */
            public Builder clearQueryTimeAfterNumEntries() {
              
              queryTimeAfterNumEntries_ = 0L;
              onChanged();
              return this;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy)
          }

          // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy)
          private static final org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy DEFAULT_INSTANCE;
          static {
            DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy();
          }

          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy getDefaultInstance() {
            return DEFAULT_INSTANCE;
          }

          private static final com.google.protobuf.Parser<RocksdbCompactFilterCleanupStrategy>
              PARSER = new com.google.protobuf.AbstractParser<RocksdbCompactFilterCleanupStrategy>() {
            @java.lang.Override
            public RocksdbCompactFilterCleanupStrategy parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

          public static com.google.protobuf.Parser<RocksdbCompactFilterCleanupStrategy> parser() {
            return PARSER;
          }

          @java.lang.Override
          public com.google.protobuf.Parser<RocksdbCompactFilterCleanupStrategy> getParserForType() {
            return PARSER;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
          }

        }

        public interface MapStrategiesEntryOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry)
            com.google.protobuf.MessageOrBuilder {

          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
           * @return The enum numeric value on the wire for strategy.
           */
          int getStrategyValue();
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
           * @return The strategy.
           */
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies getStrategy();

          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
           * @return Whether the emptyStrategy field is set.
           */
          boolean hasEmptyStrategy();
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
           * @return The enum numeric value on the wire for emptyStrategy.
           */
          int getEmptyStrategyValue();
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
           * @return The emptyStrategy.
           */
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy getEmptyStrategy();

          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
           * @return Whether the incrementalCleanupStrategy field is set.
           */
          boolean hasIncrementalCleanupStrategy();
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
           * @return The incrementalCleanupStrategy.
           */
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy getIncrementalCleanupStrategy();
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
           */
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategyOrBuilder getIncrementalCleanupStrategyOrBuilder();

          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
           * @return Whether the rocksdbCompactFilterCleanupStrategy field is set.
           */
          boolean hasRocksdbCompactFilterCleanupStrategy();
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
           * @return The rocksdbCompactFilterCleanupStrategy.
           */
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy getRocksdbCompactFilterCleanupStrategy();
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
           */
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategyOrBuilder getRocksdbCompactFilterCleanupStrategyOrBuilder();

          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.CleanupStrategyCase getCleanupStrategyCase();
        }
        /**
         * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry}
         */
        public static final class MapStrategiesEntry extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry)
            MapStrategiesEntryOrBuilder {
        private static final long serialVersionUID = 0L;
          // Use MapStrategiesEntry.newBuilder() to construct.
          private MapStrategiesEntry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
          }
          private MapStrategiesEntry() {
            strategy_ = 0;
          }

          @java.lang.Override
          @SuppressWarnings({"unused"})
          protected java.lang.Object newInstance(
              UnusedPrivateParameter unused) {
            return new MapStrategiesEntry();
          }

          @java.lang.Override
          public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
            return this.unknownFields;
          }
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder.class);
          }

          private int cleanupStrategyCase_ = 0;
          private java.lang.Object cleanupStrategy_;
          public enum CleanupStrategyCase
              implements com.google.protobuf.Internal.EnumLite,
                  com.google.protobuf.AbstractMessage.InternalOneOfEnum {
            EMPTY_STRATEGY(2),
            INCREMENTAL_CLEANUP_STRATEGY(3),
            ROCKSDB_COMPACT_FILTER_CLEANUP_STRATEGY(4),
            CLEANUPSTRATEGY_NOT_SET(0);
            private final int value;
            private CleanupStrategyCase(int value) {
              this.value = value;
            }
            /**
             * @param value The number of the enum to look for.
             * @return The enum associated with the given number.
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static CleanupStrategyCase valueOf(int value) {
              return forNumber(value);
            }

            public static CleanupStrategyCase forNumber(int value) {
              switch (value) {
                case 2: return EMPTY_STRATEGY;
                case 3: return INCREMENTAL_CLEANUP_STRATEGY;
                case 4: return ROCKSDB_COMPACT_FILTER_CLEANUP_STRATEGY;
                case 0: return CLEANUPSTRATEGY_NOT_SET;
                default: return null;
              }
            }
            public int getNumber() {
              return this.value;
            }
          };

          public CleanupStrategyCase
          getCleanupStrategyCase() {
            return CleanupStrategyCase.forNumber(
                cleanupStrategyCase_);
          }

          public static final int STRATEGY_FIELD_NUMBER = 1;
          private int strategy_;
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
           * @return The enum numeric value on the wire for strategy.
           */
          @java.lang.Override public int getStrategyValue() {
            return strategy_;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
           * @return The strategy.
           */
          @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies getStrategy() {
            @SuppressWarnings("deprecation")
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies.valueOf(strategy_);
            return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies.UNRECOGNIZED : result;
          }

          public static final int EMPTY_STRATEGY_FIELD_NUMBER = 2;
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
           * @return Whether the emptyStrategy field is set.
           */
          public boolean hasEmptyStrategy() {
            return cleanupStrategyCase_ == 2;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
           * @return The enum numeric value on the wire for emptyStrategy.
           */
          public int getEmptyStrategyValue() {
            if (cleanupStrategyCase_ == 2) {
              return (java.lang.Integer) cleanupStrategy_;
            }
            return 0;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
           * @return The emptyStrategy.
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy getEmptyStrategy() {
            if (cleanupStrategyCase_ == 2) {
              @SuppressWarnings("deprecation")
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy.valueOf(
                  (java.lang.Integer) cleanupStrategy_);
              return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy.UNRECOGNIZED : result;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy.EMPTY_STRATEGY;
          }

          public static final int INCREMENTAL_CLEANUP_STRATEGY_FIELD_NUMBER = 3;
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
           * @return Whether the incrementalCleanupStrategy field is set.
           */
          @java.lang.Override
          public boolean hasIncrementalCleanupStrategy() {
            return cleanupStrategyCase_ == 3;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
           * @return The incrementalCleanupStrategy.
           */
          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy getIncrementalCleanupStrategy() {
            if (cleanupStrategyCase_ == 3) {
               return (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) cleanupStrategy_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
           */
          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategyOrBuilder getIncrementalCleanupStrategyOrBuilder() {
            if (cleanupStrategyCase_ == 3) {
               return (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) cleanupStrategy_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance();
          }

          public static final int ROCKSDB_COMPACT_FILTER_CLEANUP_STRATEGY_FIELD_NUMBER = 4;
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
           * @return Whether the rocksdbCompactFilterCleanupStrategy field is set.
           */
          @java.lang.Override
          public boolean hasRocksdbCompactFilterCleanupStrategy() {
            return cleanupStrategyCase_ == 4;
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
           * @return The rocksdbCompactFilterCleanupStrategy.
           */
          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy getRocksdbCompactFilterCleanupStrategy() {
            if (cleanupStrategyCase_ == 4) {
               return (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) cleanupStrategy_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance();
          }
          /**
           * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
           */
          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategyOrBuilder getRocksdbCompactFilterCleanupStrategyOrBuilder() {
            if (cleanupStrategyCase_ == 4) {
               return (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) cleanupStrategy_;
            }
            return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance();
          }

          private byte memoizedIsInitialized = -1;
          @java.lang.Override
          public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
          }

          @java.lang.Override
          public void writeTo(com.google.protobuf.CodedOutputStream output)
                              throws java.io.IOException {
            if (strategy_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies.FULL_STATE_SCAN_SNAPSHOT.getNumber()) {
              output.writeEnum(1, strategy_);
            }
            if (cleanupStrategyCase_ == 2) {
              output.writeEnum(2, ((java.lang.Integer) cleanupStrategy_));
            }
            if (cleanupStrategyCase_ == 3) {
              output.writeMessage(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) cleanupStrategy_);
            }
            if (cleanupStrategyCase_ == 4) {
              output.writeMessage(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) cleanupStrategy_);
            }
            getUnknownFields().writeTo(output);
          }

          @java.lang.Override
          public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (strategy_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies.FULL_STATE_SCAN_SNAPSHOT.getNumber()) {
              size += com.google.protobuf.CodedOutputStream
                .computeEnumSize(1, strategy_);
            }
            if (cleanupStrategyCase_ == 2) {
              size += com.google.protobuf.CodedOutputStream
                .computeEnumSize(2, ((java.lang.Integer) cleanupStrategy_));
            }
            if (cleanupStrategyCase_ == 3) {
              size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) cleanupStrategy_);
            }
            if (cleanupStrategyCase_ == 4) {
              size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) cleanupStrategy_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSize = size;
            return size;
          }

          @java.lang.Override
          public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
             return true;
            }
            if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry)) {
              return super.equals(obj);
            }
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry other = (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry) obj;

            if (strategy_ != other.strategy_) return false;
            if (!getCleanupStrategyCase().equals(other.getCleanupStrategyCase())) return false;
            switch (cleanupStrategyCase_) {
              case 2:
                if (getEmptyStrategyValue()
                    != other.getEmptyStrategyValue()) return false;
                break;
              case 3:
                if (!getIncrementalCleanupStrategy()
                    .equals(other.getIncrementalCleanupStrategy())) return false;
                break;
              case 4:
                if (!getRocksdbCompactFilterCleanupStrategy()
                    .equals(other.getRocksdbCompactFilterCleanupStrategy())) return false;
                break;
              case 0:
              default:
            }
            if (!getUnknownFields().equals(other.getUnknownFields())) return false;
            return true;
          }

          @java.lang.Override
          public int hashCode() {
            if (memoizedHashCode != 0) {
              return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + STRATEGY_FIELD_NUMBER;
            hash = (53 * hash) + strategy_;
            switch (cleanupStrategyCase_) {
              case 2:
                hash = (37 * hash) + EMPTY_STRATEGY_FIELD_NUMBER;
                hash = (53 * hash) + getEmptyStrategyValue();
                break;
              case 3:
                hash = (37 * hash) + INCREMENTAL_CLEANUP_STRATEGY_FIELD_NUMBER;
                hash = (53 * hash) + getIncrementalCleanupStrategy().hashCode();
                break;
              case 4:
                hash = (37 * hash) + ROCKSDB_COMPACT_FILTER_CLEANUP_STRATEGY_FIELD_NUMBER;
                hash = (53 * hash) + getRocksdbCompactFilterCleanupStrategy().hashCode();
                break;
              case 0:
              default:
            }
            hash = (29 * hash) + getUnknownFields().hashCode();
            memoizedHashCode = hash;
            return hash;
          }

          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
          }
          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
          }

          @java.lang.Override
          public Builder newBuilderForType() { return newBuilder(); }
          public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
          }
          public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
          }
          @java.lang.Override
          public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
          }

          @java.lang.Override
          protected Builder newBuilderForType(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
          }
          /**
           * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry}
           */
          public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry)
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder.class);
            }

            // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.newBuilder()
            private Builder() {

            }

            private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);

            }
            @java.lang.Override
            public Builder clear() {
              super.clear();
              strategy_ = 0;

              if (incrementalCleanupStrategyBuilder_ != null) {
                incrementalCleanupStrategyBuilder_.clear();
              }
              if (rocksdbCompactFilterCleanupStrategyBuilder_ != null) {
                rocksdbCompactFilterCleanupStrategyBuilder_.clear();
              }
              cleanupStrategyCase_ = 0;
              cleanupStrategy_ = null;
              return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_descriptor;
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry getDefaultInstanceForType() {
              return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.getDefaultInstance();
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry build() {
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry result = buildPartial();
              if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
              }
              return result;
            }

            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry buildPartial() {
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry result = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry(this);
              result.strategy_ = strategy_;
              if (cleanupStrategyCase_ == 2) {
                result.cleanupStrategy_ = cleanupStrategy_;
              }
              if (cleanupStrategyCase_ == 3) {
                if (incrementalCleanupStrategyBuilder_ == null) {
                  result.cleanupStrategy_ = cleanupStrategy_;
                } else {
                  result.cleanupStrategy_ = incrementalCleanupStrategyBuilder_.build();
                }
              }
              if (cleanupStrategyCase_ == 4) {
                if (rocksdbCompactFilterCleanupStrategyBuilder_ == null) {
                  result.cleanupStrategy_ = cleanupStrategy_;
                } else {
                  result.cleanupStrategy_ = rocksdbCompactFilterCleanupStrategyBuilder_.build();
                }
              }
              result.cleanupStrategyCase_ = cleanupStrategyCase_;
              onBuilt();
              return result;
            }

            @java.lang.Override
            public Builder clone() {
              return super.clone();
            }
            @java.lang.Override
            public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
              return super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
              return super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
              return super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
              return super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
              if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry) {
                return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry)other);
              } else {
                super.mergeFrom(other);
                return this;
              }
            }

            public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry other) {
              if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.getDefaultInstance()) return this;
              if (other.strategy_ != 0) {
                setStrategyValue(other.getStrategyValue());
              }
              switch (other.getCleanupStrategyCase()) {
                case EMPTY_STRATEGY: {
                  setEmptyStrategyValue(other.getEmptyStrategyValue());
                  break;
                }
                case INCREMENTAL_CLEANUP_STRATEGY: {
                  mergeIncrementalCleanupStrategy(other.getIncrementalCleanupStrategy());
                  break;
                }
                case ROCKSDB_COMPACT_FILTER_CLEANUP_STRATEGY: {
                  mergeRocksdbCompactFilterCleanupStrategy(other.getRocksdbCompactFilterCleanupStrategy());
                  break;
                }
                case CLEANUPSTRATEGY_NOT_SET: {
                  break;
                }
              }
              this.mergeUnknownFields(other.getUnknownFields());
              onChanged();
              return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
              return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
              if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
              }
              try {
                boolean done = false;
                while (!done) {
                  int tag = input.readTag();
                  switch (tag) {
                    case 0:
                      done = true;
                      break;
                    case 8: {
                      strategy_ = input.readEnum();

                      break;
                    } // case 8
                    case 16: {
                      int rawValue = input.readEnum();
                      cleanupStrategyCase_ = 2;
                      cleanupStrategy_ = rawValue;
                      break;
                    } // case 16
                    case 26: {
                      input.readMessage(
                          getIncrementalCleanupStrategyFieldBuilder().getBuilder(),
                          extensionRegistry);
                      cleanupStrategyCase_ = 3;
                      break;
                    } // case 26
                    case 34: {
                      input.readMessage(
                          getRocksdbCompactFilterCleanupStrategyFieldBuilder().getBuilder(),
                          extensionRegistry);
                      cleanupStrategyCase_ = 4;
                      break;
                    } // case 34
                    default: {
                      if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                        done = true; // was an endgroup tag
                      }
                      break;
                    } // default:
                  } // switch (tag)
                } // while (!done)
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.unwrapIOException();
              } finally {
                onChanged();
              } // finally
              return this;
            }
            private int cleanupStrategyCase_ = 0;
            private java.lang.Object cleanupStrategy_;
            public CleanupStrategyCase
                getCleanupStrategyCase() {
              return CleanupStrategyCase.forNumber(
                  cleanupStrategyCase_);
            }

            public Builder clearCleanupStrategy() {
              cleanupStrategyCase_ = 0;
              cleanupStrategy_ = null;
              onChanged();
              return this;
            }


            private int strategy_ = 0;
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
             * @return The enum numeric value on the wire for strategy.
             */
            @java.lang.Override public int getStrategyValue() {
              return strategy_;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
             * @param value The enum numeric value on the wire for strategy to set.
             * @return This builder for chaining.
             */
            public Builder setStrategyValue(int value) {
              
              strategy_ = value;
              onChanged();
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
             * @return The strategy.
             */
            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies getStrategy() {
              @SuppressWarnings("deprecation")
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies.valueOf(strategy_);
              return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies.UNRECOGNIZED : result;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
             * @param value The strategy to set.
             * @return This builder for chaining.
             */
            public Builder setStrategy(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies value) {
              if (value == null) {
                throw new NullPointerException();
              }
              
              strategy_ = value.getNumber();
              onChanged();
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.Strategies strategy = 1;</code>
             * @return This builder for chaining.
             */
            public Builder clearStrategy() {
              
              strategy_ = 0;
              onChanged();
              return this;
            }

            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
             * @return Whether the emptyStrategy field is set.
             */
            @java.lang.Override
            public boolean hasEmptyStrategy() {
              return cleanupStrategyCase_ == 2;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
             * @return The enum numeric value on the wire for emptyStrategy.
             */
            @java.lang.Override
            public int getEmptyStrategyValue() {
              if (cleanupStrategyCase_ == 2) {
                return ((java.lang.Integer) cleanupStrategy_).intValue();
              }
              return 0;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
             * @param value The enum numeric value on the wire for emptyStrategy to set.
             * @return This builder for chaining.
             */
            public Builder setEmptyStrategyValue(int value) {
              cleanupStrategyCase_ = 2;
              cleanupStrategy_ = value;
              onChanged();
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
             * @return The emptyStrategy.
             */
            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy getEmptyStrategy() {
              if (cleanupStrategyCase_ == 2) {
                @SuppressWarnings("deprecation")
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy.valueOf(
                    (java.lang.Integer) cleanupStrategy_);
                return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy.UNRECOGNIZED : result;
              }
              return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy.EMPTY_STRATEGY;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
             * @param value The emptyStrategy to set.
             * @return This builder for chaining.
             */
            public Builder setEmptyStrategy(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy value) {
              if (value == null) {
                throw new NullPointerException();
              }
              cleanupStrategyCase_ = 2;
              cleanupStrategy_ = value.getNumber();
              onChanged();
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.EmptyCleanupStrategy empty_strategy = 2;</code>
             * @return This builder for chaining.
             */
            public Builder clearEmptyStrategy() {
              if (cleanupStrategyCase_ == 2) {
                cleanupStrategyCase_ = 0;
                cleanupStrategy_ = null;
                onChanged();
              }
              return this;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategyOrBuilder> incrementalCleanupStrategyBuilder_;
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             * @return Whether the incrementalCleanupStrategy field is set.
             */
            @java.lang.Override
            public boolean hasIncrementalCleanupStrategy() {
              return cleanupStrategyCase_ == 3;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             * @return The incrementalCleanupStrategy.
             */
            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy getIncrementalCleanupStrategy() {
              if (incrementalCleanupStrategyBuilder_ == null) {
                if (cleanupStrategyCase_ == 3) {
                  return (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) cleanupStrategy_;
                }
                return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance();
              } else {
                if (cleanupStrategyCase_ == 3) {
                  return incrementalCleanupStrategyBuilder_.getMessage();
                }
                return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance();
              }
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             */
            public Builder setIncrementalCleanupStrategy(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy value) {
              if (incrementalCleanupStrategyBuilder_ == null) {
                if (value == null) {
                  throw new NullPointerException();
                }
                cleanupStrategy_ = value;
                onChanged();
              } else {
                incrementalCleanupStrategyBuilder_.setMessage(value);
              }
              cleanupStrategyCase_ = 3;
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             */
            public Builder setIncrementalCleanupStrategy(
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.Builder builderForValue) {
              if (incrementalCleanupStrategyBuilder_ == null) {
                cleanupStrategy_ = builderForValue.build();
                onChanged();
              } else {
                incrementalCleanupStrategyBuilder_.setMessage(builderForValue.build());
              }
              cleanupStrategyCase_ = 3;
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             */
            public Builder mergeIncrementalCleanupStrategy(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy value) {
              if (incrementalCleanupStrategyBuilder_ == null) {
                if (cleanupStrategyCase_ == 3 &&
                    cleanupStrategy_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance()) {
                  cleanupStrategy_ = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) cleanupStrategy_)
                      .mergeFrom(value).buildPartial();
                } else {
                  cleanupStrategy_ = value;
                }
                onChanged();
              } else {
                if (cleanupStrategyCase_ == 3) {
                  incrementalCleanupStrategyBuilder_.mergeFrom(value);
                } else {
                  incrementalCleanupStrategyBuilder_.setMessage(value);
                }
              }
              cleanupStrategyCase_ = 3;
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             */
            public Builder clearIncrementalCleanupStrategy() {
              if (incrementalCleanupStrategyBuilder_ == null) {
                if (cleanupStrategyCase_ == 3) {
                  cleanupStrategyCase_ = 0;
                  cleanupStrategy_ = null;
                  onChanged();
                }
              } else {
                if (cleanupStrategyCase_ == 3) {
                  cleanupStrategyCase_ = 0;
                  cleanupStrategy_ = null;
                }
                incrementalCleanupStrategyBuilder_.clear();
              }
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             */
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.Builder getIncrementalCleanupStrategyBuilder() {
              return getIncrementalCleanupStrategyFieldBuilder().getBuilder();
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             */
            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategyOrBuilder getIncrementalCleanupStrategyOrBuilder() {
              if ((cleanupStrategyCase_ == 3) && (incrementalCleanupStrategyBuilder_ != null)) {
                return incrementalCleanupStrategyBuilder_.getMessageOrBuilder();
              } else {
                if (cleanupStrategyCase_ == 3) {
                  return (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) cleanupStrategy_;
                }
                return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance();
              }
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy incremental_cleanup_strategy = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategyOrBuilder> 
                getIncrementalCleanupStrategyFieldBuilder() {
              if (incrementalCleanupStrategyBuilder_ == null) {
                if (!(cleanupStrategyCase_ == 3)) {
                  cleanupStrategy_ = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.getDefaultInstance();
                }
                incrementalCleanupStrategyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategyOrBuilder>(
                        (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.IncrementalCleanupStrategy) cleanupStrategy_,
                        getParentForChildren(),
                        isClean());
                cleanupStrategy_ = null;
              }
              cleanupStrategyCase_ = 3;
              onChanged();;
              return incrementalCleanupStrategyBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategyOrBuilder> rocksdbCompactFilterCleanupStrategyBuilder_;
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             * @return Whether the rocksdbCompactFilterCleanupStrategy field is set.
             */
            @java.lang.Override
            public boolean hasRocksdbCompactFilterCleanupStrategy() {
              return cleanupStrategyCase_ == 4;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             * @return The rocksdbCompactFilterCleanupStrategy.
             */
            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy getRocksdbCompactFilterCleanupStrategy() {
              if (rocksdbCompactFilterCleanupStrategyBuilder_ == null) {
                if (cleanupStrategyCase_ == 4) {
                  return (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) cleanupStrategy_;
                }
                return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance();
              } else {
                if (cleanupStrategyCase_ == 4) {
                  return rocksdbCompactFilterCleanupStrategyBuilder_.getMessage();
                }
                return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance();
              }
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             */
            public Builder setRocksdbCompactFilterCleanupStrategy(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy value) {
              if (rocksdbCompactFilterCleanupStrategyBuilder_ == null) {
                if (value == null) {
                  throw new NullPointerException();
                }
                cleanupStrategy_ = value;
                onChanged();
              } else {
                rocksdbCompactFilterCleanupStrategyBuilder_.setMessage(value);
              }
              cleanupStrategyCase_ = 4;
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             */
            public Builder setRocksdbCompactFilterCleanupStrategy(
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.Builder builderForValue) {
              if (rocksdbCompactFilterCleanupStrategyBuilder_ == null) {
                cleanupStrategy_ = builderForValue.build();
                onChanged();
              } else {
                rocksdbCompactFilterCleanupStrategyBuilder_.setMessage(builderForValue.build());
              }
              cleanupStrategyCase_ = 4;
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             */
            public Builder mergeRocksdbCompactFilterCleanupStrategy(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy value) {
              if (rocksdbCompactFilterCleanupStrategyBuilder_ == null) {
                if (cleanupStrategyCase_ == 4 &&
                    cleanupStrategy_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance()) {
                  cleanupStrategy_ = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) cleanupStrategy_)
                      .mergeFrom(value).buildPartial();
                } else {
                  cleanupStrategy_ = value;
                }
                onChanged();
              } else {
                if (cleanupStrategyCase_ == 4) {
                  rocksdbCompactFilterCleanupStrategyBuilder_.mergeFrom(value);
                } else {
                  rocksdbCompactFilterCleanupStrategyBuilder_.setMessage(value);
                }
              }
              cleanupStrategyCase_ = 4;
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             */
            public Builder clearRocksdbCompactFilterCleanupStrategy() {
              if (rocksdbCompactFilterCleanupStrategyBuilder_ == null) {
                if (cleanupStrategyCase_ == 4) {
                  cleanupStrategyCase_ = 0;
                  cleanupStrategy_ = null;
                  onChanged();
                }
              } else {
                if (cleanupStrategyCase_ == 4) {
                  cleanupStrategyCase_ = 0;
                  cleanupStrategy_ = null;
                }
                rocksdbCompactFilterCleanupStrategyBuilder_.clear();
              }
              return this;
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             */
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.Builder getRocksdbCompactFilterCleanupStrategyBuilder() {
              return getRocksdbCompactFilterCleanupStrategyFieldBuilder().getBuilder();
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             */
            @java.lang.Override
            public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategyOrBuilder getRocksdbCompactFilterCleanupStrategyOrBuilder() {
              if ((cleanupStrategyCase_ == 4) && (rocksdbCompactFilterCleanupStrategyBuilder_ != null)) {
                return rocksdbCompactFilterCleanupStrategyBuilder_.getMessageOrBuilder();
              } else {
                if (cleanupStrategyCase_ == 4) {
                  return (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) cleanupStrategy_;
                }
                return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance();
              }
            }
            /**
             * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy rocksdb_compact_filter_cleanup_strategy = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategyOrBuilder> 
                getRocksdbCompactFilterCleanupStrategyFieldBuilder() {
              if (rocksdbCompactFilterCleanupStrategyBuilder_ == null) {
                if (!(cleanupStrategyCase_ == 4)) {
                  cleanupStrategy_ = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.getDefaultInstance();
                }
                rocksdbCompactFilterCleanupStrategyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategyOrBuilder>(
                        (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.RocksdbCompactFilterCleanupStrategy) cleanupStrategy_,
                        getParentForChildren(),
                        isClean());
                cleanupStrategy_ = null;
              }
              cleanupStrategyCase_ = 4;
              onChanged();;
              return rocksdbCompactFilterCleanupStrategyBuilder_;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
              return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry)
          }

          // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry)
          private static final org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry DEFAULT_INSTANCE;
          static {
            DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry();
          }

          public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry getDefaultInstance() {
            return DEFAULT_INSTANCE;
          }

          private static final com.google.protobuf.Parser<MapStrategiesEntry>
              PARSER = new com.google.protobuf.AbstractParser<MapStrategiesEntry>() {
            @java.lang.Override
            public MapStrategiesEntry parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              Builder builder = newBuilder();
              try {
                builder.mergeFrom(input, extensionRegistry);
              } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
              } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
              } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                    .setUnfinishedMessage(builder.buildPartial());
              }
              return builder.buildPartial();
            }
          };

          public static com.google.protobuf.Parser<MapStrategiesEntry> parser() {
            return PARSER;
          }

          @java.lang.Override
          public com.google.protobuf.Parser<MapStrategiesEntry> getParserForType() {
            return PARSER;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
          }

        }

        public static final int IS_CLEANUP_IN_BACKGROUND_FIELD_NUMBER = 1;
        private boolean isCleanupInBackground_;
        /**
         * <code>bool is_cleanup_in_background = 1;</code>
         * @return The isCleanupInBackground.
         */
        @java.lang.Override
        public boolean getIsCleanupInBackground() {
          return isCleanupInBackground_;
        }

        public static final int STRATEGIES_FIELD_NUMBER = 2;
        private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry> strategies_;
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        @java.lang.Override
        public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry> getStrategiesList() {
          return strategies_;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        @java.lang.Override
        public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder> 
            getStrategiesOrBuilderList() {
          return strategies_;
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        @java.lang.Override
        public int getStrategiesCount() {
          return strategies_.size();
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry getStrategies(int index) {
          return strategies_.get(index);
        }
        /**
         * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder getStrategiesOrBuilder(
            int index) {
          return strategies_.get(index);
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (isCleanupInBackground_ != false) {
            output.writeBool(1, isCleanupInBackground_);
          }
          for (int i = 0; i < strategies_.size(); i++) {
            output.writeMessage(2, strategies_.get(i));
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (isCleanupInBackground_ != false) {
            size += com.google.protobuf.CodedOutputStream
              .computeBoolSize(1, isCleanupInBackground_);
          }
          for (int i = 0; i < strategies_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(2, strategies_.get(i));
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies)) {
            return super.equals(obj);
          }
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies other = (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies) obj;

          if (getIsCleanupInBackground()
              != other.getIsCleanupInBackground()) return false;
          if (!getStrategiesList()
              .equals(other.getStrategiesList())) return false;
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + IS_CLEANUP_IN_BACKGROUND_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getIsCleanupInBackground());
          if (getStrategiesCount() > 0) {
            hash = (37 * hash) + STRATEGIES_FIELD_NUMBER;
            hash = (53 * hash) + getStrategiesList().hashCode();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * TTL cleanup strategies.
         * </pre>
         *
         * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies)
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategiesOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Builder.class);
          }

          // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            isCleanupInBackground_ = false;

            if (strategiesBuilder_ == null) {
              strategies_ = java.util.Collections.emptyList();
            } else {
              strategies_ = null;
              strategiesBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000001);
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies getDefaultInstanceForType() {
            return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies build() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies buildPartial() {
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies result = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies(this);
            int from_bitField0_ = bitField0_;
            result.isCleanupInBackground_ = isCleanupInBackground_;
            if (strategiesBuilder_ == null) {
              if (((bitField0_ & 0x00000001) != 0)) {
                strategies_ = java.util.Collections.unmodifiableList(strategies_);
                bitField0_ = (bitField0_ & ~0x00000001);
              }
              result.strategies_ = strategies_;
            } else {
              result.strategies_ = strategiesBuilder_.build();
            }
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies) {
              return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies other) {
            if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.getDefaultInstance()) return this;
            if (other.getIsCleanupInBackground() != false) {
              setIsCleanupInBackground(other.getIsCleanupInBackground());
            }
            if (strategiesBuilder_ == null) {
              if (!other.strategies_.isEmpty()) {
                if (strategies_.isEmpty()) {
                  strategies_ = other.strategies_;
                  bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                  ensureStrategiesIsMutable();
                  strategies_.addAll(other.strategies_);
                }
                onChanged();
              }
            } else {
              if (!other.strategies_.isEmpty()) {
                if (strategiesBuilder_.isEmpty()) {
                  strategiesBuilder_.dispose();
                  strategiesBuilder_ = null;
                  strategies_ = other.strategies_;
                  bitField0_ = (bitField0_ & ~0x00000001);
                  strategiesBuilder_ = 
                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                       getStrategiesFieldBuilder() : null;
                } else {
                  strategiesBuilder_.addAllMessages(other.strategies_);
                }
              }
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 8: {
                    isCleanupInBackground_ = input.readBool();

                    break;
                  } // case 8
                  case 18: {
                    org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry m =
                        input.readMessage(
                            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.parser(),
                            extensionRegistry);
                    if (strategiesBuilder_ == null) {
                      ensureStrategiesIsMutable();
                      strategies_.add(m);
                    } else {
                      strategiesBuilder_.addMessage(m);
                    }
                    break;
                  } // case 18
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private boolean isCleanupInBackground_ ;
          /**
           * <code>bool is_cleanup_in_background = 1;</code>
           * @return The isCleanupInBackground.
           */
          @java.lang.Override
          public boolean getIsCleanupInBackground() {
            return isCleanupInBackground_;
          }
          /**
           * <code>bool is_cleanup_in_background = 1;</code>
           * @param value The isCleanupInBackground to set.
           * @return This builder for chaining.
           */
          public Builder setIsCleanupInBackground(boolean value) {
            
            isCleanupInBackground_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>bool is_cleanup_in_background = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearIsCleanupInBackground() {
            
            isCleanupInBackground_ = false;
            onChanged();
            return this;
          }

          private java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry> strategies_ =
            java.util.Collections.emptyList();
          private void ensureStrategiesIsMutable() {
            if (!((bitField0_ & 0x00000001) != 0)) {
              strategies_ = new java.util.ArrayList<org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry>(strategies_);
              bitField0_ |= 0x00000001;
             }
          }

          private com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder> strategiesBuilder_;

          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry> getStrategiesList() {
            if (strategiesBuilder_ == null) {
              return java.util.Collections.unmodifiableList(strategies_);
            } else {
              return strategiesBuilder_.getMessageList();
            }
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public int getStrategiesCount() {
            if (strategiesBuilder_ == null) {
              return strategies_.size();
            } else {
              return strategiesBuilder_.getCount();
            }
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry getStrategies(int index) {
            if (strategiesBuilder_ == null) {
              return strategies_.get(index);
            } else {
              return strategiesBuilder_.getMessage(index);
            }
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder setStrategies(
              int index, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry value) {
            if (strategiesBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureStrategiesIsMutable();
              strategies_.set(index, value);
              onChanged();
            } else {
              strategiesBuilder_.setMessage(index, value);
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder setStrategies(
              int index, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder builderForValue) {
            if (strategiesBuilder_ == null) {
              ensureStrategiesIsMutable();
              strategies_.set(index, builderForValue.build());
              onChanged();
            } else {
              strategiesBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder addStrategies(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry value) {
            if (strategiesBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureStrategiesIsMutable();
              strategies_.add(value);
              onChanged();
            } else {
              strategiesBuilder_.addMessage(value);
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder addStrategies(
              int index, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry value) {
            if (strategiesBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              ensureStrategiesIsMutable();
              strategies_.add(index, value);
              onChanged();
            } else {
              strategiesBuilder_.addMessage(index, value);
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder addStrategies(
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder builderForValue) {
            if (strategiesBuilder_ == null) {
              ensureStrategiesIsMutable();
              strategies_.add(builderForValue.build());
              onChanged();
            } else {
              strategiesBuilder_.addMessage(builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder addStrategies(
              int index, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder builderForValue) {
            if (strategiesBuilder_ == null) {
              ensureStrategiesIsMutable();
              strategies_.add(index, builderForValue.build());
              onChanged();
            } else {
              strategiesBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder addAllStrategies(
              java.lang.Iterable<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry> values) {
            if (strategiesBuilder_ == null) {
              ensureStrategiesIsMutable();
              com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, strategies_);
              onChanged();
            } else {
              strategiesBuilder_.addAllMessages(values);
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder clearStrategies() {
            if (strategiesBuilder_ == null) {
              strategies_ = java.util.Collections.emptyList();
              bitField0_ = (bitField0_ & ~0x00000001);
              onChanged();
            } else {
              strategiesBuilder_.clear();
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public Builder removeStrategies(int index) {
            if (strategiesBuilder_ == null) {
              ensureStrategiesIsMutable();
              strategies_.remove(index);
              onChanged();
            } else {
              strategiesBuilder_.remove(index);
            }
            return this;
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder getStrategiesBuilder(
              int index) {
            return getStrategiesFieldBuilder().getBuilder(index);
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder getStrategiesOrBuilder(
              int index) {
            if (strategiesBuilder_ == null) {
              return strategies_.get(index);  } else {
              return strategiesBuilder_.getMessageOrBuilder(index);
            }
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public java.util.List<? extends org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder> 
               getStrategiesOrBuilderList() {
            if (strategiesBuilder_ != null) {
              return strategiesBuilder_.getMessageOrBuilderList();
            } else {
              return java.util.Collections.unmodifiableList(strategies_);
            }
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder addStrategiesBuilder() {
            return getStrategiesFieldBuilder().addBuilder(
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.getDefaultInstance());
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder addStrategiesBuilder(
              int index) {
            return getStrategiesFieldBuilder().addBuilder(
                index, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.getDefaultInstance());
          }
          /**
           * <code>repeated .org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry strategies = 2;</code>
           */
          public java.util.List<org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder> 
               getStrategiesBuilderList() {
            return getStrategiesFieldBuilder().getBuilderList();
          }
          private com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder> 
              getStrategiesFieldBuilder() {
            if (strategiesBuilder_ == null) {
              strategiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntry.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.MapStrategiesEntryOrBuilder>(
                      strategies_,
                      ((bitField0_ & 0x00000001) != 0),
                      getParentForChildren(),
                      isClean());
              strategies_ = null;
            }
            return strategiesBuilder_;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies)
        }

        // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies)
        private static final org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies();
        }

        public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<CleanupStrategies>
            PARSER = new com.google.protobuf.AbstractParser<CleanupStrategies>() {
          @java.lang.Override
          public CleanupStrategies parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<CleanupStrategies> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<CleanupStrategies> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public static final int UPDATE_TYPE_FIELD_NUMBER = 1;
      private int updateType_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
       * @return The enum numeric value on the wire for updateType.
       */
      @java.lang.Override public int getUpdateTypeValue() {
        return updateType_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
       * @return The updateType.
       */
      @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType getUpdateType() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType.valueOf(updateType_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType.UNRECOGNIZED : result;
      }

      public static final int STATE_VISIBILITY_FIELD_NUMBER = 2;
      private int stateVisibility_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
       * @return The enum numeric value on the wire for stateVisibility.
       */
      @java.lang.Override public int getStateVisibilityValue() {
        return stateVisibility_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
       * @return The stateVisibility.
       */
      @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility getStateVisibility() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility.valueOf(stateVisibility_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility.UNRECOGNIZED : result;
      }

      public static final int TTL_TIME_CHARACTERISTIC_FIELD_NUMBER = 3;
      private int ttlTimeCharacteristic_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
       * @return The enum numeric value on the wire for ttlTimeCharacteristic.
       */
      @java.lang.Override public int getTtlTimeCharacteristicValue() {
        return ttlTimeCharacteristic_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
       * @return The ttlTimeCharacteristic.
       */
      @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic getTtlTimeCharacteristic() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic.valueOf(ttlTimeCharacteristic_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic.UNRECOGNIZED : result;
      }

      public static final int TTL_FIELD_NUMBER = 4;
      private long ttl_;
      /**
       * <code>int64 ttl = 4;</code>
       * @return The ttl.
       */
      @java.lang.Override
      public long getTtl() {
        return ttl_;
      }

      public static final int CLEANUP_STRATEGIES_FIELD_NUMBER = 5;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies cleanupStrategies_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
       * @return Whether the cleanupStrategies field is set.
       */
      @java.lang.Override
      public boolean hasCleanupStrategies() {
        return cleanupStrategies_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
       * @return The cleanupStrategies.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies getCleanupStrategies() {
        return cleanupStrategies_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.getDefaultInstance() : cleanupStrategies_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategiesOrBuilder getCleanupStrategiesOrBuilder() {
        return getCleanupStrategies();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (updateType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType.Disabled.getNumber()) {
          output.writeEnum(1, updateType_);
        }
        if (stateVisibility_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility.ReturnExpiredIfNotCleanedUp.getNumber()) {
          output.writeEnum(2, stateVisibility_);
        }
        if (ttlTimeCharacteristic_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic.ProcessingTime.getNumber()) {
          output.writeEnum(3, ttlTimeCharacteristic_);
        }
        if (ttl_ != 0L) {
          output.writeInt64(4, ttl_);
        }
        if (cleanupStrategies_ != null) {
          output.writeMessage(5, getCleanupStrategies());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (updateType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType.Disabled.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, updateType_);
        }
        if (stateVisibility_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility.ReturnExpiredIfNotCleanedUp.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, stateVisibility_);
        }
        if (ttlTimeCharacteristic_ != org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic.ProcessingTime.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, ttlTimeCharacteristic_);
        }
        if (ttl_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, ttl_);
        }
        if (cleanupStrategies_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getCleanupStrategies());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig other = (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig) obj;

        if (updateType_ != other.updateType_) return false;
        if (stateVisibility_ != other.stateVisibility_) return false;
        if (ttlTimeCharacteristic_ != other.ttlTimeCharacteristic_) return false;
        if (getTtl()
            != other.getTtl()) return false;
        if (hasCleanupStrategies() != other.hasCleanupStrategies()) return false;
        if (hasCleanupStrategies()) {
          if (!getCleanupStrategies()
              .equals(other.getCleanupStrategies())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + UPDATE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + updateType_;
        hash = (37 * hash) + STATE_VISIBILITY_FIELD_NUMBER;
        hash = (53 * hash) + stateVisibility_;
        hash = (37 * hash) + TTL_TIME_CHARACTERISTIC_FIELD_NUMBER;
        hash = (53 * hash) + ttlTimeCharacteristic_;
        hash = (37 * hash) + TTL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTtl());
        if (hasCleanupStrategies()) {
          hash = (37 * hash) + CLEANUP_STRATEGIES_FIELD_NUMBER;
          hash = (53 * hash) + getCleanupStrategies().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig)
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          updateType_ = 0;

          stateVisibility_ = 0;

          ttlTimeCharacteristic_ = 0;

          ttl_ = 0L;

          if (cleanupStrategiesBuilder_ == null) {
            cleanupStrategies_ = null;
          } else {
            cleanupStrategies_ = null;
            cleanupStrategiesBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig result = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig(this);
          result.updateType_ = updateType_;
          result.stateVisibility_ = stateVisibility_;
          result.ttlTimeCharacteristic_ = ttlTimeCharacteristic_;
          result.ttl_ = ttl_;
          if (cleanupStrategiesBuilder_ == null) {
            result.cleanupStrategies_ = cleanupStrategies_;
          } else {
            result.cleanupStrategies_ = cleanupStrategiesBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.getDefaultInstance()) return this;
          if (other.updateType_ != 0) {
            setUpdateTypeValue(other.getUpdateTypeValue());
          }
          if (other.stateVisibility_ != 0) {
            setStateVisibilityValue(other.getStateVisibilityValue());
          }
          if (other.ttlTimeCharacteristic_ != 0) {
            setTtlTimeCharacteristicValue(other.getTtlTimeCharacteristicValue());
          }
          if (other.getTtl() != 0L) {
            setTtl(other.getTtl());
          }
          if (other.hasCleanupStrategies()) {
            mergeCleanupStrategies(other.getCleanupStrategies());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  updateType_ = input.readEnum();

                  break;
                } // case 8
                case 16: {
                  stateVisibility_ = input.readEnum();

                  break;
                } // case 16
                case 24: {
                  ttlTimeCharacteristic_ = input.readEnum();

                  break;
                } // case 24
                case 32: {
                  ttl_ = input.readInt64();

                  break;
                } // case 32
                case 42: {
                  input.readMessage(
                      getCleanupStrategiesFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 42
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private int updateType_ = 0;
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
         * @return The enum numeric value on the wire for updateType.
         */
        @java.lang.Override public int getUpdateTypeValue() {
          return updateType_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
         * @param value The enum numeric value on the wire for updateType to set.
         * @return This builder for chaining.
         */
        public Builder setUpdateTypeValue(int value) {
          
          updateType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
         * @return The updateType.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType getUpdateType() {
          @SuppressWarnings("deprecation")
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType.valueOf(updateType_);
          return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType.UNRECOGNIZED : result;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
         * @param value The updateType to set.
         * @return This builder for chaining.
         */
        public Builder setUpdateType(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.UpdateType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          updateType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.UpdateType update_type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearUpdateType() {
          
          updateType_ = 0;
          onChanged();
          return this;
        }

        private int stateVisibility_ = 0;
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
         * @return The enum numeric value on the wire for stateVisibility.
         */
        @java.lang.Override public int getStateVisibilityValue() {
          return stateVisibility_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
         * @param value The enum numeric value on the wire for stateVisibility to set.
         * @return This builder for chaining.
         */
        public Builder setStateVisibilityValue(int value) {
          
          stateVisibility_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
         * @return The stateVisibility.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility getStateVisibility() {
          @SuppressWarnings("deprecation")
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility.valueOf(stateVisibility_);
          return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility.UNRECOGNIZED : result;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
         * @param value The stateVisibility to set.
         * @return This builder for chaining.
         */
        public Builder setStateVisibility(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.StateVisibility value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          stateVisibility_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.StateVisibility state_visibility = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearStateVisibility() {
          
          stateVisibility_ = 0;
          onChanged();
          return this;
        }

        private int ttlTimeCharacteristic_ = 0;
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
         * @return The enum numeric value on the wire for ttlTimeCharacteristic.
         */
        @java.lang.Override public int getTtlTimeCharacteristicValue() {
          return ttlTimeCharacteristic_;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
         * @param value The enum numeric value on the wire for ttlTimeCharacteristic to set.
         * @return This builder for chaining.
         */
        public Builder setTtlTimeCharacteristicValue(int value) {
          
          ttlTimeCharacteristic_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
         * @return The ttlTimeCharacteristic.
         */
        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic getTtlTimeCharacteristic() {
          @SuppressWarnings("deprecation")
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic result = org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic.valueOf(ttlTimeCharacteristic_);
          return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic.UNRECOGNIZED : result;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
         * @param value The ttlTimeCharacteristic to set.
         * @return This builder for chaining.
         */
        public Builder setTtlTimeCharacteristic(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          ttlTimeCharacteristic_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.TtlTimeCharacteristic ttl_time_characteristic = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTtlTimeCharacteristic() {
          
          ttlTimeCharacteristic_ = 0;
          onChanged();
          return this;
        }

        private long ttl_ ;
        /**
         * <code>int64 ttl = 4;</code>
         * @return The ttl.
         */
        @java.lang.Override
        public long getTtl() {
          return ttl_;
        }
        /**
         * <code>int64 ttl = 4;</code>
         * @param value The ttl to set.
         * @return This builder for chaining.
         */
        public Builder setTtl(long value) {
          
          ttl_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int64 ttl = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearTtl() {
          
          ttl_ = 0L;
          onChanged();
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies cleanupStrategies_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategiesOrBuilder> cleanupStrategiesBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         * @return Whether the cleanupStrategies field is set.
         */
        public boolean hasCleanupStrategies() {
          return cleanupStrategiesBuilder_ != null || cleanupStrategies_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         * @return The cleanupStrategies.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies getCleanupStrategies() {
          if (cleanupStrategiesBuilder_ == null) {
            return cleanupStrategies_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.getDefaultInstance() : cleanupStrategies_;
          } else {
            return cleanupStrategiesBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         */
        public Builder setCleanupStrategies(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies value) {
          if (cleanupStrategiesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            cleanupStrategies_ = value;
            onChanged();
          } else {
            cleanupStrategiesBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         */
        public Builder setCleanupStrategies(
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Builder builderForValue) {
          if (cleanupStrategiesBuilder_ == null) {
            cleanupStrategies_ = builderForValue.build();
            onChanged();
          } else {
            cleanupStrategiesBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         */
        public Builder mergeCleanupStrategies(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies value) {
          if (cleanupStrategiesBuilder_ == null) {
            if (cleanupStrategies_ != null) {
              cleanupStrategies_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.newBuilder(cleanupStrategies_).mergeFrom(value).buildPartial();
            } else {
              cleanupStrategies_ = value;
            }
            onChanged();
          } else {
            cleanupStrategiesBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         */
        public Builder clearCleanupStrategies() {
          if (cleanupStrategiesBuilder_ == null) {
            cleanupStrategies_ = null;
            onChanged();
          } else {
            cleanupStrategies_ = null;
            cleanupStrategiesBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Builder getCleanupStrategiesBuilder() {
          
          onChanged();
          return getCleanupStrategiesFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategiesOrBuilder getCleanupStrategiesOrBuilder() {
          if (cleanupStrategiesBuilder_ != null) {
            return cleanupStrategiesBuilder_.getMessageOrBuilder();
          } else {
            return cleanupStrategies_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.getDefaultInstance() : cleanupStrategies_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig.CleanupStrategies cleanup_strategies = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategiesOrBuilder> 
            getCleanupStrategiesFieldBuilder() {
          if (cleanupStrategiesBuilder_ == null) {
            cleanupStrategiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategies.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.CleanupStrategiesOrBuilder>(
                    getCleanupStrategies(),
                    getParentForChildren(),
                    isClean());
            cleanupStrategies_ = null;
          }
          return cleanupStrategiesBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<StateTTLConfig>
          PARSER = new com.google.protobuf.AbstractParser<StateTTLConfig>() {
        @java.lang.Override
        public StateTTLConfig parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<StateTTLConfig> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<StateTTLConfig> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int STATE_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object stateName_;
    /**
     * <code>string state_name = 1;</code>
     * @return The stateName.
     */
    @java.lang.Override
    public java.lang.String getStateName() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stateName_ = s;
        return s;
      }
    }
    /**
     * <code>string state_name = 1;</code>
     * @return The bytes for stateName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStateNameBytes() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stateName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATE_TTL_CONFIG_FIELD_NUMBER = 2;
    private org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig stateTtlConfig_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
     * @return Whether the stateTtlConfig field is set.
     */
    @java.lang.Override
    public boolean hasStateTtlConfig() {
      return stateTtlConfig_ != null;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
     * @return The stateTtlConfig.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig getStateTtlConfig() {
      return stateTtlConfig_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.getDefaultInstance() : stateTtlConfig_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfigOrBuilder getStateTtlConfigOrBuilder() {
      return getStateTtlConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stateName_);
      }
      if (stateTtlConfig_ != null) {
        output.writeMessage(2, getStateTtlConfig());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stateName_);
      }
      if (stateTtlConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getStateTtlConfig());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor other = (org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor) obj;

      if (!getStateName()
          .equals(other.getStateName())) return false;
      if (hasStateTtlConfig() != other.hasStateTtlConfig()) return false;
      if (hasStateTtlConfig()) {
        if (!getStateTtlConfig()
            .equals(other.getStateTtlConfig())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getStateName().hashCode();
      if (hasStateTtlConfig()) {
        hash = (37 * hash) + STATE_TTL_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getStateTtlConfig().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A representation of State
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.StateDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.StateDescriptor)
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.class, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        stateName_ = "";

        if (stateTtlConfigBuilder_ == null) {
          stateTtlConfig_ = null;
        } else {
          stateTtlConfig_ = null;
          stateTtlConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor result = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor(this);
        result.stateName_ = stateName_;
        if (stateTtlConfigBuilder_ == null) {
          result.stateTtlConfig_ = stateTtlConfig_;
        } else {
          result.stateTtlConfig_ = stateTtlConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.getDefaultInstance()) return this;
        if (!other.getStateName().isEmpty()) {
          stateName_ = other.stateName_;
          onChanged();
        }
        if (other.hasStateTtlConfig()) {
          mergeStateTtlConfig(other.getStateTtlConfig());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stateName_ = input.readStringRequireUtf8();

                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getStateTtlConfigFieldBuilder().getBuilder(),
                    extensionRegistry);

                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private java.lang.Object stateName_ = "";
      /**
       * <code>string state_name = 1;</code>
       * @return The stateName.
       */
      public java.lang.String getStateName() {
        java.lang.Object ref = stateName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stateName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string state_name = 1;</code>
       * @return The bytes for stateName.
       */
      public com.google.protobuf.ByteString
          getStateNameBytes() {
        java.lang.Object ref = stateName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stateName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string state_name = 1;</code>
       * @param value The stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stateName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string state_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateName() {
        
        stateName_ = getDefaultInstance().getStateName();
        onChanged();
        return this;
      }
      /**
       * <code>string state_name = 1;</code>
       * @param value The bytes for stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stateName_ = value;
        onChanged();
        return this;
      }

      private org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig stateTtlConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfigOrBuilder> stateTtlConfigBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       * @return Whether the stateTtlConfig field is set.
       */
      public boolean hasStateTtlConfig() {
        return stateTtlConfigBuilder_ != null || stateTtlConfig_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       * @return The stateTtlConfig.
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig getStateTtlConfig() {
        if (stateTtlConfigBuilder_ == null) {
          return stateTtlConfig_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.getDefaultInstance() : stateTtlConfig_;
        } else {
          return stateTtlConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       */
      public Builder setStateTtlConfig(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig value) {
        if (stateTtlConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stateTtlConfig_ = value;
          onChanged();
        } else {
          stateTtlConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       */
      public Builder setStateTtlConfig(
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.Builder builderForValue) {
        if (stateTtlConfigBuilder_ == null) {
          stateTtlConfig_ = builderForValue.build();
          onChanged();
        } else {
          stateTtlConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       */
      public Builder mergeStateTtlConfig(org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig value) {
        if (stateTtlConfigBuilder_ == null) {
          if (stateTtlConfig_ != null) {
            stateTtlConfig_ =
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.newBuilder(stateTtlConfig_).mergeFrom(value).buildPartial();
          } else {
            stateTtlConfig_ = value;
          }
          onChanged();
        } else {
          stateTtlConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       */
      public Builder clearStateTtlConfig() {
        if (stateTtlConfigBuilder_ == null) {
          stateTtlConfig_ = null;
          onChanged();
        } else {
          stateTtlConfig_ = null;
          stateTtlConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.Builder getStateTtlConfigBuilder() {
        
        onChanged();
        return getStateTtlConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfigOrBuilder getStateTtlConfigOrBuilder() {
        if (stateTtlConfigBuilder_ != null) {
          return stateTtlConfigBuilder_.getMessageOrBuilder();
        } else {
          return stateTtlConfig_ == null ?
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.getDefaultInstance() : stateTtlConfig_;
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.StateDescriptor.StateTTLConfig state_ttl_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfigOrBuilder> 
          getStateTtlConfigFieldBuilder() {
        if (stateTtlConfigBuilder_ == null) {
          stateTtlConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfig.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor.StateTTLConfigOrBuilder>(
                  getStateTtlConfig(),
                  getParentForChildren(),
                  isClean());
          stateTtlConfig_ = null;
        }
        return stateTtlConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.StateDescriptor)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.StateDescriptor)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<StateDescriptor>() {
      @java.lang.Override
      public StateDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StateDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.StateDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CoderInfoDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.CoderInfoDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * for Table &amp; SQL
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
     * @return Whether the flattenRowType field is set.
     */
    boolean hasFlattenRowType();
    /**
     * <pre>
     * for Table &amp; SQL
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
     * @return The flattenRowType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType getFlattenRowType();
    /**
     * <pre>
     * for Table &amp; SQL
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowTypeOrBuilder getFlattenRowTypeOrBuilder();

    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
     * @return Whether the rowType field is set.
     */
    boolean hasRowType();
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
     * @return The rowType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType getRowType();
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowTypeOrBuilder getRowTypeOrBuilder();

    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
     * @return Whether the arrowType field is set.
     */
    boolean hasArrowType();
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
     * @return The arrowType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType getArrowType();
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowTypeOrBuilder getArrowTypeOrBuilder();

    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
     * @return Whether the overWindowArrowType field is set.
     */
    boolean hasOverWindowArrowType();
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
     * @return The overWindowArrowType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType getOverWindowArrowType();
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowTypeOrBuilder getOverWindowArrowTypeOrBuilder();

    /**
     * <pre>
     * for DataStream
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
     * @return Whether the rawType field is set.
     */
    boolean hasRawType();
    /**
     * <pre>
     * for DataStream
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
     * @return The rawType.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType getRawType();
    /**
     * <pre>
     * for DataStream
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawTypeOrBuilder getRawTypeOrBuilder();

    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
     * @return The enum numeric value on the wire for mode.
     */
    int getModeValue();
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
     * @return The mode.
     */
    org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode getMode();

    /**
     * <pre>
     * append an end message (0x00) after serializing the records belonging to the same batch.
     * </pre>
     *
     * <code>bool separated_with_end_message = 7;</code>
     * @return The separatedWithEndMessage.
     */
    boolean getSeparatedWithEndMessage();

    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.DataTypeCase getDataTypeCase();
  }
  /**
   * <pre>
   * A representation of the coder
   * </pre>
   *
   * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor}
   */
  public static final class CoderInfoDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor)
      CoderInfoDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CoderInfoDescriptor.newBuilder() to construct.
    private CoderInfoDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CoderInfoDescriptor() {
      mode_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CoderInfoDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode}
     */
    public enum Mode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * process one record at a time
       * </pre>
       *
       * <code>SINGLE = 0;</code>
       */
      SINGLE(0),
      /**
       * <pre>
       * process multiple records at a time
       * </pre>
       *
       * <code>MULTIPLE = 1;</code>
       */
      MULTIPLE(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * process one record at a time
       * </pre>
       *
       * <code>SINGLE = 0;</code>
       */
      public static final int SINGLE_VALUE = 0;
      /**
       * <pre>
       * process multiple records at a time
       * </pre>
       *
       * <code>MULTIPLE = 1;</code>
       */
      public static final int MULTIPLE_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Mode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Mode forNumber(int value) {
        switch (value) {
          case 0: return SINGLE;
          case 1: return MULTIPLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Mode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Mode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Mode>() {
              public Mode findValueByNumber(int number) {
                return Mode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.getDescriptor().getEnumTypes().get(0);
      }

      private static final Mode[] VALUES = values();

      public static Mode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Mode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode)
    }

    public interface FlattenRowTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      boolean hasSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder();
    }
    /**
     * <pre>
     * for Table &amp; SQL
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType}
     */
    public static final class FlattenRowType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType)
        FlattenRowTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use FlattenRowType.newBuilder() to construct.
      private FlattenRowType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private FlattenRowType() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new FlattenRowType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.Builder.class);
      }

      public static final int SCHEMA_FIELD_NUMBER = 1;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema schema_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      @java.lang.Override
      public boolean hasSchema() {
        return schema_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema() {
        return schema_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder() {
        return getSchema();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (schema_ != null) {
          output.writeMessage(1, getSchema());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (schema_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getSchema());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType other = (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) obj;

        if (hasSchema() != other.hasSchema()) return false;
        if (hasSchema()) {
          if (!getSchema()
              .equals(other.getSchema())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasSchema()) {
          hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
          hash = (53 * hash) + getSchema().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType)
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (schemaBuilder_ == null) {
            schema_ = null;
          } else {
            schema_ = null;
            schemaBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType result = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType(this);
          if (schemaBuilder_ == null) {
            result.schema_ = schema_;
          } else {
            result.schema_ = schemaBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance()) return this;
          if (other.hasSchema()) {
            mergeSchema(other.getSchema());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getSchemaFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema schema_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> schemaBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         * @return Whether the schema field is set.
         */
        public boolean hasSchema() {
          return schemaBuilder_ != null || schema_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         * @return The schema.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema() {
          if (schemaBuilder_ == null) {
            return schema_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
          } else {
            return schemaBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder setSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (schemaBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            schema_ = value;
            onChanged();
          } else {
            schemaBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder setSchema(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder builderForValue) {
          if (schemaBuilder_ == null) {
            schema_ = builderForValue.build();
            onChanged();
          } else {
            schemaBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder mergeSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (schemaBuilder_ == null) {
            if (schema_ != null) {
              schema_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
            } else {
              schema_ = value;
            }
            onChanged();
          } else {
            schemaBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder clearSchema() {
          if (schemaBuilder_ == null) {
            schema_ = null;
            onChanged();
          } else {
            schema_ = null;
            schemaBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder getSchemaBuilder() {
          
          onChanged();
          return getSchemaFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder() {
          if (schemaBuilder_ != null) {
            return schemaBuilder_.getMessageOrBuilder();
          } else {
            return schema_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> 
            getSchemaFieldBuilder() {
          if (schemaBuilder_ == null) {
            schemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder>(
                    getSchema(),
                    getParentForChildren(),
                    isClean());
            schema_ = null;
          }
          return schemaBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<FlattenRowType>
          PARSER = new com.google.protobuf.AbstractParser<FlattenRowType>() {
        @java.lang.Override
        public FlattenRowType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<FlattenRowType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<FlattenRowType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RowTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      boolean hasSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType}
     */
    public static final class RowType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType)
        RowTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RowType.newBuilder() to construct.
      private RowType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RowType() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RowType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.Builder.class);
      }

      public static final int SCHEMA_FIELD_NUMBER = 1;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema schema_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      @java.lang.Override
      public boolean hasSchema() {
        return schema_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema() {
        return schema_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder() {
        return getSchema();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (schema_ != null) {
          output.writeMessage(1, getSchema());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (schema_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getSchema());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType other = (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) obj;

        if (hasSchema() != other.hasSchema()) return false;
        if (hasSchema()) {
          if (!getSchema()
              .equals(other.getSchema())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasSchema()) {
          hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
          hash = (53 * hash) + getSchema().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType)
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (schemaBuilder_ == null) {
            schema_ = null;
          } else {
            schema_ = null;
            schemaBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType result = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType(this);
          if (schemaBuilder_ == null) {
            result.schema_ = schema_;
          } else {
            result.schema_ = schemaBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance()) return this;
          if (other.hasSchema()) {
            mergeSchema(other.getSchema());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getSchemaFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema schema_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> schemaBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         * @return Whether the schema field is set.
         */
        public boolean hasSchema() {
          return schemaBuilder_ != null || schema_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         * @return The schema.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema() {
          if (schemaBuilder_ == null) {
            return schema_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
          } else {
            return schemaBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder setSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (schemaBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            schema_ = value;
            onChanged();
          } else {
            schemaBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder setSchema(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder builderForValue) {
          if (schemaBuilder_ == null) {
            schema_ = builderForValue.build();
            onChanged();
          } else {
            schemaBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder mergeSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (schemaBuilder_ == null) {
            if (schema_ != null) {
              schema_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
            } else {
              schema_ = value;
            }
            onChanged();
          } else {
            schemaBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder clearSchema() {
          if (schemaBuilder_ == null) {
            schema_ = null;
            onChanged();
          } else {
            schema_ = null;
            schemaBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder getSchemaBuilder() {
          
          onChanged();
          return getSchemaFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder() {
          if (schemaBuilder_ != null) {
            return schemaBuilder_.getMessageOrBuilder();
          } else {
            return schema_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> 
            getSchemaFieldBuilder() {
          if (schemaBuilder_ == null) {
            schemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder>(
                    getSchema(),
                    getParentForChildren(),
                    isClean());
            schema_ = null;
          }
          return schemaBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RowType>
          PARSER = new com.google.protobuf.AbstractParser<RowType>() {
        @java.lang.Override
        public RowType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<RowType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RowType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ArrowTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      boolean hasSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder();
    }
    /**
     * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType}
     */
    public static final class ArrowType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType)
        ArrowTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ArrowType.newBuilder() to construct.
      private ArrowType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ArrowType() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ArrowType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.Builder.class);
      }

      public static final int SCHEMA_FIELD_NUMBER = 1;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema schema_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      @java.lang.Override
      public boolean hasSchema() {
        return schema_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema() {
        return schema_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder() {
        return getSchema();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (schema_ != null) {
          output.writeMessage(1, getSchema());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (schema_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getSchema());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType other = (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) obj;

        if (hasSchema() != other.hasSchema()) return false;
        if (hasSchema()) {
          if (!getSchema()
              .equals(other.getSchema())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasSchema()) {
          hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
          hash = (53 * hash) + getSchema().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType)
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (schemaBuilder_ == null) {
            schema_ = null;
          } else {
            schema_ = null;
            schemaBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType result = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType(this);
          if (schemaBuilder_ == null) {
            result.schema_ = schema_;
          } else {
            result.schema_ = schemaBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance()) return this;
          if (other.hasSchema()) {
            mergeSchema(other.getSchema());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getSchemaFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema schema_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> schemaBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         * @return Whether the schema field is set.
         */
        public boolean hasSchema() {
          return schemaBuilder_ != null || schema_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         * @return The schema.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema() {
          if (schemaBuilder_ == null) {
            return schema_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
          } else {
            return schemaBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder setSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (schemaBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            schema_ = value;
            onChanged();
          } else {
            schemaBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder setSchema(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder builderForValue) {
          if (schemaBuilder_ == null) {
            schema_ = builderForValue.build();
            onChanged();
          } else {
            schemaBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder mergeSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (schemaBuilder_ == null) {
            if (schema_ != null) {
              schema_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
            } else {
              schema_ = value;
            }
            onChanged();
          } else {
            schemaBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder clearSchema() {
          if (schemaBuilder_ == null) {
            schema_ = null;
            onChanged();
          } else {
            schema_ = null;
            schemaBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder getSchemaBuilder() {
          
          onChanged();
          return getSchemaFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder() {
          if (schemaBuilder_ != null) {
            return schemaBuilder_.getMessageOrBuilder();
          } else {
            return schema_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> 
            getSchemaFieldBuilder() {
          if (schemaBuilder_ == null) {
            schemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder>(
                    getSchema(),
                    getParentForChildren(),
                    isClean());
            schema_ = null;
          }
          return schemaBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ArrowType>
          PARSER = new com.google.protobuf.AbstractParser<ArrowType>() {
        @java.lang.Override
        public ArrowType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ArrowType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ArrowType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface OverWindowArrowTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      boolean hasSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema();
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder();
    }
    /**
     * <pre>
     * only used in batch over window
     * the data consists of [window data][arrow data]
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType}
     */
    public static final class OverWindowArrowType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType)
        OverWindowArrowTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use OverWindowArrowType.newBuilder() to construct.
      private OverWindowArrowType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private OverWindowArrowType() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new OverWindowArrowType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.Builder.class);
      }

      public static final int SCHEMA_FIELD_NUMBER = 1;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema schema_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      @java.lang.Override
      public boolean hasSchema() {
        return schema_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema() {
        return schema_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder() {
        return getSchema();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (schema_ != null) {
          output.writeMessage(1, getSchema());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (schema_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getSchema());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType other = (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) obj;

        if (hasSchema() != other.hasSchema()) return false;
        if (hasSchema()) {
          if (!getSchema()
              .equals(other.getSchema())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasSchema()) {
          hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
          hash = (53 * hash) + getSchema().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * only used in batch over window
       * the data consists of [window data][arrow data]
       * </pre>
       *
       * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType)
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (schemaBuilder_ == null) {
            schema_ = null;
          } else {
            schema_ = null;
            schemaBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType result = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType(this);
          if (schemaBuilder_ == null) {
            result.schema_ = schema_;
          } else {
            result.schema_ = schemaBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance()) return this;
          if (other.hasSchema()) {
            mergeSchema(other.getSchema());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getSchemaFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.Schema schema_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> schemaBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         * @return Whether the schema field is set.
         */
        public boolean hasSchema() {
          return schemaBuilder_ != null || schema_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         * @return The schema.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema getSchema() {
          if (schemaBuilder_ == null) {
            return schema_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
          } else {
            return schemaBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder setSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (schemaBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            schema_ = value;
            onChanged();
          } else {
            schemaBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder setSchema(
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder builderForValue) {
          if (schemaBuilder_ == null) {
            schema_ = builderForValue.build();
            onChanged();
          } else {
            schemaBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder mergeSchema(org.apache.flink.fnexecution.v1.FlinkFnApi.Schema value) {
          if (schemaBuilder_ == null) {
            if (schema_ != null) {
              schema_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
            } else {
              schema_ = value;
            }
            onChanged();
          } else {
            schemaBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public Builder clearSchema() {
          if (schemaBuilder_ == null) {
            schema_ = null;
            onChanged();
          } else {
            schema_ = null;
            schemaBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder getSchemaBuilder() {
          
          onChanged();
          return getSchemaFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder getSchemaOrBuilder() {
          if (schemaBuilder_ != null) {
            return schemaBuilder_.getMessageOrBuilder();
          } else {
            return schema_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.getDefaultInstance() : schema_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.Schema schema = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder> 
            getSchemaFieldBuilder() {
          if (schemaBuilder_ == null) {
            schemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.Schema, org.apache.flink.fnexecution.v1.FlinkFnApi.Schema.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.SchemaOrBuilder>(
                    getSchema(),
                    getParentForChildren(),
                    isClean());
            schema_ = null;
          }
          return schemaBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<OverWindowArrowType>
          PARSER = new com.google.protobuf.AbstractParser<OverWindowArrowType>() {
        @java.lang.Override
        public OverWindowArrowType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<OverWindowArrowType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<OverWindowArrowType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RawTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
       * @return Whether the typeInfo field is set.
       */
      boolean hasTypeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
       * @return The typeInfo.
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getTypeInfo();
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
       */
      org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getTypeInfoOrBuilder();
    }
    /**
     * <pre>
     * for DataStream
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType}
     */
    public static final class RawType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType)
        RawTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RawType.newBuilder() to construct.
      private RawType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RawType() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new RawType();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.Builder.class);
      }

      public static final int TYPE_INFO_FIELD_NUMBER = 1;
      private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo typeInfo_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
       * @return Whether the typeInfo field is set.
       */
      @java.lang.Override
      public boolean hasTypeInfo() {
        return typeInfo_ != null;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
       * @return The typeInfo.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getTypeInfo() {
        return typeInfo_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : typeInfo_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getTypeInfoOrBuilder() {
        return getTypeInfo();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (typeInfo_ != null) {
          output.writeMessage(1, getTypeInfo());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (typeInfo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getTypeInfo());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType)) {
          return super.equals(obj);
        }
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType other = (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) obj;

        if (hasTypeInfo() != other.hasTypeInfo()) return false;
        if (hasTypeInfo()) {
          if (!getTypeInfo()
              .equals(other.getTypeInfo())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTypeInfo()) {
          hash = (37 * hash) + TYPE_INFO_FIELD_NUMBER;
          hash = (53 * hash) + getTypeInfo().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType)
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.Builder.class);
        }

        // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (typeInfoBuilder_ == null) {
            typeInfo_ = null;
          } else {
            typeInfo_ = null;
            typeInfoBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_descriptor;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType getDefaultInstanceForType() {
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType build() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType buildPartial() {
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType result = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType(this);
          if (typeInfoBuilder_ == null) {
            result.typeInfo_ = typeInfo_;
          } else {
            result.typeInfo_ = typeInfoBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) {
            return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType other) {
          if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance()) return this;
          if (other.hasTypeInfo()) {
            mergeTypeInfo(other.getTypeInfo());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getTypeInfoFieldBuilder().getBuilder(),
                      extensionRegistry);

                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }

        private org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo typeInfo_;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> typeInfoBuilder_;
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         * @return Whether the typeInfo field is set.
         */
        public boolean hasTypeInfo() {
          return typeInfoBuilder_ != null || typeInfo_ != null;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         * @return The typeInfo.
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo getTypeInfo() {
          if (typeInfoBuilder_ == null) {
            return typeInfo_ == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : typeInfo_;
          } else {
            return typeInfoBuilder_.getMessage();
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         */
        public Builder setTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (typeInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            typeInfo_ = value;
            onChanged();
          } else {
            typeInfoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         */
        public Builder setTypeInfo(
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder builderForValue) {
          if (typeInfoBuilder_ == null) {
            typeInfo_ = builderForValue.build();
            onChanged();
          } else {
            typeInfoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         */
        public Builder mergeTypeInfo(org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo value) {
          if (typeInfoBuilder_ == null) {
            if (typeInfo_ != null) {
              typeInfo_ =
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.newBuilder(typeInfo_).mergeFrom(value).buildPartial();
            } else {
              typeInfo_ = value;
            }
            onChanged();
          } else {
            typeInfoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         */
        public Builder clearTypeInfo() {
          if (typeInfoBuilder_ == null) {
            typeInfo_ = null;
            onChanged();
          } else {
            typeInfo_ = null;
            typeInfoBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder getTypeInfoBuilder() {
          
          onChanged();
          return getTypeInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         */
        public org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder getTypeInfoOrBuilder() {
          if (typeInfoBuilder_ != null) {
            return typeInfoBuilder_.getMessageOrBuilder();
          } else {
            return typeInfo_ == null ?
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.getDefaultInstance() : typeInfo_;
          }
        }
        /**
         * <code>.org.apache.flink.fn_execution.v1.TypeInfo type_info = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder> 
            getTypeInfoFieldBuilder() {
          if (typeInfoBuilder_ == null) {
            typeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfo.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.TypeInfoOrBuilder>(
                    getTypeInfo(),
                    getParentForChildren(),
                    isClean());
            typeInfo_ = null;
          }
          return typeInfoBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType)
      }

      // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType)
      private static final org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType();
      }

      public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<RawType>
          PARSER = new com.google.protobuf.AbstractParser<RawType>() {
        @java.lang.Override
        public RawType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<RawType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RawType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int dataTypeCase_ = 0;
    private java.lang.Object dataType_;
    public enum DataTypeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      FLATTEN_ROW_TYPE(1),
      ROW_TYPE(2),
      ARROW_TYPE(3),
      OVER_WINDOW_ARROW_TYPE(4),
      RAW_TYPE(5),
      DATATYPE_NOT_SET(0);
      private final int value;
      private DataTypeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DataTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static DataTypeCase forNumber(int value) {
        switch (value) {
          case 1: return FLATTEN_ROW_TYPE;
          case 2: return ROW_TYPE;
          case 3: return ARROW_TYPE;
          case 4: return OVER_WINDOW_ARROW_TYPE;
          case 5: return RAW_TYPE;
          case 0: return DATATYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public DataTypeCase
    getDataTypeCase() {
      return DataTypeCase.forNumber(
          dataTypeCase_);
    }

    public static final int FLATTEN_ROW_TYPE_FIELD_NUMBER = 1;
    /**
     * <pre>
     * for Table &amp; SQL
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
     * @return Whether the flattenRowType field is set.
     */
    @java.lang.Override
    public boolean hasFlattenRowType() {
      return dataTypeCase_ == 1;
    }
    /**
     * <pre>
     * for Table &amp; SQL
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
     * @return The flattenRowType.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType getFlattenRowType() {
      if (dataTypeCase_ == 1) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance();
    }
    /**
     * <pre>
     * for Table &amp; SQL
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowTypeOrBuilder getFlattenRowTypeOrBuilder() {
      if (dataTypeCase_ == 1) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance();
    }

    public static final int ROW_TYPE_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
     * @return Whether the rowType field is set.
     */
    @java.lang.Override
    public boolean hasRowType() {
      return dataTypeCase_ == 2;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
     * @return The rowType.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType getRowType() {
      if (dataTypeCase_ == 2) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowTypeOrBuilder getRowTypeOrBuilder() {
      if (dataTypeCase_ == 2) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance();
    }

    public static final int ARROW_TYPE_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
     * @return Whether the arrowType field is set.
     */
    @java.lang.Override
    public boolean hasArrowType() {
      return dataTypeCase_ == 3;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
     * @return The arrowType.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType getArrowType() {
      if (dataTypeCase_ == 3) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowTypeOrBuilder getArrowTypeOrBuilder() {
      if (dataTypeCase_ == 3) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance();
    }

    public static final int OVER_WINDOW_ARROW_TYPE_FIELD_NUMBER = 4;
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
     * @return Whether the overWindowArrowType field is set.
     */
    @java.lang.Override
    public boolean hasOverWindowArrowType() {
      return dataTypeCase_ == 4;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
     * @return The overWindowArrowType.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType getOverWindowArrowType() {
      if (dataTypeCase_ == 4) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance();
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowTypeOrBuilder getOverWindowArrowTypeOrBuilder() {
      if (dataTypeCase_ == 4) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance();
    }

    public static final int RAW_TYPE_FIELD_NUMBER = 5;
    /**
     * <pre>
     * for DataStream
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
     * @return Whether the rawType field is set.
     */
    @java.lang.Override
    public boolean hasRawType() {
      return dataTypeCase_ == 5;
    }
    /**
     * <pre>
     * for DataStream
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
     * @return The rawType.
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType getRawType() {
      if (dataTypeCase_ == 5) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance();
    }
    /**
     * <pre>
     * for DataStream
     * </pre>
     *
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
     */
    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawTypeOrBuilder getRawTypeOrBuilder() {
      if (dataTypeCase_ == 5) {
         return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) dataType_;
      }
      return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance();
    }

    public static final int MODE_FIELD_NUMBER = 6;
    private int mode_;
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
     * @return The mode.
     */
    @java.lang.Override public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode getMode() {
      @SuppressWarnings("deprecation")
      org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode result = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode.valueOf(mode_);
      return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode.UNRECOGNIZED : result;
    }

    public static final int SEPARATED_WITH_END_MESSAGE_FIELD_NUMBER = 7;
    private boolean separatedWithEndMessage_;
    /**
     * <pre>
     * append an end message (0x00) after serializing the records belonging to the same batch.
     * </pre>
     *
     * <code>bool separated_with_end_message = 7;</code>
     * @return The separatedWithEndMessage.
     */
    @java.lang.Override
    public boolean getSeparatedWithEndMessage() {
      return separatedWithEndMessage_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (dataTypeCase_ == 1) {
        output.writeMessage(1, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) dataType_);
      }
      if (dataTypeCase_ == 2) {
        output.writeMessage(2, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) dataType_);
      }
      if (dataTypeCase_ == 3) {
        output.writeMessage(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) dataType_);
      }
      if (dataTypeCase_ == 4) {
        output.writeMessage(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) dataType_);
      }
      if (dataTypeCase_ == 5) {
        output.writeMessage(5, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) dataType_);
      }
      if (mode_ != org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode.SINGLE.getNumber()) {
        output.writeEnum(6, mode_);
      }
      if (separatedWithEndMessage_ != false) {
        output.writeBool(7, separatedWithEndMessage_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (dataTypeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) dataType_);
      }
      if (dataTypeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) dataType_);
      }
      if (dataTypeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) dataType_);
      }
      if (dataTypeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) dataType_);
      }
      if (dataTypeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) dataType_);
      }
      if (mode_ != org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode.SINGLE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, mode_);
      }
      if (separatedWithEndMessage_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, separatedWithEndMessage_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor)) {
        return super.equals(obj);
      }
      org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor other = (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor) obj;

      if (mode_ != other.mode_) return false;
      if (getSeparatedWithEndMessage()
          != other.getSeparatedWithEndMessage()) return false;
      if (!getDataTypeCase().equals(other.getDataTypeCase())) return false;
      switch (dataTypeCase_) {
        case 1:
          if (!getFlattenRowType()
              .equals(other.getFlattenRowType())) return false;
          break;
        case 2:
          if (!getRowType()
              .equals(other.getRowType())) return false;
          break;
        case 3:
          if (!getArrowType()
              .equals(other.getArrowType())) return false;
          break;
        case 4:
          if (!getOverWindowArrowType()
              .equals(other.getOverWindowArrowType())) return false;
          break;
        case 5:
          if (!getRawType()
              .equals(other.getRawType())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MODE_FIELD_NUMBER;
      hash = (53 * hash) + mode_;
      hash = (37 * hash) + SEPARATED_WITH_END_MESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSeparatedWithEndMessage());
      switch (dataTypeCase_) {
        case 1:
          hash = (37 * hash) + FLATTEN_ROW_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getFlattenRowType().hashCode();
          break;
        case 2:
          hash = (37 * hash) + ROW_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getRowType().hashCode();
          break;
        case 3:
          hash = (37 * hash) + ARROW_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getArrowType().hashCode();
          break;
        case 4:
          hash = (37 * hash) + OVER_WINDOW_ARROW_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getOverWindowArrowType().hashCode();
          break;
        case 5:
          hash = (37 * hash) + RAW_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getRawType().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A representation of the coder
     * </pre>
     *
     * Protobuf type {@code org.apache.flink.fn_execution.v1.CoderInfoDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.fn_execution.v1.CoderInfoDescriptor)
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.class, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Builder.class);
      }

      // Construct using org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (flattenRowTypeBuilder_ != null) {
          flattenRowTypeBuilder_.clear();
        }
        if (rowTypeBuilder_ != null) {
          rowTypeBuilder_.clear();
        }
        if (arrowTypeBuilder_ != null) {
          arrowTypeBuilder_.clear();
        }
        if (overWindowArrowTypeBuilder_ != null) {
          overWindowArrowTypeBuilder_.clear();
        }
        if (rawTypeBuilder_ != null) {
          rawTypeBuilder_.clear();
        }
        mode_ = 0;

        separatedWithEndMessage_ = false;

        dataTypeCase_ = 0;
        dataType_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor getDefaultInstanceForType() {
        return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor build() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor buildPartial() {
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor result = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor(this);
        if (dataTypeCase_ == 1) {
          if (flattenRowTypeBuilder_ == null) {
            result.dataType_ = dataType_;
          } else {
            result.dataType_ = flattenRowTypeBuilder_.build();
          }
        }
        if (dataTypeCase_ == 2) {
          if (rowTypeBuilder_ == null) {
            result.dataType_ = dataType_;
          } else {
            result.dataType_ = rowTypeBuilder_.build();
          }
        }
        if (dataTypeCase_ == 3) {
          if (arrowTypeBuilder_ == null) {
            result.dataType_ = dataType_;
          } else {
            result.dataType_ = arrowTypeBuilder_.build();
          }
        }
        if (dataTypeCase_ == 4) {
          if (overWindowArrowTypeBuilder_ == null) {
            result.dataType_ = dataType_;
          } else {
            result.dataType_ = overWindowArrowTypeBuilder_.build();
          }
        }
        if (dataTypeCase_ == 5) {
          if (rawTypeBuilder_ == null) {
            result.dataType_ = dataType_;
          } else {
            result.dataType_ = rawTypeBuilder_.build();
          }
        }
        result.mode_ = mode_;
        result.separatedWithEndMessage_ = separatedWithEndMessage_;
        result.dataTypeCase_ = dataTypeCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor) {
          return mergeFrom((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor other) {
        if (other == org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.getDefaultInstance()) return this;
        if (other.mode_ != 0) {
          setModeValue(other.getModeValue());
        }
        if (other.getSeparatedWithEndMessage() != false) {
          setSeparatedWithEndMessage(other.getSeparatedWithEndMessage());
        }
        switch (other.getDataTypeCase()) {
          case FLATTEN_ROW_TYPE: {
            mergeFlattenRowType(other.getFlattenRowType());
            break;
          }
          case ROW_TYPE: {
            mergeRowType(other.getRowType());
            break;
          }
          case ARROW_TYPE: {
            mergeArrowType(other.getArrowType());
            break;
          }
          case OVER_WINDOW_ARROW_TYPE: {
            mergeOverWindowArrowType(other.getOverWindowArrowType());
            break;
          }
          case RAW_TYPE: {
            mergeRawType(other.getRawType());
            break;
          }
          case DATATYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getFlattenRowTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                dataTypeCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getRowTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                dataTypeCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getArrowTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                dataTypeCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getOverWindowArrowTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                dataTypeCase_ = 4;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getRawTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                dataTypeCase_ = 5;
                break;
              } // case 42
              case 48: {
                mode_ = input.readEnum();

                break;
              } // case 48
              case 56: {
                separatedWithEndMessage_ = input.readBool();

                break;
              } // case 56
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int dataTypeCase_ = 0;
      private java.lang.Object dataType_;
      public DataTypeCase
          getDataTypeCase() {
        return DataTypeCase.forNumber(
            dataTypeCase_);
      }

      public Builder clearDataType() {
        dataTypeCase_ = 0;
        dataType_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowTypeOrBuilder> flattenRowTypeBuilder_;
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       * @return Whether the flattenRowType field is set.
       */
      @java.lang.Override
      public boolean hasFlattenRowType() {
        return dataTypeCase_ == 1;
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       * @return The flattenRowType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType getFlattenRowType() {
        if (flattenRowTypeBuilder_ == null) {
          if (dataTypeCase_ == 1) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance();
        } else {
          if (dataTypeCase_ == 1) {
            return flattenRowTypeBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       */
      public Builder setFlattenRowType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType value) {
        if (flattenRowTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataType_ = value;
          onChanged();
        } else {
          flattenRowTypeBuilder_.setMessage(value);
        }
        dataTypeCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       */
      public Builder setFlattenRowType(
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.Builder builderForValue) {
        if (flattenRowTypeBuilder_ == null) {
          dataType_ = builderForValue.build();
          onChanged();
        } else {
          flattenRowTypeBuilder_.setMessage(builderForValue.build());
        }
        dataTypeCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       */
      public Builder mergeFlattenRowType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType value) {
        if (flattenRowTypeBuilder_ == null) {
          if (dataTypeCase_ == 1 &&
              dataType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance()) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) dataType_)
                .mergeFrom(value).buildPartial();
          } else {
            dataType_ = value;
          }
          onChanged();
        } else {
          if (dataTypeCase_ == 1) {
            flattenRowTypeBuilder_.mergeFrom(value);
          } else {
            flattenRowTypeBuilder_.setMessage(value);
          }
        }
        dataTypeCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       */
      public Builder clearFlattenRowType() {
        if (flattenRowTypeBuilder_ == null) {
          if (dataTypeCase_ == 1) {
            dataTypeCase_ = 0;
            dataType_ = null;
            onChanged();
          }
        } else {
          if (dataTypeCase_ == 1) {
            dataTypeCase_ = 0;
            dataType_ = null;
          }
          flattenRowTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.Builder getFlattenRowTypeBuilder() {
        return getFlattenRowTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowTypeOrBuilder getFlattenRowTypeOrBuilder() {
        if ((dataTypeCase_ == 1) && (flattenRowTypeBuilder_ != null)) {
          return flattenRowTypeBuilder_.getMessageOrBuilder();
        } else {
          if (dataTypeCase_ == 1) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * for Table &amp; SQL
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.FlattenRowType flatten_row_type = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowTypeOrBuilder> 
          getFlattenRowTypeFieldBuilder() {
        if (flattenRowTypeBuilder_ == null) {
          if (!(dataTypeCase_ == 1)) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.getDefaultInstance();
          }
          flattenRowTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowTypeOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.FlattenRowType) dataType_,
                  getParentForChildren(),
                  isClean());
          dataType_ = null;
        }
        dataTypeCase_ = 1;
        onChanged();;
        return flattenRowTypeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowTypeOrBuilder> rowTypeBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       * @return Whether the rowType field is set.
       */
      @java.lang.Override
      public boolean hasRowType() {
        return dataTypeCase_ == 2;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       * @return The rowType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType getRowType() {
        if (rowTypeBuilder_ == null) {
          if (dataTypeCase_ == 2) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance();
        } else {
          if (dataTypeCase_ == 2) {
            return rowTypeBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       */
      public Builder setRowType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType value) {
        if (rowTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataType_ = value;
          onChanged();
        } else {
          rowTypeBuilder_.setMessage(value);
        }
        dataTypeCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       */
      public Builder setRowType(
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.Builder builderForValue) {
        if (rowTypeBuilder_ == null) {
          dataType_ = builderForValue.build();
          onChanged();
        } else {
          rowTypeBuilder_.setMessage(builderForValue.build());
        }
        dataTypeCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       */
      public Builder mergeRowType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType value) {
        if (rowTypeBuilder_ == null) {
          if (dataTypeCase_ == 2 &&
              dataType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance()) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) dataType_)
                .mergeFrom(value).buildPartial();
          } else {
            dataType_ = value;
          }
          onChanged();
        } else {
          if (dataTypeCase_ == 2) {
            rowTypeBuilder_.mergeFrom(value);
          } else {
            rowTypeBuilder_.setMessage(value);
          }
        }
        dataTypeCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       */
      public Builder clearRowType() {
        if (rowTypeBuilder_ == null) {
          if (dataTypeCase_ == 2) {
            dataTypeCase_ = 0;
            dataType_ = null;
            onChanged();
          }
        } else {
          if (dataTypeCase_ == 2) {
            dataTypeCase_ = 0;
            dataType_ = null;
          }
          rowTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.Builder getRowTypeBuilder() {
        return getRowTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowTypeOrBuilder getRowTypeOrBuilder() {
        if ((dataTypeCase_ == 2) && (rowTypeBuilder_ != null)) {
          return rowTypeBuilder_.getMessageOrBuilder();
        } else {
          if (dataTypeCase_ == 2) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RowType row_type = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowTypeOrBuilder> 
          getRowTypeFieldBuilder() {
        if (rowTypeBuilder_ == null) {
          if (!(dataTypeCase_ == 2)) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.getDefaultInstance();
          }
          rowTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowTypeOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RowType) dataType_,
                  getParentForChildren(),
                  isClean());
          dataType_ = null;
        }
        dataTypeCase_ = 2;
        onChanged();;
        return rowTypeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowTypeOrBuilder> arrowTypeBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       * @return Whether the arrowType field is set.
       */
      @java.lang.Override
      public boolean hasArrowType() {
        return dataTypeCase_ == 3;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       * @return The arrowType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType getArrowType() {
        if (arrowTypeBuilder_ == null) {
          if (dataTypeCase_ == 3) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance();
        } else {
          if (dataTypeCase_ == 3) {
            return arrowTypeBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       */
      public Builder setArrowType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType value) {
        if (arrowTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataType_ = value;
          onChanged();
        } else {
          arrowTypeBuilder_.setMessage(value);
        }
        dataTypeCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       */
      public Builder setArrowType(
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.Builder builderForValue) {
        if (arrowTypeBuilder_ == null) {
          dataType_ = builderForValue.build();
          onChanged();
        } else {
          arrowTypeBuilder_.setMessage(builderForValue.build());
        }
        dataTypeCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       */
      public Builder mergeArrowType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType value) {
        if (arrowTypeBuilder_ == null) {
          if (dataTypeCase_ == 3 &&
              dataType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance()) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) dataType_)
                .mergeFrom(value).buildPartial();
          } else {
            dataType_ = value;
          }
          onChanged();
        } else {
          if (dataTypeCase_ == 3) {
            arrowTypeBuilder_.mergeFrom(value);
          } else {
            arrowTypeBuilder_.setMessage(value);
          }
        }
        dataTypeCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       */
      public Builder clearArrowType() {
        if (arrowTypeBuilder_ == null) {
          if (dataTypeCase_ == 3) {
            dataTypeCase_ = 0;
            dataType_ = null;
            onChanged();
          }
        } else {
          if (dataTypeCase_ == 3) {
            dataTypeCase_ = 0;
            dataType_ = null;
          }
          arrowTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.Builder getArrowTypeBuilder() {
        return getArrowTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowTypeOrBuilder getArrowTypeOrBuilder() {
        if ((dataTypeCase_ == 3) && (arrowTypeBuilder_ != null)) {
          return arrowTypeBuilder_.getMessageOrBuilder();
        } else {
          if (dataTypeCase_ == 3) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.ArrowType arrow_type = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowTypeOrBuilder> 
          getArrowTypeFieldBuilder() {
        if (arrowTypeBuilder_ == null) {
          if (!(dataTypeCase_ == 3)) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.getDefaultInstance();
          }
          arrowTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowTypeOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.ArrowType) dataType_,
                  getParentForChildren(),
                  isClean());
          dataType_ = null;
        }
        dataTypeCase_ = 3;
        onChanged();;
        return arrowTypeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowTypeOrBuilder> overWindowArrowTypeBuilder_;
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       * @return Whether the overWindowArrowType field is set.
       */
      @java.lang.Override
      public boolean hasOverWindowArrowType() {
        return dataTypeCase_ == 4;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       * @return The overWindowArrowType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType getOverWindowArrowType() {
        if (overWindowArrowTypeBuilder_ == null) {
          if (dataTypeCase_ == 4) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance();
        } else {
          if (dataTypeCase_ == 4) {
            return overWindowArrowTypeBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       */
      public Builder setOverWindowArrowType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType value) {
        if (overWindowArrowTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataType_ = value;
          onChanged();
        } else {
          overWindowArrowTypeBuilder_.setMessage(value);
        }
        dataTypeCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       */
      public Builder setOverWindowArrowType(
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.Builder builderForValue) {
        if (overWindowArrowTypeBuilder_ == null) {
          dataType_ = builderForValue.build();
          onChanged();
        } else {
          overWindowArrowTypeBuilder_.setMessage(builderForValue.build());
        }
        dataTypeCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       */
      public Builder mergeOverWindowArrowType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType value) {
        if (overWindowArrowTypeBuilder_ == null) {
          if (dataTypeCase_ == 4 &&
              dataType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance()) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) dataType_)
                .mergeFrom(value).buildPartial();
          } else {
            dataType_ = value;
          }
          onChanged();
        } else {
          if (dataTypeCase_ == 4) {
            overWindowArrowTypeBuilder_.mergeFrom(value);
          } else {
            overWindowArrowTypeBuilder_.setMessage(value);
          }
        }
        dataTypeCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       */
      public Builder clearOverWindowArrowType() {
        if (overWindowArrowTypeBuilder_ == null) {
          if (dataTypeCase_ == 4) {
            dataTypeCase_ = 0;
            dataType_ = null;
            onChanged();
          }
        } else {
          if (dataTypeCase_ == 4) {
            dataTypeCase_ = 0;
            dataType_ = null;
          }
          overWindowArrowTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.Builder getOverWindowArrowTypeBuilder() {
        return getOverWindowArrowTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowTypeOrBuilder getOverWindowArrowTypeOrBuilder() {
        if ((dataTypeCase_ == 4) && (overWindowArrowTypeBuilder_ != null)) {
          return overWindowArrowTypeBuilder_.getMessageOrBuilder();
        } else {
          if (dataTypeCase_ == 4) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.OverWindowArrowType over_window_arrow_type = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowTypeOrBuilder> 
          getOverWindowArrowTypeFieldBuilder() {
        if (overWindowArrowTypeBuilder_ == null) {
          if (!(dataTypeCase_ == 4)) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.getDefaultInstance();
          }
          overWindowArrowTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowTypeOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.OverWindowArrowType) dataType_,
                  getParentForChildren(),
                  isClean());
          dataType_ = null;
        }
        dataTypeCase_ = 4;
        onChanged();;
        return overWindowArrowTypeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawTypeOrBuilder> rawTypeBuilder_;
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       * @return Whether the rawType field is set.
       */
      @java.lang.Override
      public boolean hasRawType() {
        return dataTypeCase_ == 5;
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       * @return The rawType.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType getRawType() {
        if (rawTypeBuilder_ == null) {
          if (dataTypeCase_ == 5) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance();
        } else {
          if (dataTypeCase_ == 5) {
            return rawTypeBuilder_.getMessage();
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       */
      public Builder setRawType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType value) {
        if (rawTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataType_ = value;
          onChanged();
        } else {
          rawTypeBuilder_.setMessage(value);
        }
        dataTypeCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       */
      public Builder setRawType(
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.Builder builderForValue) {
        if (rawTypeBuilder_ == null) {
          dataType_ = builderForValue.build();
          onChanged();
        } else {
          rawTypeBuilder_.setMessage(builderForValue.build());
        }
        dataTypeCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       */
      public Builder mergeRawType(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType value) {
        if (rawTypeBuilder_ == null) {
          if (dataTypeCase_ == 5 &&
              dataType_ != org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance()) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.newBuilder((org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) dataType_)
                .mergeFrom(value).buildPartial();
          } else {
            dataType_ = value;
          }
          onChanged();
        } else {
          if (dataTypeCase_ == 5) {
            rawTypeBuilder_.mergeFrom(value);
          } else {
            rawTypeBuilder_.setMessage(value);
          }
        }
        dataTypeCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       */
      public Builder clearRawType() {
        if (rawTypeBuilder_ == null) {
          if (dataTypeCase_ == 5) {
            dataTypeCase_ = 0;
            dataType_ = null;
            onChanged();
          }
        } else {
          if (dataTypeCase_ == 5) {
            dataTypeCase_ = 0;
            dataType_ = null;
          }
          rawTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       */
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.Builder getRawTypeBuilder() {
        return getRawTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawTypeOrBuilder getRawTypeOrBuilder() {
        if ((dataTypeCase_ == 5) && (rawTypeBuilder_ != null)) {
          return rawTypeBuilder_.getMessageOrBuilder();
        } else {
          if (dataTypeCase_ == 5) {
            return (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) dataType_;
          }
          return org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * for DataStream
       * </pre>
       *
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.RawType raw_type = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawTypeOrBuilder> 
          getRawTypeFieldBuilder() {
        if (rawTypeBuilder_ == null) {
          if (!(dataTypeCase_ == 5)) {
            dataType_ = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.getDefaultInstance();
          }
          rawTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType.Builder, org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawTypeOrBuilder>(
                  (org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.RawType) dataType_,
                  getParentForChildren(),
                  isClean());
          dataType_ = null;
        }
        dataTypeCase_ = 5;
        onChanged();;
        return rawTypeBuilder_;
      }

      private int mode_ = 0;
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
       * @return The enum numeric value on the wire for mode.
       */
      @java.lang.Override public int getModeValue() {
        return mode_;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
       * @param value The enum numeric value on the wire for mode to set.
       * @return This builder for chaining.
       */
      public Builder setModeValue(int value) {
        
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
       * @return The mode.
       */
      @java.lang.Override
      public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode getMode() {
        @SuppressWarnings("deprecation")
        org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode result = org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode.valueOf(mode_);
        return result == null ? org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
       * @param value The mode to set.
       * @return This builder for chaining.
       */
      public Builder setMode(org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor.Mode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        mode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.fn_execution.v1.CoderInfoDescriptor.Mode mode = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearMode() {
        
        mode_ = 0;
        onChanged();
        return this;
      }

      private boolean separatedWithEndMessage_ ;
      /**
       * <pre>
       * append an end message (0x00) after serializing the records belonging to the same batch.
       * </pre>
       *
       * <code>bool separated_with_end_message = 7;</code>
       * @return The separatedWithEndMessage.
       */
      @java.lang.Override
      public boolean getSeparatedWithEndMessage() {
        return separatedWithEndMessage_;
      }
      /**
       * <pre>
       * append an end message (0x00) after serializing the records belonging to the same batch.
       * </pre>
       *
       * <code>bool separated_with_end_message = 7;</code>
       * @param value The separatedWithEndMessage to set.
       * @return This builder for chaining.
       */
      public Builder setSeparatedWithEndMessage(boolean value) {
        
        separatedWithEndMessage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * append an end message (0x00) after serializing the records belonging to the same batch.
       * </pre>
       *
       * <code>bool separated_with_end_message = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeparatedWithEndMessage() {
        
        separatedWithEndMessage_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.fn_execution.v1.CoderInfoDescriptor)
    private static final org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor();
    }

    public static org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CoderInfoDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<CoderInfoDescriptor>() {
      @java.lang.Override
      public CoderInfoDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CoderInfoDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CoderInfoDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.fnexecution.v1.FlinkFnApi.CoderInfoDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_JobParameter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_JobParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Input_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Input_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_OverWindow_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_GroupWindow_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_GroupWindow_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_Schema_Field_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030flink-fn-execution.proto\022 org.apache.f" +
      "link.fn_execution.v1\"*\n\014JobParameter\022\013\n\003" +
      "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\206\001\n\005Input\022D\n\003ud" +
      "f\030\001 \001(\01325.org.apache.flink.fn_execution." +
      "v1.UserDefinedFunctionH\000\022\025\n\013inputOffset\030" +
      "\002 \001(\005H\000\022\027\n\rinputConstant\030\003 \001(\014H\000B\007\n\005inpu" +
      "t\"\250\001\n\023UserDefinedFunction\022\017\n\007payload\030\001 \001" +
      "(\014\0227\n\006inputs\030\002 \003(\0132\'.org.apache.flink.fn" +
      "_execution.v1.Input\022\024\n\014window_index\030\003 \001(" +
      "\005\022\032\n\022takes_row_as_input\030\004 \001(\010\022\025\n\ris_pand" +
      "as_udf\030\005 \001(\010\"\223\002\n\024UserDefinedFunctions\022C\n" +
      "\004udfs\030\001 \003(\01325.org.apache.flink.fn_execut" +
      "ion.v1.UserDefinedFunction\022\026\n\016metric_ena" +
      "bled\030\002 \001(\010\022=\n\007windows\030\003 \003(\0132,.org.apache" +
      ".flink.fn_execution.v1.OverWindow\022\027\n\017pro" +
      "file_enabled\030\004 \001(\010\022F\n\016job_parameters\030\005 \003" +
      "(\0132..org.apache.flink.fn_execution.v1.Jo" +
      "bParameter\"\335\002\n\nOverWindow\022L\n\013window_type" +
      "\030\001 \001(\01627.org.apache.flink.fn_execution.v" +
      "1.OverWindow.WindowType\022\026\n\016lower_boundar" +
      "y\030\002 \001(\003\022\026\n\016upper_boundary\030\003 \001(\003\"\320\001\n\nWind" +
      "owType\022\023\n\017RANGE_UNBOUNDED\020\000\022\035\n\031RANGE_UNB" +
      "OUNDED_PRECEDING\020\001\022\035\n\031RANGE_UNBOUNDED_FO" +
      "LLOWING\020\002\022\021\n\rRANGE_SLIDING\020\003\022\021\n\rROW_UNBO" +
      "UNDED\020\004\022\033\n\027ROW_UNBOUNDED_PRECEDING\020\005\022\033\n\027" +
      "ROW_UNBOUNDED_FOLLOWING\020\006\022\017\n\013ROW_SLIDING" +
      "\020\007\"\213\006\n\034UserDefinedAggregateFunction\022\017\n\007p" +
      "ayload\030\001 \001(\014\0227\n\006inputs\030\002 \003(\0132\'.org.apach" +
      "e.flink.fn_execution.v1.Input\022Z\n\005specs\030\003" +
      " \003(\0132K.org.apache.flink.fn_execution.v1." +
      "UserDefinedAggregateFunction.DataViewSpe" +
      "c\022\022\n\nfilter_arg\030\004 \001(\005\022\020\n\010distinct\030\005 \001(\010\022" +
      "\032\n\022takes_row_as_input\030\006 \001(\010\032\202\004\n\014DataView" +
      "Spec\022\014\n\004name\030\001 \001(\t\022\023\n\013field_index\030\002 \001(\005\022" +
      "i\n\tlist_view\030\003 \001(\0132T.org.apache.flink.fn" +
      "_execution.v1.UserDefinedAggregateFuncti" +
      "on.DataViewSpec.ListViewH\000\022g\n\010map_view\030\004" +
      " \001(\0132S.org.apache.flink.fn_execution.v1." +
      "UserDefinedAggregateFunction.DataViewSpe" +
      "c.MapViewH\000\032T\n\010ListView\022H\n\014element_type\030" +
      "\001 \001(\01322.org.apache.flink.fn_execution.v1" +
      ".Schema.FieldType\032\227\001\n\007MapView\022D\n\010key_typ" +
      "e\030\001 \001(\01322.org.apache.flink.fn_execution." +
      "v1.Schema.FieldType\022F\n\nvalue_type\030\002 \001(\0132" +
      "2.org.apache.flink.fn_execution.v1.Schem" +
      "a.FieldTypeB\013\n\tdata_view\"\254\004\n\013GroupWindow" +
      "\022M\n\013window_type\030\001 \001(\01628.org.apache.flink" +
      ".fn_execution.v1.GroupWindow.WindowType\022" +
      "\026\n\016is_time_window\030\002 \001(\010\022\024\n\014window_slide\030" +
      "\003 \001(\003\022\023\n\013window_size\030\004 \001(\003\022\022\n\nwindow_gap" +
      "\030\005 \001(\003\022\023\n\013is_row_time\030\006 \001(\010\022\030\n\020time_fiel" +
      "d_index\030\007 \001(\005\022\027\n\017allowedLateness\030\010 \001(\003\022U" +
      "\n\017namedProperties\030\t \003(\0162<.org.apache.fli" +
      "nk.fn_execution.v1.GroupWindow.WindowPro" +
      "perty\022\026\n\016shift_timezone\030\n \001(\t\"[\n\nWindowT" +
      "ype\022\031\n\025TUMBLING_GROUP_WINDOW\020\000\022\030\n\024SLIDIN" +
      "G_GROUP_WINDOW\020\001\022\030\n\024SESSION_GROUP_WINDOW" +
      "\020\002\"c\n\016WindowProperty\022\020\n\014WINDOW_START\020\000\022\016" +
      "\n\nWINDOW_END\020\001\022\026\n\022ROW_TIME_ATTRIBUTE\020\002\022\027" +
      "\n\023PROC_TIME_ATTRIBUTE\020\003\"\336\004\n\035UserDefinedA" +
      "ggregateFunctions\022L\n\004udfs\030\001 \003(\0132>.org.ap" +
      "ache.flink.fn_execution.v1.UserDefinedAg" +
      "gregateFunction\022\026\n\016metric_enabled\030\002 \001(\010\022" +
      "\020\n\010grouping\030\003 \003(\005\022\036\n\026generate_update_bef" +
      "ore\030\004 \001(\010\022D\n\010key_type\030\005 \001(\01322.org.apache" +
      ".flink.fn_execution.v1.Schema.FieldType\022" +
      "\033\n\023index_of_count_star\030\006 \001(\005\022\036\n\026state_cl" +
      "eaning_enabled\030\007 \001(\010\022\030\n\020state_cache_size" +
      "\030\010 \001(\005\022!\n\031map_state_read_cache_size\030\t \001(" +
      "\005\022\"\n\032map_state_write_cache_size\030\n \001(\005\022\033\n" +
      "\023count_star_inserted\030\013 \001(\010\022C\n\014group_wind" +
      "ow\030\014 \001(\0132-.org.apache.flink.fn_execution" +
      ".v1.GroupWindow\022\027\n\017profile_enabled\030\r \001(\010" +
      "\022F\n\016job_parameters\030\016 \003(\0132..org.apache.fl" +
      "ink.fn_execution.v1.JobParameter\"\366\017\n\006Sch" +
      "ema\022>\n\006fields\030\001 \003(\0132..org.apache.flink.f" +
      "n_execution.v1.Schema.Field\032\227\001\n\007MapInfo\022" +
      "D\n\010key_type\030\001 \001(\01322.org.apache.flink.fn_" +
      "execution.v1.Schema.FieldType\022F\n\nvalue_t" +
      "ype\030\002 \001(\01322.org.apache.flink.fn_executio" +
      "n.v1.Schema.FieldType\032\035\n\010TimeInfo\022\021\n\tpre" +
      "cision\030\001 \001(\005\032\"\n\rTimestampInfo\022\021\n\tprecisi" +
      "on\030\001 \001(\005\032,\n\027LocalZonedTimestampInfo\022\021\n\tp" +
      "recision\030\001 \001(\005\032\'\n\022ZonedTimestampInfo\022\021\n\t" +
      "precision\030\001 \001(\005\032/\n\013DecimalInfo\022\021\n\tprecis" +
      "ion\030\001 \001(\005\022\r\n\005scale\030\002 \001(\005\032\034\n\nBinaryInfo\022\016" +
      "\n\006length\030\001 \001(\005\032\037\n\rVarBinaryInfo\022\016\n\006lengt" +
      "h\030\001 \001(\005\032\032\n\010CharInfo\022\016\n\006length\030\001 \001(\005\032\035\n\013V" +
      "arCharInfo\022\016\n\006length\030\001 \001(\005\032\260\010\n\tFieldType" +
      "\022D\n\ttype_name\030\001 \001(\01621.org.apache.flink.f" +
      "n_execution.v1.Schema.TypeName\022\020\n\010nullab" +
      "le\030\002 \001(\010\022U\n\027collection_element_type\030\003 \001(" +
      "\01322.org.apache.flink.fn_execution.v1.Sch" +
      "ema.FieldTypeH\000\022D\n\010map_info\030\004 \001(\01320.org." +
      "apache.flink.fn_execution.v1.Schema.MapI" +
      "nfoH\000\022>\n\nrow_schema\030\005 \001(\0132(.org.apache.f" +
      "link.fn_execution.v1.SchemaH\000\022L\n\014decimal" +
      "_info\030\006 \001(\01324.org.apache.flink.fn_execut" +
      "ion.v1.Schema.DecimalInfoH\000\022F\n\ttime_info" +
      "\030\007 \001(\01321.org.apache.flink.fn_execution.v" +
      "1.Schema.TimeInfoH\000\022P\n\016timestamp_info\030\010 " +
      "\001(\01326.org.apache.flink.fn_execution.v1.S" +
      "chema.TimestampInfoH\000\022f\n\032local_zoned_tim" +
      "estamp_info\030\t \001(\0132@.org.apache.flink.fn_" +
      "execution.v1.Schema.LocalZonedTimestampI" +
      "nfoH\000\022[\n\024zoned_timestamp_info\030\n \001(\0132;.or" +
      "g.apache.flink.fn_execution.v1.Schema.Zo" +
      "nedTimestampInfoH\000\022J\n\013binary_info\030\013 \001(\0132" +
      "3.org.apache.flink.fn_execution.v1.Schem" +
      "a.BinaryInfoH\000\022Q\n\017var_binary_info\030\014 \001(\0132" +
      "6.org.apache.flink.fn_execution.v1.Schem" +
      "a.VarBinaryInfoH\000\022F\n\tchar_info\030\r \001(\01321.o" +
      "rg.apache.flink.fn_execution.v1.Schema.C" +
      "harInfoH\000\022M\n\rvar_char_info\030\016 \001(\01324.org.a" +
      "pache.flink.fn_execution.v1.Schema.VarCh" +
      "arInfoH\000B\013\n\ttype_info\032l\n\005Field\022\014\n\004name\030\001" +
      " \001(\t\022\023\n\013description\030\002 \001(\t\022@\n\004type\030\003 \001(\0132" +
      "2.org.apache.flink.fn_execution.v1.Schem" +
      "a.FieldType\"\253\002\n\010TypeName\022\007\n\003ROW\020\000\022\013\n\007TIN" +
      "YINT\020\001\022\014\n\010SMALLINT\020\002\022\007\n\003INT\020\003\022\n\n\006BIGINT\020" +
      "\004\022\013\n\007DECIMAL\020\005\022\t\n\005FLOAT\020\006\022\n\n\006DOUBLE\020\007\022\010\n" +
      "\004DATE\020\010\022\010\n\004TIME\020\t\022\r\n\tTIMESTAMP\020\n\022\013\n\007BOOL" +
      "EAN\020\013\022\n\n\006BINARY\020\014\022\r\n\tVARBINARY\020\r\022\010\n\004CHAR" +
      "\020\016\022\013\n\007VARCHAR\020\017\022\017\n\013BASIC_ARRAY\020\020\022\007\n\003MAP\020" +
      "\021\022\014\n\010MULTISET\020\022\022\031\n\025LOCAL_ZONED_TIMESTAMP" +
      "\020\023\022\023\n\017ZONED_TIMESTAMP\020\024\022\010\n\004NULL\020\025\"\303\n\n\010Ty" +
      "peInfo\022F\n\ttype_name\030\001 \001(\01623.org.apache.f" +
      "link.fn_execution.v1.TypeInfo.TypeName\022M" +
      "\n\027collection_element_type\030\002 \001(\0132*.org.ap" +
      "ache.flink.fn_execution.v1.TypeInfoH\000\022O\n" +
      "\rrow_type_info\030\003 \001(\01326.org.apache.flink." +
      "fn_execution.v1.TypeInfo.RowTypeInfoH\000\022S" +
      "\n\017tuple_type_info\030\004 \001(\01328.org.apache.fli" +
      "nk.fn_execution.v1.TypeInfo.TupleTypeInf" +
      "oH\000\022O\n\rmap_type_info\030\005 \001(\01326.org.apache." +
      "flink.fn_execution.v1.TypeInfo.MapTypeIn" +
      "foH\000\022Q\n\016avro_type_info\030\006 \001(\01327.org.apach" +
      "e.flink.fn_execution.v1.TypeInfo.AvroTyp" +
      "eInfoH\000\032\213\001\n\013MapTypeInfo\022<\n\010key_type\030\001 \001(" +
      "\0132*.org.apache.flink.fn_execution.v1.Typ" +
      "eInfo\022>\n\nvalue_type\030\002 \001(\0132*.org.apache.f" +
      "link.fn_execution.v1.TypeInfo\032\270\001\n\013RowTyp" +
      "eInfo\022L\n\006fields\030\001 \003(\0132<.org.apache.flink" +
      ".fn_execution.v1.TypeInfo.RowTypeInfo.Fi" +
      "eld\032[\n\005Field\022\022\n\nfield_name\030\001 \001(\t\022>\n\nfiel" +
      "d_type\030\002 \001(\0132*.org.apache.flink.fn_execu" +
      "tion.v1.TypeInfo\032P\n\rTupleTypeInfo\022?\n\013fie" +
      "ld_types\030\001 \003(\0132*.org.apache.flink.fn_exe" +
      "cution.v1.TypeInfo\032\036\n\014AvroTypeInfo\022\016\n\006sc" +
      "hema\030\001 \001(\t\"\215\003\n\010TypeName\022\007\n\003ROW\020\000\022\n\n\006STRI" +
      "NG\020\001\022\010\n\004BYTE\020\002\022\013\n\007BOOLEAN\020\003\022\t\n\005SHORT\020\004\022\007" +
      "\n\003INT\020\005\022\010\n\004LONG\020\006\022\t\n\005FLOAT\020\007\022\n\n\006DOUBLE\020\010" +
      "\022\010\n\004CHAR\020\t\022\013\n\007BIG_INT\020\n\022\013\n\007BIG_DEC\020\013\022\014\n\010" +
      "SQL_DATE\020\014\022\014\n\010SQL_TIME\020\r\022\021\n\rSQL_TIMESTAM" +
      "P\020\016\022\017\n\013BASIC_ARRAY\020\017\022\023\n\017PRIMITIVE_ARRAY\020" +
      "\020\022\t\n\005TUPLE\020\021\022\010\n\004LIST\020\022\022\007\n\003MAP\020\023\022\021\n\rPICKL" +
      "ED_BYTES\020\024\022\020\n\014OBJECT_ARRAY\020\025\022\013\n\007INSTANT\020" +
      "\026\022\010\n\004AVRO\020\027\022\016\n\nLOCAL_DATE\020\030\022\016\n\nLOCAL_TIM" +
      "E\020\031\022\022\n\016LOCAL_DATETIME\020\032\022\031\n\025LOCAL_ZONED_T" +
      "IMESTAMP\020\033B\013\n\ttype_info\"\321\007\n\035UserDefinedD" +
      "ataStreamFunction\022c\n\rfunction_type\030\001 \001(\016" +
      "2L.org.apache.flink.fn_execution.v1.User" +
      "DefinedDataStreamFunction.FunctionType\022g" +
      "\n\017runtime_context\030\002 \001(\0132N.org.apache.fli" +
      "nk.fn_execution.v1.UserDefinedDataStream" +
      "Function.RuntimeContext\022\017\n\007payload\030\003 \001(\014" +
      "\022\026\n\016metric_enabled\030\004 \001(\010\022A\n\rkey_type_inf" +
      "o\030\005 \001(\0132*.org.apache.flink.fn_execution." +
      "v1.TypeInfo\022\027\n\017profile_enabled\030\006 \001(\010\022\027\n\017" +
      "has_side_output\030\007 \001(\010\022\030\n\020state_cache_siz" +
      "e\030\010 \001(\005\022!\n\031map_state_read_cache_size\030\t \001" +
      "(\005\022\"\n\032map_state_write_cache_size\030\n \001(\005\032\262" +
      "\002\n\016RuntimeContext\022\021\n\ttask_name\030\001 \001(\t\022\037\n\027" +
      "task_name_with_subtasks\030\002 \001(\t\022#\n\033number_" +
      "of_parallel_subtasks\030\003 \001(\005\022\'\n\037max_number" +
      "_of_parallel_subtasks\030\004 \001(\005\022\035\n\025index_of_" +
      "this_subtask\030\005 \001(\005\022\026\n\016attempt_number\030\006 \001" +
      "(\005\022F\n\016job_parameters\030\007 \003(\0132..org.apache." +
      "flink.fn_execution.v1.JobParameter\022\037\n\027in" +
      "_batch_execution_mode\030\010 \001(\010\"\255\001\n\014Function" +
      "Type\022\013\n\007PROCESS\020\000\022\016\n\nCO_PROCESS\020\001\022\021\n\rKEY" +
      "ED_PROCESS\020\002\022\024\n\020KEYED_CO_PROCESS\020\003\022\n\n\006WI" +
      "NDOW\020\004\022\030\n\024CO_BROADCAST_PROCESS\020\005\022\036\n\032KEYE" +
      "D_CO_BROADCAST_PROCESS\020\006\022\021\n\rREVISE_OUTPU" +
      "T\020d\"\344\016\n\017StateDescriptor\022\022\n\nstate_name\030\001 " +
      "\001(\t\022Z\n\020state_ttl_config\030\002 \001(\0132@.org.apac" +
      "he.flink.fn_execution.v1.StateDescriptor" +
      ".StateTTLConfig\032\340\r\n\016StateTTLConfig\022`\n\013up" +
      "date_type\030\001 \001(\0162K.org.apache.flink.fn_ex" +
      "ecution.v1.StateDescriptor.StateTTLConfi" +
      "g.UpdateType\022j\n\020state_visibility\030\002 \001(\0162P" +
      ".org.apache.flink.fn_execution.v1.StateD" +
      "escriptor.StateTTLConfig.StateVisibility" +
      "\022w\n\027ttl_time_characteristic\030\003 \001(\0162V.org." +
      "apache.flink.fn_execution.v1.StateDescri" +
      "ptor.StateTTLConfig.TtlTimeCharacteristi" +
      "c\022\013\n\003ttl\030\004 \001(\003\022n\n\022cleanup_strategies\030\005 \001" +
      "(\0132R.org.apache.flink.fn_execution.v1.St" +
      "ateDescriptor.StateTTLConfig.CleanupStra" +
      "tegies\032\312\010\n\021CleanupStrategies\022 \n\030is_clean" +
      "up_in_background\030\001 \001(\010\022y\n\nstrategies\030\002 \003" +
      "(\0132e.org.apache.flink.fn_execution.v1.St" +
      "ateDescriptor.StateTTLConfig.CleanupStra" +
      "tegies.MapStrategiesEntry\032X\n\032Incremental" +
      "CleanupStrategy\022\024\n\014cleanup_size\030\001 \001(\005\022$\n" +
      "\034run_cleanup_for_every_record\030\002 \001(\010\032K\n#R" +
      "ocksdbCompactFilterCleanupStrategy\022$\n\034qu" +
      "ery_time_after_num_entries\030\001 \001(\003\032\340\004\n\022Map" +
      "StrategiesEntry\022o\n\010strategy\030\001 \001(\0162].org." +
      "apache.flink.fn_execution.v1.StateDescri" +
      "ptor.StateTTLConfig.CleanupStrategies.St" +
      "rategies\022\201\001\n\016empty_strategy\030\002 \001(\0162g.org." +
      "apache.flink.fn_execution.v1.StateDescri" +
      "ptor.StateTTLConfig.CleanupStrategies.Em" +
      "ptyCleanupStrategyH\000\022\225\001\n\034incremental_cle" +
      "anup_strategy\030\003 \001(\0132m.org.apache.flink.f" +
      "n_execution.v1.StateDescriptor.StateTTLC" +
      "onfig.CleanupStrategies.IncrementalClean" +
      "upStrategyH\000\022\251\001\n\'rocksdb_compact_filter_" +
      "cleanup_strategy\030\004 \001(\0132v.org.apache.flin" +
      "k.fn_execution.v1.StateDescriptor.StateT" +
      "TLConfig.CleanupStrategies.RocksdbCompac" +
      "tFilterCleanupStrategyH\000B\021\n\017CleanupStrat" +
      "egy\"b\n\nStrategies\022\034\n\030FULL_STATE_SCAN_SNA" +
      "PSHOT\020\000\022\027\n\023INCREMENTAL_CLEANUP\020\001\022\035\n\031ROCK" +
      "SDB_COMPACTION_FILTER\020\002\"*\n\024EmptyCleanupS" +
      "trategy\022\022\n\016EMPTY_STRATEGY\020\000\"D\n\nUpdateTyp" +
      "e\022\014\n\010Disabled\020\000\022\024\n\020OnCreateAndWrite\020\001\022\022\n" +
      "\016OnReadAndWrite\020\002\"J\n\017StateVisibility\022\037\n\033" +
      "ReturnExpiredIfNotCleanedUp\020\000\022\026\n\022NeverRe" +
      "turnExpired\020\001\"+\n\025TtlTimeCharacteristic\022\022" +
      "\n\016ProcessingTime\020\000\"\361\007\n\023CoderInfoDescript" +
      "or\022`\n\020flatten_row_type\030\001 \001(\0132D.org.apach" +
      "e.flink.fn_execution.v1.CoderInfoDescrip" +
      "tor.FlattenRowTypeH\000\022Q\n\010row_type\030\002 \001(\0132=" +
      ".org.apache.flink.fn_execution.v1.CoderI" +
      "nfoDescriptor.RowTypeH\000\022U\n\narrow_type\030\003 " +
      "\001(\0132?.org.apache.flink.fn_execution.v1.C" +
      "oderInfoDescriptor.ArrowTypeH\000\022k\n\026over_w" +
      "indow_arrow_type\030\004 \001(\0132I.org.apache.flin" +
      "k.fn_execution.v1.CoderInfoDescriptor.Ov" +
      "erWindowArrowTypeH\000\022Q\n\010raw_type\030\005 \001(\0132=." +
      "org.apache.flink.fn_execution.v1.CoderIn" +
      "foDescriptor.RawTypeH\000\022H\n\004mode\030\006 \001(\0162:.o" +
      "rg.apache.flink.fn_execution.v1.CoderInf" +
      "oDescriptor.Mode\022\"\n\032separated_with_end_m" +
      "essage\030\007 \001(\010\032J\n\016FlattenRowType\0228\n\006schema" +
      "\030\001 \001(\0132(.org.apache.flink.fn_execution.v" +
      "1.Schema\032C\n\007RowType\0228\n\006schema\030\001 \001(\0132(.or" +
      "g.apache.flink.fn_execution.v1.Schema\032E\n" +
      "\tArrowType\0228\n\006schema\030\001 \001(\0132(.org.apache." +
      "flink.fn_execution.v1.Schema\032O\n\023OverWind" +
      "owArrowType\0228\n\006schema\030\001 \001(\0132(.org.apache" +
      ".flink.fn_execution.v1.Schema\032H\n\007RawType" +
      "\022=\n\ttype_info\030\001 \001(\0132*.org.apache.flink.f" +
      "n_execution.v1.TypeInfo\" \n\004Mode\022\n\n\006SINGL" +
      "E\020\000\022\014\n\010MULTIPLE\020\001B\013\n\tdata_typeB-\n\037org.ap" +
      "ache.flink.fnexecution.v1B\nFlinkFnApib\006p" +
      "roto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_org_apache_flink_fn_execution_v1_JobParameter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_JobParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_JobParameter_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_flink_fn_execution_v1_Input_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_Input_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Input_descriptor,
        new java.lang.String[] { "Udf", "InputOffset", "InputConstant", "Input", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunction_descriptor,
        new java.lang.String[] { "Payload", "Inputs", "WindowIndex", "TakesRowAsInput", "IsPandasUdf", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedFunctions_descriptor,
        new java.lang.String[] { "Udfs", "MetricEnabled", "Windows", "ProfileEnabled", "JobParameters", });
    internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_apache_flink_fn_execution_v1_OverWindow_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_OverWindow_descriptor,
        new java.lang.String[] { "WindowType", "LowerBoundary", "UpperBoundary", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor,
        new java.lang.String[] { "Payload", "Inputs", "Specs", "FilterArg", "Distinct", "TakesRowAsInput", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor,
        new java.lang.String[] { "Name", "FieldIndex", "ListView", "MapView", "DataView", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_ListView_descriptor,
        new java.lang.String[] { "ElementType", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunction_DataViewSpec_MapView_descriptor,
        new java.lang.String[] { "KeyType", "ValueType", });
    internal_static_org_apache_flink_fn_execution_v1_GroupWindow_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_apache_flink_fn_execution_v1_GroupWindow_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_GroupWindow_descriptor,
        new java.lang.String[] { "WindowType", "IsTimeWindow", "WindowSlide", "WindowSize", "WindowGap", "IsRowTime", "TimeFieldIndex", "AllowedLateness", "NamedProperties", "ShiftTimezone", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedAggregateFunctions_descriptor,
        new java.lang.String[] { "Udfs", "MetricEnabled", "Grouping", "GenerateUpdateBefore", "KeyType", "IndexOfCountStar", "StateCleaningEnabled", "StateCacheSize", "MapStateReadCacheSize", "MapStateWriteCacheSize", "CountStarInserted", "GroupWindow", "ProfileEnabled", "JobParameters", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_apache_flink_fn_execution_v1_Schema_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor,
        new java.lang.String[] { "Fields", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_MapInfo_descriptor,
        new java.lang.String[] { "KeyType", "ValueType", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_TimeInfo_descriptor,
        new java.lang.String[] { "Precision", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(2);
    internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_TimestampInfo_descriptor,
        new java.lang.String[] { "Precision", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(3);
    internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_LocalZonedTimestampInfo_descriptor,
        new java.lang.String[] { "Precision", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(4);
    internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_ZonedTimestampInfo_descriptor,
        new java.lang.String[] { "Precision", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(5);
    internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_DecimalInfo_descriptor,
        new java.lang.String[] { "Precision", "Scale", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(6);
    internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_BinaryInfo_descriptor,
        new java.lang.String[] { "Length", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(7);
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_VarBinaryInfo_descriptor,
        new java.lang.String[] { "Length", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(8);
    internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_CharInfo_descriptor,
        new java.lang.String[] { "Length", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(9);
    internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_VarCharInfo_descriptor,
        new java.lang.String[] { "Length", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(10);
    internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_FieldType_descriptor,
        new java.lang.String[] { "TypeName", "Nullable", "CollectionElementType", "MapInfo", "RowSchema", "DecimalInfo", "TimeInfo", "TimestampInfo", "LocalZonedTimestampInfo", "ZonedTimestampInfo", "BinaryInfo", "VarBinaryInfo", "CharInfo", "VarCharInfo", "TypeInfo", });
    internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_Schema_descriptor.getNestedTypes().get(11);
    internal_static_org_apache_flink_fn_execution_v1_Schema_Field_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_Schema_Field_descriptor,
        new java.lang.String[] { "Name", "Description", "Type", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor,
        new java.lang.String[] { "TypeName", "CollectionElementType", "RowTypeInfo", "TupleTypeInfo", "MapTypeInfo", "AvroTypeInfo", "TypeInfo", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_MapTypeInfo_descriptor,
        new java.lang.String[] { "KeyType", "ValueType", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_descriptor,
        new java.lang.String[] { "Fields", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_RowTypeInfo_Field_descriptor,
        new java.lang.String[] { "FieldName", "FieldType", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor.getNestedTypes().get(2);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_TupleTypeInfo_descriptor,
        new java.lang.String[] { "FieldTypes", });
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_TypeInfo_descriptor.getNestedTypes().get(3);
    internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_TypeInfo_AvroTypeInfo_descriptor,
        new java.lang.String[] { "Schema", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor,
        new java.lang.String[] { "FunctionType", "RuntimeContext", "Payload", "MetricEnabled", "KeyTypeInfo", "ProfileEnabled", "HasSideOutput", "StateCacheSize", "MapStateReadCacheSize", "MapStateWriteCacheSize", });
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_UserDefinedDataStreamFunction_RuntimeContext_descriptor,
        new java.lang.String[] { "TaskName", "TaskNameWithSubtasks", "NumberOfParallelSubtasks", "MaxNumberOfParallelSubtasks", "IndexOfThisSubtask", "AttemptNumber", "JobParameters", "InBatchExecutionMode", });
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_descriptor,
        new java.lang.String[] { "StateName", "StateTtlConfig", });
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_descriptor,
        new java.lang.String[] { "UpdateType", "StateVisibility", "TtlTimeCharacteristic", "Ttl", "CleanupStrategies", });
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor,
        new java.lang.String[] { "IsCleanupInBackground", "Strategies", });
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_IncrementalCleanupStrategy_descriptor,
        new java.lang.String[] { "CleanupSize", "RunCleanupForEveryRecord", });
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_RocksdbCompactFilterCleanupStrategy_descriptor,
        new java.lang.String[] { "QueryTimeAfterNumEntries", });
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_descriptor.getNestedTypes().get(2);
    internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_StateDescriptor_StateTTLConfig_CleanupStrategies_MapStrategiesEntry_descriptor,
        new java.lang.String[] { "Strategy", "EmptyStrategy", "IncrementalCleanupStrategy", "RocksdbCompactFilterCleanupStrategy", "CleanupStrategy", });
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor,
        new java.lang.String[] { "FlattenRowType", "RowType", "ArrowType", "OverWindowArrowType", "RawType", "Mode", "SeparatedWithEndMessage", "DataType", });
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_FlattenRowType_descriptor,
        new java.lang.String[] { "Schema", });
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RowType_descriptor,
        new java.lang.String[] { "Schema", });
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor.getNestedTypes().get(2);
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_ArrowType_descriptor,
        new java.lang.String[] { "Schema", });
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor.getNestedTypes().get(3);
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_OverWindowArrowType_descriptor,
        new java.lang.String[] { "Schema", });
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_descriptor =
      internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_descriptor.getNestedTypes().get(4);
    internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_fn_execution_v1_CoderInfoDescriptor_RawType_descriptor,
        new java.lang.String[] { "TypeInfo", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
